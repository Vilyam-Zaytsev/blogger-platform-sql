import request, { Response } from 'supertest';
import { UsersTestManager } from '../managers/users.test-manager';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials } from '../types';
import { Server } from 'http';
import { TestUtils } from '../helpers/test.utils';
import { HttpStatus } from '@nestjs/common';
import { UserAccountsConfig } from '../../src/modules/user-accounts/config/user-accounts.config';
import { JwtService } from '@nestjs/jwt';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';
import { REFRESH_TOKEN_STRATEGY_INJECT_TOKEN } from '../../src/modules/user-accounts/auth/constants/auth-tokens.inject-constants';

describe('AuthController - refreshToken() (POST: /auth/refresh-token)', () => {
  let appTestManager: AppTestManager;
  let usersTestManager: UsersTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init((moduleBuilder) =>
      moduleBuilder.overrideProvider(REFRESH_TOKEN_STRATEGY_INJECT_TOKEN).useFactory({
        factory: (userAccountsConfig: UserAccountsConfig) => {
          return new JwtService({
            secret: userAccountsConfig.refreshTokenSecret,
            signOptions: { expiresIn: '3s' },
          });
        },
        inject: [UserAccountsConfig],
      }),
    );

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should return a new pair of Access and Refresh tokens if the Refresh token sent by the user is still valid.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è login –∏ email)
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å Access –∏ Refresh —Ç–æ–∫–µ–Ω—ã
    const resLogin: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/login`)
      .send({
        loginOrEmail: createdUser.login,
        password: 'qwerty',
      })
      // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 200 OK, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º
      .expect(HttpStatus.OK);

    // üîª –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫—É–∫–∏ (–≤ –Ω–∏—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è Refresh token)
    const cookiesLogin: string = resLogin.headers['set-cookie'];

    // üîª –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (1 —Å–µ–∫—É–Ω–¥–∞), —á—Ç–æ–±—ã –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–ª–∏—á–∞–ª—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    await TestUtils.delay(1000);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Refresh token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤
    const resRefreshToken: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/refresh-token`)
      .set('Cookie', [...cookiesLogin]) // üî∏ –ü–µ—Ä–µ–¥–∞—ë–º Refresh token –∏–∑ –∫—É–∫–∏
      .expect(HttpStatus.OK); // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 200 OK

    // üîª –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É Set-Cookie (–Ω–æ–≤—ã–π Refresh token)
    const cookiesRefreshToken: string = resRefreshToken.headers['set-cookie'];

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ Access/Refresh —Ç–æ–∫–µ–Ω—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç —Å—Ç–∞—Ä—ã—Ö
    expect(resLogin.body).not.toEqual(resRefreshToken.body); // üî∏ –Ω–æ–≤—ã–π Access —Ç–æ–∫–µ–Ω
    expect(cookiesLogin).not.toEqual(cookiesRefreshToken); // üî∏ –Ω–æ–≤—ã–π Refresh —Ç–æ–∫–µ–Ω

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRefreshToken.body,
        resRefreshToken.statusCode,
        'Test ‚Ññ1: refreshToken() (POST: /auth/refresh-token)',
      );
    }
  });

  it('should not return a new pair of access and upgrade tokens if the Refresh token sent by the user is expired.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–Ω, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–∞—Ä—É Access –∏ Refresh —Ç–æ–∫–µ–Ω–æ–≤
    const resLogin: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/login`)
      .send({
        loginOrEmail: createdUser.login,
        password: 'qwerty',
      })
      // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 200 OK ‚Äî —É—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      .expect(HttpStatus.OK);

    // üîª –°–æ—Ö—Ä–∞–Ω—è–µ–º Refresh —Ç–æ–∫–µ–Ω –∏–∑ –∫—É–∫–æ–≤ (–¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
    const cookiesLogin: string = resLogin.headers['set-cookie'];

    // üîª –ñ–¥—ë–º 3 —Å–µ–∫—É–Ω–¥—ã ‚Äî –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Refresh —Ç–æ–∫–µ–Ω –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è —É—Å–ø–µ–µ—Ç –∏—Å—Ç–µ—á—å
    await TestUtils.delay(3000);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π Refresh —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤
    const resRefreshToken: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/refresh-token`)
      .set('Cookie', [...cookiesLogin]) // üî∏ –ü–µ—Ä–µ–¥–∞—ë–º —Å—Ç–∞—Ä—ã–π Refresh token
      // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 401 UNAUTHORIZED ‚Äî —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–∑–Ω–∞–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
      .expect(HttpStatus.UNAUTHORIZED);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRefreshToken.body,
        resRefreshToken.statusCode,
        'Test ‚Ññ2: refreshToken() (POST: /auth/refresh-token)',
      );
    }
  });

  it('should not return a new pair of access and refresh tokens if the user has logged out (Refresh token must be invalid)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø–æ–ª—É—á–∞—è Access –∏ Refresh —Ç–æ–∫–µ–Ω—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Set-Cookie
    const resLogin: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/login`)
      .send({
        loginOrEmail: createdUser.login,
        password: 'qwerty',
      })
      // üî∏ –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 200 OK
      .expect(HttpStatus.OK);

    // üîª –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ —Å Refresh —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const cookiesLogin: string = resLogin.headers['set-cookie'];

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º logout, —á—Ç–æ–±—ã Refresh —Ç–æ–∫–µ–Ω —Å—Ç–∞–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º (—É–¥–∞–ª—ë–Ω –∏–ª–∏ –∑–∞–Ω–µ—Å—ë–Ω –≤ blacklist)
    await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/logout`)
      .set('Cookie', [...cookiesLogin]) // üî∏ –ü–µ—Ä–µ–¥–∞—ë–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π Refresh —Ç–æ–∫–µ–Ω
      // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 204 No Content ‚Äî —É—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ Refresh —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
    const resRefreshToken: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/refresh-token`)
      .set('Cookie', [...cookiesLogin]) // üî∏ –ü–µ—Ä–µ–¥–∞—ë–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–æ—Ç–æ–∑–≤–∞–Ω"
      // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 401 Unauthorized ‚Äî —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ø–æ—Å–ª–µ logout
      .expect(HttpStatus.UNAUTHORIZED);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRefreshToken.body,
        resRefreshToken.statusCode,
        'Test ‚Ññ3: refreshToken() (POST: /auth/refresh-token)',
      );
    }
  });

  it('should not allow logout with an old Refresh token after it has been rotated (Refresh token reuse detection)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ‚Äî –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É Access –∏ Refresh —Ç–æ–∫–µ–Ω–æ–≤
    const resLogin: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/login`)
      .send({
        loginOrEmail: createdUser.login,
        password: 'qwerty',
      })
      // üî∏ –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ (200 OK)
      .expect(HttpStatus.OK);

    // üîª –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤ (–±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –∫–∞–∫ "—Å—Ç–∞—Ä—É—é")
    const cookiesLogin: string = resLogin.headers['set-cookie'];

    // üîª –î–µ–ª–∞–µ–º –ø–∞—É–∑—É, —á—Ç–æ–±—ã Refresh —Ç–æ–∫–µ–Ω—ã –æ—Ç–ª–∏—á–∞–ª–∏—Å—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    await TestUtils.delay(1000);

    // üîª –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ endpoint /auth/refresh-token
    const resRefreshToken: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/refresh-token`)
      .set('Cookie', [...cookiesLogin]) // üî∏ –ü–µ—Ä–µ–¥–∞—ë–º —Å—Ç–∞—Ä—ã–π Refresh —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ –Ω–æ–≤—ã–π
      // üî∏ –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–º–µ–Ω—É —Ç–æ–∫–µ–Ω–æ–≤ (200 OK)
      .expect(HttpStatus.OK);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π Refresh —Ç–æ–∫–µ–Ω —Å–Ω–æ–≤–∞ ‚Äî –¥–ª—è logout
    await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/logout`)
      .set('Cookie', [...cookiesLogin]) // üî∏ –ü–µ—Ä–µ–¥–∞—ë–º —Å—Ç–∞—Ä—ã–π (—É–∂–µ –∑–∞–º–µ–Ω—ë–Ω–Ω—ã–π) —Ç–æ–∫–µ–Ω
      // üî∏ –û–∂–∏–¥–∞–µ–º 401 Unauthorized ‚Äî —Ç–æ–∫–µ–Ω –±–æ–ª—å—à–µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –ø–æ—Å–ª–µ —Ä–æ—Ç–∞—Ü–∏–∏
      .expect(HttpStatus.UNAUTHORIZED);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRefreshToken.body,
        resRefreshToken.statusCode,
        'Test ‚Ññ4: refreshToken() (POST: /auth/refresh-token)',
      );
    }
  });
});
