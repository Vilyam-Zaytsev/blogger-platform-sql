import request, { Response } from 'supertest';
import { TestDtoFactory } from '../helpers/test.dto-factory';
import { UsersTestManager } from '../managers/users.test-manager';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials } from '../types';
import { Server } from 'http';
import { EmailTemplate } from '../../src/modules/notifications/templates/types';
import { TestUtils } from '../helpers/test.utils';
import { HttpStatus } from '@nestjs/common';
import { UsersRepository } from '../../src/modules/user-accounts/users/infrastructure/users.repository';
import { EmailService } from '../../src/modules/notifications/services/email.service';
import { UserInputDto } from '../../src/modules/user-accounts/users/api/input-dto/user.input-dto';
import { CryptoService } from '../../src/modules/user-accounts/users/application/services/crypto.service';
import { ConfirmationStatus } from '../../src/modules/user-accounts/auth/domain/entities/email-confirmation-code.entity';
import { User } from '../../src/modules/user-accounts/users/domain/entities/user.entity';

describe('AuthController - registrationConfirmation() (POST: /auth/registration-confirmation)', () => {
  let appTestManager: AppTestManager;
  let usersTestManager: UsersTestManager;
  let usersRepository: UsersRepository;
  let cryptoService: CryptoService;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;
  let sendEmailMock: jest.Mock;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
    usersRepository = appTestManager.app.get(UsersRepository);
    cryptoService = appTestManager.app.get(CryptoService);

    sendEmailMock = jest
      .spyOn(EmailService.prototype, 'sendEmail')
      .mockResolvedValue() as jest.Mock<Promise<void>, [string, EmailTemplate]>;
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);

    sendEmailMock.mockClear();

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should be confirmed if the user has sent the correct verification code.', async () => {
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [dto]: UserInputDto[] = TestDtoFactory.generateUserInputDto(1);

    // üîª –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await usersTestManager.registration(dto);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –≤–º–µ—Å—Ç–µ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const user_NotConfirmed: User | null =
      await usersRepository.getByEmailWithEmailConfirmationCode(dto.email);
    expect(user_NotConfirmed).not.toBeNull();

    if (!user_NotConfirmed) {
      throw new Error(
        'Test ‚Ññ1: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation): User not found',
      );
    }

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å "–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
    expect(user_NotConfirmed.emailConfirmationCode).toMatchObject({
      confirmationCode: expect.any(String),
      expirationDate: expect.any(Date),
      confirmationStatus: ConfirmationStatus.NotConfirmed,
    });

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ–∂–∏–¥–∞–µ–º 204 No Content
    const resRegistrationConfirmation: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-confirmation`)
      .send({
        code: user_NotConfirmed.emailConfirmationCode.confirmationCode,
      })
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ –∏–∑ –ë–î –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const user_Confirmed: User | null = await usersRepository.getByEmailWithEmailConfirmationCode(
      dto.email,
    );
    expect(user_Confirmed).not.toBeNull();

    if (!user_Confirmed) {
      throw new Error(
        'Test ‚Ññ1: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation): User not found',
      );
    }

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω –∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
    expect(user_Confirmed.emailConfirmationCode).toMatchObject({
      confirmationCode: null,
      expirationDate: null,
      confirmationStatus: ConfirmationStatus.Confirmed,
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistrationConfirmation.body,
        resRegistrationConfirmation.statusCode,
        'Test ‚Ññ1: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation)',
      );
    }
  });

  it('should not confirm the email if the user has sent more than 5 requests from one IP to "/login/registration-confirmation" in the last 10 seconds.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º —à–ø–∏–æ–Ω –Ω–∞ –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const spy = jest.spyOn(cryptoService, 'generateUUID');

    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const dtos: UserInputDto[] = TestDtoFactory.generateUserInputDto(5);

    // üîª –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (let i = 0; i < dtos.length; i++) {
      await usersTestManager.registration(dtos[i]);
    }

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–æ–¥–∞–º–∏ –∏–∑ —à–ø–∏–æ–Ω–∞, –æ–∂–∏–¥–∞–µ–º 204 No Content
    for (let i = 0; i < 5; i++) {
      await request(server)
        .post(`/${GLOBAL_PREFIX}/auth/registration-confirmation`)
        .send({
          code: spy.mock.results[i].value,
        })
        .expect(HttpStatus.NO_CONTENT);
    }

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 6-–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º, –æ–∂–∏–¥–∞–µ–º 429 Too Many Requests
    const resRegistrationConfirmation = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-confirmation`)
      .send({
        code: cryptoService.generateUUID(),
      })
      .expect(HttpStatus.TOO_MANY_REQUESTS);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–æ–≤–Ω–æ 5 —Ä–∞–∑
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(5);

    // üîª –û—á–∏—â–∞–µ–º –º–æ–∫ —à–ø–∏–æ–Ω–∞
    spy.mockClear();

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistrationConfirmation.body,
        resRegistrationConfirmation.statusCode,
        'Test ‚Ññ2: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation)',
      );
    }
  });

  it('should not be confirmed if the user has sent an incorrect verification code.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º —à–ø–∏–æ–Ω –Ω–∞ –º–µ—Ç–æ–¥ generateUUID, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const spy = jest.spyOn(cryptoService, 'generateUUID');

    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const incorrectCode: string = TestUtils.generateRandomString(15);

    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∞—Å—Å–∏–≤ –∏–∑ 1 DTO)
    const [dto]: UserInputDto[] = TestDtoFactory.generateUserInputDto(1);

    // üîª –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –±–∞–∑–µ —Å–æ–∑–¥–∞—Å—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email —Å UUID –∏–∑ spy)
    await usersTestManager.registration(dto);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–¥–æ–º
    const resRegistrationConfirmation: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-confirmation`)
      .send({
        code: incorrectCode,
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª—è "code"
    expect(resRegistrationConfirmation.body).toEqual({
      errorsMessages: [
        {
          message: `Confirmation code (${incorrectCode}) incorrect or the email address has already been confirmed`,
          field: 'code',
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –≤–º–µ—Å—Ç–µ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const user_NotConfirmed: User | null =
      await usersRepository.getByEmailWithEmailConfirmationCode(dto.email);
    expect(user_NotConfirmed).not.toBeNull();

    if (!user_NotConfirmed) {
      throw new Error(
        'Test ‚Ññ1: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation): User not found',
      );
    }

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –≤—Å—ë –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (confirmationStatus: NotConfirmed)
    expect(user_NotConfirmed.emailConfirmationCode).toMatchObject({
      confirmationCode: spy.mock.results[0].value,
      expirationDate: expect.any(Date),
      confirmationStatus: ConfirmationStatus.NotConfirmed,
    });

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å (–æ–¥–∏–Ω —Ä–∞–∑)
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    spy.mockClear();

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistrationConfirmation.body,
        resRegistrationConfirmation.statusCode,
        'Test ‚Ññ3: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation)',
      );
    }
  });

  it('should not be confirmed if the user has sent an incorrect verification code (the code has already been used)', async () => {
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DTO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const [dto]: UserInputDto[] = TestDtoFactory.generateUserInputDto(1);

    // üî∏ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await usersTestManager.registration(dto);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –≤–º–µ—Å—Ç–µ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const user_NotConfirmed: User | null =
      await usersRepository.getByEmailWithEmailConfirmationCode(dto.email);
    expect(user_NotConfirmed).not.toBeNull();

    if (!user_NotConfirmed) {
      throw new Error(
        'Test ‚Ññ1: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation): User not found',
      );
    }

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –≤—Å—ë –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (confirmationStatus: NotConfirmed)
    expect(user_NotConfirmed.emailConfirmationCode).toMatchObject({
      confirmationCode: expect.any(String),
      expirationDate: expect.any(Date),
      confirmationStatus: ConfirmationStatus.NotConfirmed,
    });

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
    await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-confirmation`)
      .send({
        code: user_NotConfirmed.emailConfirmationCode.confirmationCode,
      })
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ –∏–∑ –ë–î –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const user_Confirmed: User | null = await usersRepository.getByEmailWithEmailConfirmationCode(
      dto.email,
    );
    expect(user_Confirmed).not.toBeNull();

    if (!user_Confirmed) {
      throw new Error(
        'Test ‚Ññ1: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation): User not found',
      );
    }

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω –∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
    expect(user_Confirmed.emailConfirmationCode).toMatchObject({
      confirmationCode: null,
      expirationDate: null,
      confirmationStatus: ConfirmationStatus.Confirmed,
    });

    // üîª –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–º –∂–µ –∫–æ–¥–æ–º (–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)
    const resRegistrationConfirmation: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-confirmation`)
      .send({
        code: user_NotConfirmed.emailConfirmationCode.confirmationCode,
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª—è `code`
    expect(resRegistrationConfirmation.body).toEqual({
      errorsMessages: [
        {
          message: `Confirmation code (${user_NotConfirmed.emailConfirmationCode.confirmationCode}) incorrect or the email address has already been confirmed`,
          field: 'code',
        },
      ],
    });

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –æ–¥–∏–Ω —Ä–∞–∑ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistrationConfirmation.body,
        resRegistrationConfirmation.statusCode,
        'Test ‚Ññ4: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation)',
      );
    }
  });
});
