import request, { Response } from 'supertest';
import { TestDtoFactory } from '../helpers/test.dto-factory';
import { UsersTestManager } from '../managers/users.test-manager';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials } from '../types';
import { Server } from 'http';
import { EmailTemplate } from '../../src/modules/notifications/templates/types';
import { TestUtils } from '../helpers/test.utils';
import { HttpStatus } from '@nestjs/common';
import { UsersRepository } from '../../src/modules/user-accounts/users/infrastructure/users.repository';
import { EmailService } from '../../src/modules/notifications/services/email.service';
import { UserInputDto } from '../../src/modules/user-accounts/users/api/input-dto/user.input-dto';
import { UserDbType } from '../../src/modules/user-accounts/users/types/user-db.type';
import {
  ConfirmationStatus,
  EmailConfirmationDbType,
} from '../../src/modules/user-accounts/auth/types/email-confirmation-db.type';
import { CryptoService } from '../../src/modules/user-accounts/users/application/services/crypto.service';

describe('AuthController - registrationConfirmation() (POST: /auth/registration-confirmation)', () => {
  let appTestManager: AppTestManager;
  let usersTestManager: UsersTestManager;
  let usersRepository: UsersRepository;
  let cryptoService: CryptoService;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;
  let sendEmailMock: jest.Mock;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
    usersRepository = appTestManager.app.get(UsersRepository);
    cryptoService = appTestManager.app.get(CryptoService);

    sendEmailMock = jest
      .spyOn(EmailService.prototype, 'sendEmail')
      .mockResolvedValue() as jest.Mock<Promise<void>, [string, EmailTemplate]>;
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);

    sendEmailMock.mockClear();

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should be confirmed if the user has sent the correct verification code.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const [dto]: UserInputDto[] = TestDtoFactory.generateUserInputDto(1);

    // üîª –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
    await usersTestManager.registration(dto);

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ email
    const user: UserDbType | null = await usersRepository.getByEmail(dto.email);
    expect(user).not.toBeNull();

    if (!user) {
      throw new Error(
        'Test ‚Ññ1: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation): User not found',
      );
    }

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –≤ —Å—Ç–∞—Ç—É—Å–µ NotConfirmed
    const emailConfirmationRecord_NotConfirmed: EmailConfirmationDbType | null =
      await usersRepository.getEmailConfirmationByUserId(user.id);

    expect(emailConfirmationRecord_NotConfirmed).toEqual({
      userId: user.id,
      confirmationCode: expect.any(String),
      expirationDate: expect.any(Date),
      confirmationStatus: ConfirmationStatus.NotConfirmed,
    });

    if (!emailConfirmationRecord_NotConfirmed) {
      throw new Error(
        `Test ‚Ññ1: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation): Registration confirmation error. The email confirmation record was not found for the user with the ID: ${user.id}`,
      );
    }

    // üîª –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const resRegistrationConfirmation: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-confirmation`)
      .send({
        code: emailConfirmationRecord_NotConfirmed.confirmationCode,
      })
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
    const emailConfirmationRecord_Confirmed: EmailConfirmationDbType | null =
      await usersRepository.getEmailConfirmationByUserId(user.id);

    expect(emailConfirmationRecord_Confirmed).toEqual({
      userId: user.id,
      confirmationCode: null,
      expirationDate: null,
      confirmationStatus: ConfirmationStatus.Confirmed,
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–¥–∏–Ω —Ä–∞–∑
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistrationConfirmation.body,
        resRegistrationConfirmation.statusCode,
        'Test ‚Ññ1: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation)',
      );
    }
  });

  it('should not confirm the email if the user has sent more than 5 requests from one IP to "/login/registration-confirmation" in the last 10 seconds.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º —à–ø–∏–æ–Ω –Ω–∞ –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–¥–∞–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const spy = jest.spyOn(cryptoService, 'generateUUID');

    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ 5 DTO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const dtos: UserInputDto[] = TestDtoFactory.generateUserInputDto(5);

    // üîª –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (let i = 0; i < dtos.length; i++) {
      await usersTestManager.registration(dtos[i]);
    }

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 5 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    for (let i = 0; i < 5; i++) {
      await request(server)
        .post(`/${GLOBAL_PREFIX}/auth/registration-confirmation`)
        .send({
          code: spy.mock.results[i].value, // üî∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ –≤—ã–∑–æ–≤–∞ generateUUID()
        })
        .expect(HttpStatus.NO_CONTENT); // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 204 (—É—Å–ø–µ—à–Ω–æ, –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
    }

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 6-–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email —Å –Ω–æ–≤—ã–º (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º) UUID
    const resRegistrationConfirmation = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-confirmation`)
      .send({
        code: cryptoService.generateUUID(), // üî∏ —Ñ–µ–π–∫–æ–≤—ã–π –∫–æ–¥, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
      })
      .expect(HttpStatus.TOO_MANY_REQUESTS); // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 429 (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤)

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—á—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –≤—ã–∑—ã–≤–∞–ª—Å—è —Ä–æ–≤–Ω–æ 5 —Ä–∞–∑ (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π)
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(5);

    spy.mockClear();

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistrationConfirmation.body,
        resRegistrationConfirmation.statusCode,
        'Test ‚Ññ2: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation)',
      );
    }
  });

  it('should not be confirmed if the user has sent an incorrect verification code.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º —à–ø–∏–æ–Ω –Ω–∞ –º–µ—Ç–æ–¥ generateUUID, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const spy = jest.spyOn(cryptoService, 'generateUUID');

    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const incorrectCode: string = TestUtils.generateRandomString(15);

    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∞—Å—Å–∏–≤ –∏–∑ 1 DTO)
    const [dto]: UserInputDto[] = TestDtoFactory.generateUserInputDto(1);

    // üîª –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –±–∞–∑–µ —Å–æ–∑–¥–∞—Å—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email —Å UUID –∏–∑ spy)
    await usersTestManager.registration(dto);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–¥–æ–º
    const resRegistrationConfirmation: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-confirmation`)
      .send({
        code: incorrectCode, // üî∏ –ü–µ—Ä–µ–¥–∞—ë–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
      })
      .expect(HttpStatus.BAD_REQUEST); // üî∏ –û–∂–∏–¥–∞–µ–º 400 ‚Äî –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª—è "code"
    expect(resRegistrationConfirmation.body).toEqual({
      errorsMessages: [
        {
          message: `Confirmation code (${incorrectCode}) incorrect or the email address has already been confirmed`,
          field: 'code',
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É –∏–∑ spy
    const emailConfirmation: EmailConfirmationDbType | null =
      await usersRepository.getEmailConfirmationByConfirmationCode(
        spy.mock.results[0].value, // üî∏ –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–∏—Å—Ç–µ–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞
      );

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –≤—Å—ë –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (confirmationStatus: NotConfirmed)
    expect(emailConfirmation).toEqual({
      userId: expect.any(Number),
      confirmationCode: spy.mock.results[0].value,
      expirationDate: expect.any(Date),
      confirmationStatus: ConfirmationStatus.NotConfirmed,
    });

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å (–æ–¥–∏–Ω —Ä–∞–∑)
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    spy.mockClear();

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistrationConfirmation.body,
        resRegistrationConfirmation.statusCode,
        'Test ‚Ññ3: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation)',
      );
    }
  });

  it('should not be confirmed if the user has sent an incorrect verification code (the code has already been used)', async () => {
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DTO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const [dto]: UserInputDto[] = TestDtoFactory.generateUserInputDto(1);

    // üî∏ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await usersTestManager.registration(dto);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ email
    const user_NotConfirmed: UserDbType | null = await usersRepository.getByEmail(dto.email);
    expect(user_NotConfirmed).not.toBeNull(); // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    if (!user_NotConfirmed) {
      throw new Error(
        'Test ‚Ññ4: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation): User not found',
      );
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å email-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ userId
    const emailConfirmation_NotConfirmed: EmailConfirmationDbType | null =
      await usersRepository.getEmailConfirmationByUserId(user_NotConfirmed.id);

    if (!emailConfirmation_NotConfirmed) {
      throw new Error(
        'Test ‚Ññ4: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation): EmailConfirmation not found',
      );
    }

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
    expect(emailConfirmation_NotConfirmed).toEqual({
      userId: user_NotConfirmed.id,
      confirmationCode: expect.any(String),
      expirationDate: expect.any(Date),
      confirmationStatus: ConfirmationStatus.NotConfirmed,
    });

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
    await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-confirmation`)
      .send({
        code: emailConfirmation_NotConfirmed.confirmationCode,
      })
      .expect(HttpStatus.NO_CONTENT); // üî∏ –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

    // üîª –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º emailConfirmation –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const emailConfirmation_Confirmed: EmailConfirmationDbType | null =
      await usersRepository.getEmailConfirmationByUserId(user_NotConfirmed.id);

    if (!emailConfirmation_Confirmed) {
      throw new Error(
        'Test ‚Ññ4: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation): EmailConfirmation not found',
      );
    }

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –∏ –¥–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã, –∞ —Å—Ç–∞—Ç—É—Å ‚Äî Confirmed
    expect(emailConfirmation_Confirmed).toEqual({
      userId: user_NotConfirmed.id,
      confirmationCode: null,
      expirationDate: null,
      confirmationStatus: ConfirmationStatus.Confirmed,
    });

    // üîª –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–º –∂–µ –∫–æ–¥–æ–º (–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)
    const resRegistrationConfirmation: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-confirmation`)
      .send({
        code: emailConfirmation_NotConfirmed.confirmationCode,
      })
      .expect(HttpStatus.BAD_REQUEST); // üî∏ –û–∂–∏–¥–∞–µ–º 400 Bad Request

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª—è `code`
    expect(resRegistrationConfirmation.body).toEqual({
      errorsMessages: [
        {
          message: `Confirmation code (${emailConfirmation_NotConfirmed.confirmationCode}) incorrect or the email address has already been confirmed`,
          field: 'code',
        },
      ],
    });

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –æ–¥–∏–Ω —Ä–∞–∑ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistrationConfirmation.body,
        resRegistrationConfirmation.statusCode,
        'Test ‚Ññ4: AuthController - registrationConfirmation() (POST: /auth/registration-confirmation)',
      );
    }
  });
});
