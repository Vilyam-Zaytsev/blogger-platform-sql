import { UsersTestManager } from '../managers/users.test-manager';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials } from '../types';
import { Server } from 'http';
import { EmailTemplate } from '../../src/modules/notifications/templates/types';
import request, { Response } from 'supertest';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestUtils } from '../helpers/test.utils';
import { HttpStatus } from '@nestjs/common';
import { UsersRepository } from '../../src/modules/user-accounts/users/infrastructure/users.repository';
import { EmailService } from '../../src/modules/notifications/services/email.service';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';
import { CryptoService } from '../../src/modules/user-accounts/users/application/services/crypto.service';
import { PasswordRecoveryDbType } from '../../src/modules/user-accounts/auth/types/password-recovery-db.type';
import SpyInstance = jest.SpyInstance;

describe('AuthController - passwordRecovery() (POST: /auth)', () => {
  let appTestManager: AppTestManager;
  let usersTestManager: UsersTestManager;
  let usersRepository: UsersRepository;
  let cryptoService: CryptoService;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;
  let sendEmailMock: jest.Mock;
  let spy: SpyInstance;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
    cryptoService = appTestManager.app.get(CryptoService);
    usersRepository = appTestManager.app.get(UsersRepository);

    sendEmailMock = jest
      .spyOn(EmailService.prototype, 'sendEmail')
      .mockResolvedValue() as jest.Mock<Promise<void>, [string, EmailTemplate]>;

    spy = jest.spyOn(cryptoService, 'generateUUID');
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);

    sendEmailMock.mockClear();
    spy.mockClear();

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should send the recovery code by email and save the recovery code and the date of the expiration to the database if the user has sent the correct data: (email address)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [user]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /auth/password-recovery —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º email
    const resPasswordRecovery: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/password-recovery`)
      .send({
        email: user.email, // üî∏ –ü–µ—Ä–µ–¥–∞—ë–º email —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      })
      // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 204 No Content, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –æ—Ç–≤–µ—Ç –±–µ–∑ —Ç–µ–ª–∞
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º recoveryCode –∏–∑ –º–æ–∫–Ω—É—Ç–æ–≥–æ spy-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞
    const passwordRecovery: PasswordRecoveryDbType | null =
      await usersRepository.getPasswordRecoveryByRecoveryCode(spy.mock.results[0].value);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º recoveryCode –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ
    expect(passwordRecovery).not.toBeNull();

    if (!passwordRecovery) {
      throw new Error(
        'Test ‚Ññ1: AuthController - newPassword() (POST: /auth/password-recovery): PasswordRecovery not found',
      );
    }

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    expect(passwordRecovery).toEqual({
      userId: Number(user.id), // üî∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç
      recoveryCode: spy.mock.results[0].value, // üî∏ –ö–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, —á—Ç–æ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
      expirationDate: expect.any(Date), // üî∏ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º Date
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ email-–æ—Ç–ø—Ä–∞–≤–∫–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resPasswordRecovery.body,
        resPasswordRecovery.statusCode,
        'Test ‚Ññ1: AuthController - passwordRecovery() (POST: /auth/password-recovery)',
      );
    }
  });

  it('should not send the password recovery code by email to the user if the user has sent more than 5 requests from one IP to "/password-recovery" in the last 10 seconds.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [user]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –î–µ–ª–∞–µ–º 5 –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –æ–¥–Ω–æ–≥–æ IP ‚Äî –ª–∏–º–∏—Ç –µ—â–µ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω
    for (let i = 0; i < 5; i++) {
      await request(server)
        .post(`/${GLOBAL_PREFIX}/auth/password-recovery`)
        .send({
          email: user.email, // üî∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
        })
        // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 204 No Content ‚Äî –∑–∞–ø—Ä–æ—Å—ã –ø–æ–∫–∞ —É–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –ª–∏–º–∏—Ç
        .expect(HttpStatus.NO_CONTENT);
    }

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º 6-–π –∑–∞–ø—Ä–æ—Å ‚Äî –æ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç –∏ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω—ë–Ω
    const resPasswordRecovery: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/password-recovery`)
      .send({
        email: user.email, // üî∏ –í—Å—ë –µ—â—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
      })
      // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 429 Too Many Requests ‚Äî –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
      .expect(HttpStatus.TOO_MANY_REQUESTS);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sendEmailMock –≤—ã–∑—ã–≤–∞–ª—Å—è —Ä–æ–≤–Ω–æ 5 —Ä–∞–∑ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤—ã—Ö 5 —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö)
    expect(sendEmailMock).toHaveBeenCalledTimes(5);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resPasswordRecovery.body,
        resPasswordRecovery.statusCode,
        'Test ‚Ññ2: AuthController - passwordRecovery() (POST: /auth/password-recovery)',
      );
    }
  });

  it(
    'should not send the recovery code by e-mail and save the recovery code and expiration date in the database if' +
      ' the user has sent !!!INCORRECT!!! data: (email address)',
    async () => {
      // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –≤–∞–∂–µ–Ω, —Ç.–∫. –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º email)
      await usersTestManager.createUser(1);

      // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /auth/password-recovery —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email
      const resPasswordRecovery: Response = await request(server)
        .post(`/${GLOBAL_PREFIX}/auth/password-recovery`)
        .send({
          email: 'incorrect-email@example.com', // üî∏ Email –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        })
        // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 204 No Content ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ email –Ω–µ–≤–µ—Ä–Ω—ã–π, –æ—Ç–≤–µ—Ç –±–µ–∑ —Ç–µ–ª–∞
        .expect(HttpStatus.NO_CONTENT);

      // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –ù–ï –≤—ã–∑—ã–≤–∞–ª—Å—è
      expect(sendEmailMock).toHaveBeenCalledTimes(0);

      if (testLoggingEnabled) {
        TestLoggers.logE2E(
          resPasswordRecovery.body,
          resPasswordRecovery.statusCode,
          'Test ‚Ññ3: AuthController - passwordRecovery() (POST: /auth/password-recovery)',
        );
      }
    },
  );

  it(
    'should not send the recovery code by e-mail and save the recovery code and expiration date in the database if' +
      ' the user has sent !!!INVALID!!! data: (email address)',
    async () => {
      // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await usersTestManager.createUser(1);

      // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º email-–∞–¥—Ä–µ—Å–æ–º
      const resPasswordRecovery: Response = await request(server)
        .post(`/${GLOBAL_PREFIX}/auth/password-recovery`)
        .send({
          email: 'invalid-email', // üî∏ –Ø–≤–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π email (–±–µ–∑ "@", –±–µ–∑ –¥–æ–º–µ–Ω–∞ –∏ —Ç.–ø.)
        })
        // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 400 Bad Request, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
        .expect(HttpStatus.BAD_REQUEST);

      // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞ ‚Äî –æ–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—é "email"
      expect(resPasswordRecovery.body).toEqual({
        errorsMessages: [
          {
            field: 'email',
            message:
              'email must match /^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$/ regular expression; Received value: invalid-email',
          },
        ],
      });

      // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email –ù–ï –≤—ã–∑—ã–≤–∞–ª–∞—Å—å
      expect(sendEmailMock).toHaveBeenCalledTimes(0);

      if (testLoggingEnabled) {
        TestLoggers.logE2E(
          resPasswordRecovery.body,
          resPasswordRecovery.statusCode,
          'Test ‚Ññ4: AuthController - passwordRecovery() (POST: /auth/password-recovery)',
        );
      }
    },
  );
});
