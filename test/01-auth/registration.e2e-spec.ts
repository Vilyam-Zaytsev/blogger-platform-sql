import request, { Response } from 'supertest';
import { TestDtoFactory } from '../helpers/test.dto-factory';
import { UsersTestManager } from '../managers/users.test-manager';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials } from '../types';
import { Server } from 'http';
import { PaginatedViewDto } from '../../src/core/dto/paginated.view-dto';
import { EmailTemplate } from '../../src/modules/notifications/templates/types';
import { TestUtils } from '../helpers/test.utils';
import { HttpStatus } from '@nestjs/common';
import { EmailService } from '../../src/modules/notifications/services/email.service';
import { UserInputDto } from '../../src/modules/user-accounts/users/api/input-dto/user.input-dto';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';

describe('AuthController - registration() (POST: /auth/registration)', () => {
  let appTestManager: AppTestManager;
  let usersTestManager: UsersTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;
  let sendEmailMock: jest.Mock;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);

    sendEmailMock = jest
      .spyOn(EmailService.prototype, 'sendEmail')
      .mockResolvedValue() as jest.Mock<Promise<void>, [string, EmailTemplate]>;
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['migrations']);

    sendEmailMock.mockClear();

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should be registered if the user has sent the correct data (login or email address and password).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [dto]: UserInputDto[] = TestDtoFactory.generateUserInputDto(1);

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const resRegistration: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration`)
      .send(dto)
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { items }: PaginatedViewDto<UserViewDto> = await usersTestManager.getAll();

    const [user] = items;

    if (!user) {
      throw new Error(
        'Test ‚Ññ1: AuthController - registration() (POST: /auth/registration): User not found',
      );
    }

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    expect(items).toHaveLength(1);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–æ–ª–µ–π
    expect(typeof user.id).toBe('string');
    expect(new Date(user.createdAt).toString()).not.toBe('Invalid Date');
    expect(user.login).toBe(dto.login);
    expect(user.email).toBe(dto.email);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistration.body,
        resRegistration.statusCode,
        'Test ‚Ññ1: AuthController - registration() (POST: /auth/registration)',
      );
    }
  });

  it('should not register the user in the system if the user has sent more than 5 requests from one IP to "/registration" in the last 10 seconds.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º 6 –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const dtos: UserInputDto[] = TestDtoFactory.generateUserInputDto(6);

    // üîª –£—Å–ø–µ—à–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã—Ö 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (let i = 0; i < 5; i++) {
      await request(server)
        .post(`/${GLOBAL_PREFIX}/auth/registration`)
        .send(dtos[i])
        .expect(HttpStatus.NO_CONTENT);
    }

    // üîª –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å 6-–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    const resRegistration: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration`)
      .send(dtos[5])
      .expect(HttpStatus.TOO_MANY_REQUESTS);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const { items }: PaginatedViewDto<UserViewDto> = await usersTestManager.getAll();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–≤–Ω–æ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    expect(items).toHaveLength(5);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(5);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistration.body,
        resRegistration.statusCode,
        'Test ‚Ññ2: AuthController - registration() (POST: /auth/registration)',
      );
    }
  });

  it('should not be registered if a user with such data already exists (login).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
    const [user]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–º –∂–µ –ª–æ–≥–∏–Ω–æ–º
    const resRegistration: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration`)
      .send({
        login: user.login,
        email: 'newUser@example.com',
        password: 'qwerty',
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–π –æ—à–∏–±–∫–∏
    expect(resRegistration.body).toEqual({
      errorsMessages: [
        {
          message: 'User with the same login already exists.',
          field: 'login',
        },
      ],
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
    const { items }: PaginatedViewDto<UserViewDto> = await usersTestManager.getAll();
    expect(items).toHaveLength(1);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    expect(sendEmailMock).not.toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistration.body,
        resRegistration.statusCode,
        'Test ‚Ññ3: AuthController - registration() (POST: /auth/registration)',
      );
    }
  });

  it('should not be registered if a user with such data already exists (email).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
    const [user]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–º –∂–µ email
    const resRegistration: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration`)
      .send({
        login: 'newUser',
        email: user.email,
        password: 'qwerty',
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–π –æ—à–∏–±–∫–∏
    expect(resRegistration.body).toEqual({
      errorsMessages: [
        {
          message: 'User with the same email already exists.',
          field: 'email',
        },
      ],
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
    const { items }: PaginatedViewDto<UserViewDto> = await usersTestManager.getAll();
    expect(items).toHaveLength(1);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    expect(sendEmailMock).not.toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistration.body,
        resRegistration.statusCode,
        'Test ‚Ññ4: AuthController - registration() (POST: /auth/registration)',
      );
    }
  });

  it('should not be registered a user if the data in the request body is incorrect (an empty object is passed).', async () => {
    // üîª –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–∞–Ω–Ω—ã—Ö
    const resRegistration: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration`)
      .send({})
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    expect(resRegistration.body).toEqual({
      errorsMessages: [
        {
          field: 'password',
          message: 'password must be a string; Received value: undefined',
        },
        {
          field: 'email',
          message:
            'email must match /^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$/ regular expression; Received value: undefined',
        },
        {
          field: 'login',
          message: 'login must be a string; Received value: undefined',
        },
      ],
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { items }: PaginatedViewDto<UserViewDto> = await usersTestManager.getAll();
    expect(items).toHaveLength(0);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    expect(sendEmailMock).not.toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistration.body,
        resRegistration.statusCode,
        'Test ‚Ññ5: AuthController - registration() (POST: /auth/registration)',
      );
    }
  });

  it('should not be registered a user if the data in the request body is incorrect (login: empty line, email: empty line, password: empty line).', async () => {
    // üîª –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—É—Å—Ç—ã–º–∏ (–ø—Ä–æ–±–µ–ª—å–Ω—ã–º–∏) –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ–ª–µ–π
    const resRegistration: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration`)
      .send({
        login: '   ',
        email: '   ',
        password: '   ',
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    expect(resRegistration.body).toEqual({
      errorsMessages: [
        {
          field: 'password',
          message: 'password must be longer than or equal to 6 characters; Received value: ',
        },
        {
          field: 'email',
          message:
            'email must match /^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$/ regular expression; Received value: ',
        },
        {
          field: 'login',
          message: 'login must be longer than or equal to 3 characters; Received value: ',
        },
      ],
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { items }: PaginatedViewDto<UserViewDto> = await usersTestManager.getAll();
    expect(items).toHaveLength(0);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    expect(sendEmailMock).not.toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistration.body,
        resRegistration.statusCode,
        'Test ‚Ññ6: AuthController - registration() (POST: /auth/registration)',
      );
    }
  });

  it('should not be registered a user if the data in the request body is incorrect (login: less than the minimum length, email: incorrect, password: less than the minimum length).', async () => {
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    const login: string = TestUtils.generateRandomString(2);
    const email: string = TestUtils.generateRandomString(10);
    const password: string = TestUtils.generateRandomString(5);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const resRegistration: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration`)
      .send({
        login,
        email,
        password,
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    expect(resRegistration.body).toEqual({
      errorsMessages: [
        {
          field: 'password',
          message: `password must be longer than or equal to 6 characters; Received value: ${password}`,
        },
        {
          field: 'email',
          message: `email must match /^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$/ regular expression; Received value: ${email}`,
        },
        {
          field: 'login',
          message: `login must be longer than or equal to 3 characters; Received value: ${login}`,
        },
      ],
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { items }: PaginatedViewDto<UserViewDto> = await usersTestManager.getAll();
    expect(items).toHaveLength(0);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    expect(sendEmailMock).not.toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistration.body,
        resRegistration.statusCode,
        'Test ‚Ññ7: AuthController - registration() (POST: /auth/registration)',
      );
    }
  });

  it('should not be registered a user if the data in the request body is incorrect (login: exceeds max length,  email: incorrect, password: exceeds max length).', async () => {
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É
    const login: string = TestUtils.generateRandomString(11);
    const email: string = TestUtils.generateRandomString(10);
    const password: string = TestUtils.generateRandomString(21);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const resRegistration: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration`)
      .send({
        login,
        email,
        password,
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    expect(resRegistration.body).toEqual({
      errorsMessages: [
        {
          field: 'password',
          message: `password must be shorter than or equal to 20 characters; Received value: ${password}`,
        },
        {
          field: 'email',
          message: `email must match /^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$/ regular expression; Received value: ${email}`,
        },
        {
          field: 'login',
          message: `login must be shorter than or equal to 10 characters; Received value: ${login}`,
        },
      ],
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { items }: PaginatedViewDto<UserViewDto> = await usersTestManager.getAll();
    expect(items).toHaveLength(0);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    expect(sendEmailMock).not.toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistration.body,
        resRegistration.statusCode,
        'Test ‚Ññ8: AuthController - registration() (POST: /auth/registration)',
      );
    }
  });

  it('should not be registered a user if the data in the request body is incorrect (login: type number,  email: type number, password: type number).', async () => {
    // üîª –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ–¥–∞–≤–∞—è —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫
    const resRegistration: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration`)
      .send({
        login: 123,
        email: 123,
        password: 123,
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    expect(resRegistration.body).toEqual({
      errorsMessages: [
        {
          field: 'password',
          message: 'password must be a string; Received value: 123',
        },
        {
          field: 'email',
          message:
            'email must match /^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$/ regular expression; Received value: 123',
        },
        {
          field: 'login',
          message: 'login must be a string; Received value: 123',
        },
      ],
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { items }: PaginatedViewDto<UserViewDto> = await usersTestManager.getAll();
    expect(items).toHaveLength(0);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    expect(sendEmailMock).not.toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistration.body,
        resRegistration.statusCode,
        'Test ‚Ññ9: AuthController - registration() (POST: /auth/registration)',
      );
    }
  });
});
