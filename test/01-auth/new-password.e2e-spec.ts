import { UsersTestManager } from '../managers/users.test-manager';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials } from '../types';
import { Server } from 'http';
import { EmailTemplate } from '../../src/modules/notifications/templates/types';
import request, { Response } from 'supertest';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestUtils } from '../helpers/test.utils';
import { HttpStatus } from '@nestjs/common';
import { UsersRepository } from '../../src/modules/user-accounts/users/infrastructure/users.repository';
import { EmailService } from '../../src/modules/notifications/services/email.service';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';
import { CryptoService } from '../../src/modules/user-accounts/users/application/services/crypto.service';
import { User } from '../../src/modules/user-accounts/users/domain/entities/user.entity';
import SpyInstance = jest.SpyInstance;

describe('AuthController - newPassword() (POST: /auth/new-password)', () => {
  let appTestManager: AppTestManager;
  let usersTestManager: UsersTestManager;
  let usersRepository: UsersRepository;
  let cryptoService: CryptoService;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;
  let sendEmailMock: jest.Mock;
  let spy: SpyInstance;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();

    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
    usersRepository = appTestManager.app.get(UsersRepository);
    cryptoService = appTestManager.app.get(CryptoService);
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    sendEmailMock = jest
      .spyOn(EmailService.prototype, 'sendEmail')
      .mockResolvedValue() as jest.Mock<Promise<void>, [string, EmailTemplate]>;

    spy = jest.spyOn(cryptoService, 'generateUUID');
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['migrations']);

    sendEmailMock.mockClear();
    spy.mockClear();

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should update the password if the user has sent the correct data: (newPassword, recoveryCode)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—á–∏—â–∞–µ–º –º–æ–∫ —à–ø–∏–æ–Ω–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    spy.mockClear();

    // üîª –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç recoveryCode
    await usersTestManager.passwordRecovery(createdUser.email);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –≤–º–µ—Å—Ç–µ —Å recoveryCode –¥–æ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    const userWithOldPassword: User | null =
      await usersRepository.getByEmailWithPasswordRecoveryCode(createdUser.email);

    expect(userWithOldPassword).not.toBeNull();

    if (!userWithOldPassword) {
      throw new Error(
        'Test ‚Ññ1: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ recoveryCode –∏ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
    expect(userWithOldPassword.passwordRecoveryCode).toMatchObject({
      recoveryCode: spy.mock.results[0].value,
      expirationDate: expect.any(Date),
    });

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º –∏ recoveryCode, –æ–∂–∏–¥–∞–µ–º 204 No Content
    const resNewPassword: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/new-password`)
      .send({
        newPassword: 'qwerty',
        recoveryCode: spy.mock.results[0].value,
      })
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ –∏–∑ –ë–î –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    const userWithNewPassword: User | null =
      await usersRepository.getByEmailWithPasswordRecoveryCode(createdUser.email);

    expect(userWithNewPassword).not.toBeNull();

    if (!userWithNewPassword) {
      throw new Error(
        'Test ‚Ññ1: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö—ç—à –ø–∞—Ä–æ–ª—è –∏–∑–º–µ–Ω–∏–ª—Å—è
    expect(userWithOldPassword.passwordHash).not.toBe(userWithNewPassword.passwordHash);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ recoveryCode —Å–±—Ä–æ—à–µ–Ω
    expect(userWithNewPassword.passwordRecoveryCode).toMatchObject({
      recoveryCode: null,
      expirationDate: null,
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resNewPassword.body,
        resNewPassword.statusCode,
        'Test ‚Ññ1: AuthController - newPassword() (POST: /auth/new-password)',
      );
    }
  });

  it('should update the password if the user has sent the correct data: (newPassword, recoveryCode)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è ‚Äî –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–ø–∏–æ–Ω spy –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞
    await usersTestManager.passwordRecovery(createdUser.email);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 5 –ø–æ–¥—Ä—è–¥ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è —Å –≤–∞–ª–∏–¥–Ω—ã–º recoveryCode, —á—Ç–æ–±—ã –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
    for (let i = 0; i < 5; i++) {
      await request(server).post(`/${GLOBAL_PREFIX}/auth/new-password`).send({
        newPassword: 'qwerty',
        recoveryCode: spy.mock.results[0].value,
      });
    }

    // üîª –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 6-–π –∑–∞–ø—Ä–æ—Å ‚Äî –æ–∂–∏–¥–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç–æ—Ç–µ (rate limit)
    const resNewPassword: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/new-password`)
      .send({
        newPassword: 'qwerty',
        recoveryCode: spy.mock.results[0].value,
      })
      .expect(HttpStatus.TOO_MANY_REQUESTS);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resNewPassword.body,
        resNewPassword.statusCode,
        'Test ‚Ññ2: AuthController - newPassword() (POST: /auth/new-password)',
      );
    }
  });

  it('should not update the password if the user has sent incorrect data: (newPassword: less than 6 characters)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    spy.mockClear();

    // üîª –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, —á—Ç–æ–±—ã –≤ –±–∞–∑—É –∑–∞–ø–∏—Å–∞–ª—Å—è recoveryCode
    await usersTestManager.passwordRecovery(createdUser.email);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    const found_user_1: User | null = await usersRepository.getByEmail(createdUser.email);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
    expect(found_user_1).not.toBeNull();

    if (!found_user_1) {
      throw new Error(
        'Test ‚Ññ3: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üîª –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–µ–Ω—å—à–µ 6 —Å–∏–º–≤–æ–ª–æ–≤)
    const resNewPassword: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/new-password`)
      .send({
        newPassword: 'qwert',
        recoveryCode: spy.mock.results[0].value,
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—é newPassword
    expect(resNewPassword.body).toEqual({
      errorsMessages: [
        {
          field: 'newPassword',
          message:
            'newPassword must be longer than or equal to 6 characters; Received value: qwert',
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è
    const found_user_2: User | null = await usersRepository.getByEmail(createdUser.email);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    expect(found_user_2).not.toBeNull();

    if (!found_user_2) {
      throw new Error(
        'Test ‚Ññ3: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö—ç—à –ø–∞—Ä–æ–ª—è –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º (–ø–∞—Ä–æ–ª—å –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω)
    expect(found_user_1.passwordHash).toBe(found_user_2.passwordHash);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –≤—Å—ë –µ—â—ë –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–∞ —ç—Ç–∞–ø–µ recovery)
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resNewPassword.body,
        resNewPassword.statusCode,
        'Test ‚Ññ3: AuthController - newPassword() (POST: /auth/new-password)',
      );
    }
  });

  it('should not update the password if the user has sent incorrect data: (newPassword: more than 20 characters)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å (–¥–ª–∏–Ω–æ–π –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)
    const invalidPassword: string = TestUtils.generateRandomString(21);

    // üîª –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email)
    await usersTestManager.passwordRecovery(createdUser.email);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–æ –ø–æ–ø—ã—Ç–∫–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è)
    const found_user_1: User | null = await usersRepository.getByEmail(createdUser.email);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    expect(found_user_1).not.toBeNull();
    if (!found_user_1) {
      throw new Error(
        'Test ‚Ññ4: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º) –ø–∞—Ä–æ–ª–µ–º
    const resNewPassword: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/new-password`)
      .send({
        newPassword: invalidPassword,
        recoveryCode: spy.mock.results[0].value,
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(resNewPassword.body).toEqual({
      errorsMessages: [
        {
          field: 'newPassword',
          message: `newPassword must be shorter than or equal to 20 characters; Received value: ${invalidPassword}`,
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ (–ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è)
    const found_user_2: User | null = await usersRepository.getByEmail(createdUser.email);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    expect(found_user_2).not.toBeNull();
    if (!found_user_2) {
      throw new Error(
        'Test ‚Ññ4: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–µ—à –ø–∞—Ä–æ–ª—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (—Ç.–µ. –ø–∞—Ä–æ–ª—å –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω)
    expect(found_user_1.passwordHash).toBe(found_user_2.passwordHash);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (–Ω–∞ —ç—Ç–∞–ø–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resNewPassword.body,
        resNewPassword.statusCode,
        'Test ‚Ññ4: AuthController - newPassword() (POST: /auth/new-password)',
      );
    }
  });

  it('should not update the password if the user has sent incorrect data: (recoveryCode)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ test manager
    const [user]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å recoveryCode
    await usersTestManager.passwordRecovery(user.email);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è
    const found_user_1: User | null = await usersRepository.getByEmail(user.email);

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    expect(found_user_1).not.toBeNull();

    if (!found_user_1) {
      throw new Error(
        'Test ‚Ññ5: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –ù–ï–í–ï–†–ù–´–ú recoveryCode
    const resNewPassword: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/new-password`)
      .send({
        newPassword: 'qwerty',
        recoveryCode: 'incorrect-recovery-code',
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è
    const found_user_2: User | null = await usersRepository.getByEmail(user.email);

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    expect(found_user_2).not.toBeNull();

    if (!found_user_2) {
      throw new Error(
        'Test ‚Ññ5: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (hash –æ—Å—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ)
    expect(found_user_1.passwordHash).toBe(found_user_2.passwordHash);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resNewPassword.body,
        resNewPassword.statusCode,
        'Test ‚Ññ5: AuthController - newPassword() (POST: /auth/new-password)',
      );
    }
  });
});
