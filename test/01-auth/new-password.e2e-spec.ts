import { UsersTestManager } from '../managers/users.test-manager';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials } from '../types';
import { Server } from 'http';
import { EmailTemplate } from '../../src/modules/notifications/templates/types';
import request, { Response } from 'supertest';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestUtils } from '../helpers/test.utils';
import { HttpStatus } from '@nestjs/common';
import { UsersRepository } from '../../src/modules/user-accounts/users/infrastructure/users.repository';
import { EmailService } from '../../src/modules/notifications/services/email.service';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';
import { UserDbType } from '../../src/modules/user-accounts/users/types/user-db.type';
import { CryptoService } from '../../src/modules/user-accounts/users/application/services/crypto.service';
import SpyInstance = jest.SpyInstance;
import { PasswordRecoveryDbType } from '../../src/modules/user-accounts/auth/types/password-recovery-db.type';

describe('AuthController - newPassword() (POST: /auth/new-password)', () => {
  let appTestManager: AppTestManager;
  let usersTestManager: UsersTestManager;
  let usersRepository: UsersRepository;
  let cryptoService: CryptoService;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;
  let sendEmailMock: jest.Mock;
  let spy: SpyInstance;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();

    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
    usersRepository = appTestManager.app.get(UsersRepository);
    cryptoService = appTestManager.app.get(CryptoService);
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    sendEmailMock = jest
      .spyOn(EmailService.prototype, 'sendEmail')
      .mockResolvedValue() as jest.Mock<Promise<void>, [string, EmailTemplate]>;

    spy = jest.spyOn(cryptoService, 'generateUUID');
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);

    sendEmailMock.mockClear();
    spy.mockClear();

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should update the password if the user has sent the correct data: (newPassword, recoveryCode)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [user]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    await usersTestManager.passwordRecovery(user.email);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è, —á—Ç–æ–±—ã –ø–æ–∑–∂–µ —Å—Ä–∞–≤–Ω–∏—Ç—å hash
    const userWithOldPassword: UserDbType | null =
      await usersRepository.getByEmail(user.email);

    expect(userWithOldPassword).not.toBeNull();

    // üî∏ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ—Å—Ç
    if (!userWithOldPassword) {
      throw new Error(
        'Test ‚Ññ1: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∫–æ–¥—É –∏–∑ email-–æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤–∑—è—Ç—ã–π –∏–∑ mock-–∞)
    const passwordRecovery_1: PasswordRecoveryDbType | null =
      await usersRepository.getPasswordRecoveryByRecoveryCode(
        spy.mock.results[0].value,
      );

    expect(passwordRecovery_1).not.toBeNull();

    // üî∏ –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞
    if (!passwordRecovery_1) {
      throw new Error(
        'Test ‚Ññ1: AuthController - newPassword() (POST: /auth/new-password): passwordRecovery_1 not found',
      );
    }

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    expect(passwordRecovery_1).toEqual({
      userId: userWithOldPassword.id,
      recoveryCode: spy.mock.results[0].value,
      expirationDate: expect.any(Date),
    });

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    const resNewPassword: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/new-password`)
      .send({
        newPassword: 'qwerty', // üî∏ –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        recoveryCode: spy.mock.results[0].value, // üî∏ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π recovery code –∏–∑ –º–æ–∫–∞
      })
      // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 204 No Content ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    const userWithNewPassword: UserDbType | null =
      await usersRepository.getByEmail(user.email);

    expect(userWithNewPassword).not.toBeNull();

    // üî∏ –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –æ—à–∏–±–∫–∞
    if (!userWithNewPassword) {
      throw new Error(
        'Test ‚Ññ1: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö—ç—à –ø–∞—Ä–æ–ª—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
    expect(userWithOldPassword.passwordHash).not.toBe(
      userWithNewPassword.passwordHash,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ recovery-–∫–æ–¥ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    const passwordRecovery_2: PasswordRecoveryDbType | null =
      await usersRepository.getPasswordRecoveryByRecoveryCode(
        spy.mock.results[0].value,
      );

    // üî∏ –ó–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—Ç null
    expect(passwordRecovery_2).toBeNull();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resNewPassword.body,
        resNewPassword.statusCode,
        'Test ‚Ññ1: AuthController - newPassword() (POST: /auth/new-password)',
      );
    }
  });
  //TODO: –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç –Ω–∞ rate limit

  it('should not update the password if the user has sent incorrect data: (newPassword: less than 6 characters)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    const [user]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, —á—Ç–æ–±—ã –≤ –±–∞–∑—É –∑–∞–ø–∏—Å–∞–ª—Å—è recoveryCode
    await usersTestManager.passwordRecovery(user.email);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    const found_user_1: UserDbType | null = await usersRepository.getByEmail(
      user.email,
    );

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
    expect(found_user_1).not.toBeNull();

    if (!found_user_1) {
      throw new Error(
        'Test ‚Ññ3: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üîª –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–µ–Ω—å—à–µ 6 —Å–∏–º–≤–æ–ª–æ–≤)
    const resNewPassword: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/new-password`)
      .send({
        newPassword: 'qwert', // üî∏ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å
        recoveryCode: spy.mock.results[0].value, // üî∏ –í–∞–ª–∏–¥–Ω—ã–π recoveryCode
      })
      .expect(HttpStatus.BAD_REQUEST); // üî∏ –û–∂–∏–¥–∞–µ–º 400 Bad Request

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—é newPassword
    expect(resNewPassword.body).toEqual({
      errorsMessages: [
        {
          field: 'newPassword',
          message:
            'newPassword must be longer than or equal to 6 characters; Received value: qwert',
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è
    const found_user_2: UserDbType | null = await usersRepository.getByEmail(
      user.email,
    );

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    expect(found_user_2).not.toBeNull();

    if (!found_user_2) {
      throw new Error(
        'Test ‚Ññ3: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö—ç—à –ø–∞—Ä–æ–ª—è –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º (–ø–∞—Ä–æ–ª—å –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω)
    expect(found_user_1.passwordHash).toBe(found_user_2.passwordHash);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –≤—Å—ë –µ—â—ë –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–∞ —ç—Ç–∞–ø–µ recovery)
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resNewPassword.body,
        resNewPassword.statusCode,
        'Test ‚Ññ3: AuthController - newPassword() (POST: /auth/new-password)',
      );
    }
  });
  it('should not update the password if the user has sent incorrect data: (newPassword: more than 20 characters)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [user]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å (–¥–ª–∏–Ω–æ–π –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)
    const invalidPassword: string = TestUtils.generateRandomString(21);

    // üîª –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email)
    await usersTestManager.passwordRecovery(user.email);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–æ –ø–æ–ø—ã—Ç–∫–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è)
    const found_user_1: UserDbType | null = await usersRepository.getByEmail(
      user.email,
    );

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    expect(found_user_1).not.toBeNull();
    if (!found_user_1) {
      throw new Error(
        'Test ‚Ññ4: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º) –ø–∞—Ä–æ–ª–µ–º
    const resNewPassword: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/new-password`)
      .send({
        newPassword: invalidPassword,
        recoveryCode: spy.mock.results[0].value, // üî∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π recoveryCode
      })
      .expect(HttpStatus.BAD_REQUEST); // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 400 (BAD_REQUEST)

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(resNewPassword.body).toEqual({
      errorsMessages: [
        {
          field: 'newPassword',
          message: `newPassword must be shorter than or equal to 20 characters; Received value: ${invalidPassword}`,
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ (–ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è)
    const found_user_2: UserDbType | null = await usersRepository.getByEmail(
      user.email,
    );

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    expect(found_user_2).not.toBeNull();
    if (!found_user_2) {
      throw new Error(
        'Test ‚Ññ4: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–µ—à –ø–∞—Ä–æ–ª—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (—Ç.–µ. –ø–∞—Ä–æ–ª—å –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω)
    expect(found_user_1.passwordHash).toBe(found_user_2.passwordHash);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (–Ω–∞ —ç—Ç–∞–ø–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resNewPassword.body,
        resNewPassword.statusCode,
        'Test ‚Ññ4: AuthController - newPassword() (POST: /auth/new-password)',
      );
    }
  });

  it('should not update the password if the user has sent incorrect data: (recoveryCode)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ test manager
    const [user]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å recoveryCode
    await usersTestManager.passwordRecovery(user.email);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è
    const found_user_1: UserDbType | null = await usersRepository.getByEmail(
      user.email,
    );

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    expect(found_user_1).not.toBeNull();

    if (!found_user_1) {
      throw new Error(
        'Test ‚Ññ5: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –ù–ï–í–ï–†–ù–´–ú recoveryCode
    const resNewPassword: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/new-password`)
      .send({
        newPassword: 'qwerty',
        recoveryCode: 'incorrect-recovery-code', // üî∏ –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      })
      .expect(HttpStatus.BAD_REQUEST); // üî∏ –û–∂–∏–¥–∞–µ–º 400, —Ç.–∫. recoveryCode –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π

    // üîª –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è
    const found_user_2: UserDbType | null = await usersRepository.getByEmail(
      user.email,
    );

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    expect(found_user_2).not.toBeNull();

    if (!found_user_2) {
      throw new Error(
        'Test ‚Ññ5: AuthController - newPassword() (POST: /auth/new-password): User not found',
      );
    }

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (hash –æ—Å—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ)
    expect(found_user_1.passwordHash).toBe(found_user_2.passwordHash);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resNewPassword.body,
        resNewPassword.statusCode,
        'Test ‚Ññ5: AuthController - newPassword() (POST: /auth/new-password)',
      );
    }
  });
});
