import request, { Response } from 'supertest';
import { UsersTestManager } from '../managers/users.test-manager';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials } from '../types';
import { Server } from 'http';
import { TestUtils } from '../helpers/test.utils';
import { HttpStatus } from '@nestjs/common';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';

describe('AuthController - login() (POST: /auth/login)', () => {
  let appTestManager: AppTestManager;
  let usersTestManager: UsersTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should be authorized if the user has sent the correct data (loginOrEmail and password)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º email
    const [user]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—Ö–æ–¥
    const resLogin: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/login`)
      .send({
        loginOrEmail: user.login,
        password: 'qwerty',
      })
      .expect(HttpStatus.OK);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏—à—ë–ª accessToken
    expect(resLogin.body).toEqual({
      accessToken: expect.any(String),
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Set-Cookie —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è refreshToken
    expect(resLogin.headers['set-cookie']).toBeDefined();
    expect(resLogin.headers['set-cookie'][0]).toMatch(/refreshToken=.*;/);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resLogin.body,
        resLogin.statusCode,
        'Test ‚Ññ1: AuthController - login() (POST: /auth/login)',
      );
    }
  });

  it('should not log in if the user has sent more than 5 requests from one IP to "/login" in the last 10 seconds.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üî∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 5 –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Ö–æ–¥ ‚Äî –≤—Å–µ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ —É—Å–ø–µ—à–Ω–æ
    for (let i = 0; i < 5; i++) {
      await request(server)
        .post(`/${GLOBAL_PREFIX}/auth/login`)
        .send({
          loginOrEmail: createdUser.login,
          password: 'qwerty',
        })
        .expect(HttpStatus.OK);
    }

    // üî∏ 6-–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
    const resLogin: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/login`)
      .send({
        loginOrEmail: createdUser.login,
        password: 'qwerty',
      })
      .expect(HttpStatus.TOO_MANY_REQUESTS);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resLogin.body,
        resLogin.statusCode,
        'Test ‚Ññ2: AuthController - login() (POST: /auth/login)',
      );
    }
  });

  it('should not log in if the user has sent invalid data (loginOrEmail: "undefined", password: "undefined")', async () => {
    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /auth/login —Å –ø—É—Å—Ç—ã–º —Ç–µ–ª–æ–º
    const resLogin: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/login`)
      .send({})
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—è–º loginOrEmail –∏ password
    expect(resLogin.body).toEqual({
      errorsMessages: [
        {
          field: 'password',
          message: 'password must be a string; Received value: undefined',
        },
        {
          field: 'loginOrEmail',
          message: 'loginOrEmail must be a string; Received value: undefined',
        },
      ],
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ cookie –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    expect(resLogin.headers['set-cookie']).toBeUndefined();

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resLogin.body,
        resLogin.statusCode,
        'Test ‚Ññ3: AuthController - login() (POST: /auth/login)',
      );
    }
  });

  it('should not log in if the user has sent invalid data (loginOrEmail: type number, password: type number)', async () => {
    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /auth/login —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ loginOrEmail –∏ password
    const resLogin: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/login`)
      .send({
        loginOrEmail: 123,
        password: 123,
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—è–º loginOrEmail –∏ password
    expect(resLogin.body).toEqual({
      errorsMessages: [
        {
          field: 'password',
          message: 'password must be a string; Received value: 123',
        },
        {
          field: 'loginOrEmail',
          message: 'loginOrEmail must be a string; Received value: 123',
        },
      ],
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ cookie –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    expect(resLogin.headers['set-cookie']).toBeUndefined();

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resLogin.body,
        resLogin.statusCode,
        'Test ‚Ññ4: AuthController - login() (POST: /auth/login)',
      );
    }
  });

  it('should not log in if the user has sent invalid data (loginOrEmail: empty line, password: empty line)', async () => {
    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /auth/login —Å –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –≤ –ø–æ–ª—è—Ö loginOrEmail –∏ password
    const resLogin: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/login`)
      .send({
        loginOrEmail: '   ',
        password: '   ',
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –¥–ª–∏–Ω–µ —Å—Ç—Ä–æ–∫ –≤ loginOrEmail –∏ password
    expect(resLogin.body).toEqual({
      errorsMessages: [
        {
          field: 'password',
          message: 'password must be longer than or equal to 6 characters; Received value: ',
        },
        {
          field: 'loginOrEmail',
          message: 'loginOrEmail must be longer than or equal to 3 characters; Received value: ',
        },
      ],
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ cookie –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    expect(resLogin.headers['set-cookie']).toBeUndefined();

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resLogin.body,
        resLogin.statusCode,
        'Test ‚Ññ5: AuthController - login() (POST: /auth/login)',
      );
    }
  });

  it('should not log in if the user has sent invalid data (loginOrEmail: exceeds max length, password: exceeds max length)', async () => {
    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /auth/login —Å loginOrEmail (101 —Å–∏–º–≤–æ–ª) –∏ password (21 —Å–∏–º–≤–æ–ª), –ø—Ä–µ–≤—ã—à–∞—é—â–∏–º–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    const loginOrEmail: string = TestUtils.generateRandomString(101);
    const password: string = TestUtils.generateRandomString(21);

    const resLogin: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/login`)
      .send({
        loginOrEmail,
        password,
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ loginOrEmail –∏ password
    expect(resLogin.body).toEqual({
      errorsMessages: [
        {
          field: 'password',
          message: `password must be shorter than or equal to 20 characters; Received value: ${password}`,
        },
        {
          field: 'loginOrEmail',
          message: `loginOrEmail must be shorter than or equal to 100 characters; Received value: ${loginOrEmail}`,
        },
      ],
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ cookie –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    expect(resLogin.headers['set-cookie']).toBeUndefined();

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resLogin.body,
        resLogin.statusCode,
        'Test ‚Ññ6: AuthController - login() (POST: /auth/login)',
      );
    }
  });

  it('should not log in if the user has sent incorrect data (loginOrEmail: exceeds the minimum length)', async () => {
    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /auth/login —Å loginOrEmail (2 —Å–∏–º–≤–æ–ª–∞) –∏ password (5 —Å–∏–º–≤–æ–ª–æ–≤), –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–º–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
    const loginOrEmail: string = TestUtils.generateRandomString(2);
    const password: string = TestUtils.generateRandomString(5);

    const resLogin: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/login`)
      .send({
        loginOrEmail,
        password,
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ loginOrEmail –∏ password
    expect(resLogin.body).toEqual({
      errorsMessages: [
        {
          field: 'password',
          message: `password must be longer than or equal to 6 characters; Received value: ${password}`,
        },
        {
          field: 'loginOrEmail',
          message: `loginOrEmail must be longer than or equal to 3 characters; Received value: ${loginOrEmail}`,
        },
      ],
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ cookie –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    expect(resLogin.headers['set-cookie']).toBeUndefined();

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resLogin.body,
        resLogin.statusCode,
        'Test ‚Ññ7: AuthController - login() (POST: /auth/login)',
      );
    }
  });

  it('should not be authorized if the user has sent incorrect data (loginOrEmail: non-existent login)', async () => {
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É, –∏–º–∏—Ç–∏—Ä—É—é—â—É—é –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π loginOrEmail
    const loginOrEmail: string = TestUtils.generateRandomString(10);

    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º email (–¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    await usersTestManager.createUser(1);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º loginOrEmail –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    const resLogin: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/login`)
      .send({
        loginOrEmail,
        password: 'qwerty',
      })
      .expect(HttpStatus.UNAUTHORIZED);

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ refreshToken –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Set-Cookie
    expect(resLogin.headers['set-cookie']).toBeUndefined();

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resLogin.body,
        resLogin.statusCode,
        'Test ‚Ññ8: AuthController - login() (POST: /auth)',
      );
    }
  });

  it('should not be authorized if the user has sent incorrect data (password: invalid password).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º email
    const [user]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—Ö–æ–¥ (–ø—Ä–∏ —ç—Ç–æ–º loginOrEmail ‚Äî –≤–∞–ª–∏–¥–Ω—ã–π email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    const resLogin: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/login`)
      .send({
        loginOrEmail: user.email,
        password: 'incorrect_password',
      })
      .expect(HttpStatus.UNAUTHORIZED);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ refreshToken –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö Set-Cookie
    expect(resLogin.headers['set-cookie']).toBeUndefined();

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resLogin.body,
        resLogin.statusCode,
        'Test ‚Ññ9: AuthController - login() (POST: /auth)',
      );
    }
  });
});
