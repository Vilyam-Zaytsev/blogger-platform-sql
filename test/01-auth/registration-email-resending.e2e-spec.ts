import request, { Response } from 'supertest';
import { TestDtoFactory } from '../helpers/test.dto-factory';
import { UsersTestManager } from '../managers/users.test-manager';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials } from '../types';
import { Server } from 'http';
import { EmailTemplate } from '../../src/modules/notifications/templates/types';
import { TestUtils } from '../helpers/test.utils';
import { HttpStatus } from '@nestjs/common';
import { EmailService } from '../../src/modules/notifications/services/email.service';
import { UserInputDto } from '../../src/modules/user-accounts/users/api/input-dto/user.input-dto';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';

describe('AuthController - registrationEmailResending() (POST: /auth/registration-email-resending)', () => {
  let appTestManager: AppTestManager;
  let usersTestManager: UsersTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;
  let sendEmailMock: jest.Mock;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);

    sendEmailMock = jest
      .spyOn(EmailService.prototype, 'sendEmail')
      .mockResolvedValue() as jest.Mock<Promise<void>, [string, EmailTemplate]>;
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);

    sendEmailMock.mockClear();

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should send the verification code again if the user has sent the correct data.', async () => {
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–∏–Ω DTO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const [dto]: UserInputDto[] = TestDtoFactory.generateUserInputDto(1);

    // üîª –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —ç—Ç–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω 1 email)
    await usersTestManager.registration(dto);

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å—å–º–∞ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const resRegistrationEmailResending: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-email-resending`)
      .send({
        email: dto.email, // –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ—Ç –∂–µ email, —á—Ç–æ –±—ã–ª –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      })
      .expect(HttpStatus.NO_CONTENT); // üî∏ –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–µ–∑ —Ç–µ–ª–∞ (204)

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Å—å–º–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
    expect(sendEmailMock).toHaveBeenCalled();
    expect(sendEmailMock).toHaveBeenCalledTimes(2); // 1 –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ + 1 –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistrationEmailResending.body,
        resRegistrationEmailResending.statusCode,
        'Test ‚Ññ1: AuthController - registrationEmailResending() (POST: /auth/registration-email-resending)',
      );
    }
  });

  it('should not resend the verification code if the user has sent incorrect data - an empty object is passed', async () => {
    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å—å–º–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    const resRegistrationEmailResending: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-email-resending`)
      .send({})
      .expect(HttpStatus.BAD_REQUEST); // üî∏ –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É 400 –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—à–∏–±–∫–∏ ‚Äî –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—é email
    expect(resRegistrationEmailResending.body).toEqual({
      errorsMessages: [
        {
          field: 'email',
          message:
            'email must match /^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$/ regular expression; Received value: undefined',
        },
      ],
    });

    // üî∏ –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∏—Å—å–º–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–æ–±—â–µ
    expect(sendEmailMock).toHaveBeenCalledTimes(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistrationEmailResending.body,
        resRegistrationEmailResending.statusCode,
        'Test ‚Ññ3: AuthController - registrationEmailResending() (POST: /auth/registration-email-resending)',
      );
    }
  });

  it('should not resend the verification code if the user has sent incorrect data - email: empty line', async () => {
    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å—å–º–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Å—Ç—Ä–æ–∫—É –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤–º–µ—Å—Ç–æ email
    const resRegistrationEmailResending: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-email-resending`)
      .send({
        email: '   ', // —Å—Ç—Ä–æ–∫–∞ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ ‚Äî –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π email
      })
      .expect(HttpStatus.BAD_REQUEST); // üî∏ –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É 400 –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—é email
    expect(resRegistrationEmailResending.body).toEqual({
      errorsMessages: [
        {
          field: 'email',
          message:
            'email must match /^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$/ regular expression; Received value: ',
        },
      ],
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    expect(sendEmailMock).toHaveBeenCalledTimes(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistrationEmailResending.body,
        resRegistrationEmailResending.statusCode,
        'Test ‚Ññ4: AuthController - registrationEmailResending() (POST: /auth/registration-email-resending)',
      );
    }
  });

  it('should not resend the verification code if the user has sent incorrect data - email: incorrect', async () => {
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É, –Ω–µ —è–≤–ª—è—é—â—É—é—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º email
    const email: string = TestUtils.generateRandomString(10); // –Ω–∞–ø—Ä–∏–º–µ—Ä: "xks92ndkeq"

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å—å–º–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º email
    const resRegistrationEmailResending: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-email-resending`)
      .send({
        email, // –ø–µ—Ä–µ–¥–∞—ë–º —è–≤–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–±–µ–∑ "@" –∏ –¥–æ–º–µ–Ω–∞)
      })
      .expect(HttpStatus.BAD_REQUEST); // üî∏ –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É 400

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
    expect(resRegistrationEmailResending.body).toEqual({
      errorsMessages: [
        {
          field: 'email',
          message: `email must match /^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$/ regular expression; Received value: ${email}`,
        },
      ],
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    expect(sendEmailMock).toHaveBeenCalledTimes(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistrationEmailResending.body,
        resRegistrationEmailResending.statusCode,
        'Test ‚Ññ5: AuthController - registrationEmailResending() (POST: /auth/registration-email-resending)',
      );
    }
  });

  it('should not resend the verification code if the user has sent incorrect data - email: type number', async () => {
    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å, –≥–¥–µ email –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–∫ —á–∏—Å–ª–æ (—Ç–∏–ø number, –∞ –Ω–µ string)
    const resRegistrationEmailResending: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-email-resending`)
      .send({
        email: 123, // üî∏ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø ‚Äî –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, –∞ –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∏—Å–ª–æ
      })
      .expect(HttpStatus.BAD_REQUEST); // üî∏ –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É 400

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ ‚Äî –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–π—Ç–∏ –æ—à–∏–±–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    expect(resRegistrationEmailResending.body).toEqual({
      errorsMessages: [
        {
          field: 'email',
          message: `email must match /^[\\w.-]+@([\\w-]+\\.)+[\\w-]{2,4}$/ regular expression; Received value: 123`,
        },
      ],
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∏—Å—å–º–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    expect(sendEmailMock).toHaveBeenCalledTimes(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistrationEmailResending.body,
        resRegistrationEmailResending.statusCode,
        'Test ‚Ññ6: AuthController - registrationEmailResending() (POST: /auth/registration-email-resending)',
      );
    }
  });

  it('should not resend the verification code if the user has already confirmed the account', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º email
    const [user]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    const resRegistrationEmailResending: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/auth/registration-email-resending`)
      .send({
        email: user.email,
      })
      .expect(HttpStatus.BAD_REQUEST); // üî∏ –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É 400

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
    expect(resRegistrationEmailResending.body).toEqual({
      errorsMessages: [
        {
          message: `The email address (${user.email}) has already been verified`,
          field: 'email',
        },
      ],
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∏—Å—å–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    expect(sendEmailMock).toHaveBeenCalledTimes(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resRegistrationEmailResending.body,
        resRegistrationEmailResending.statusCode,
        'Test ‚Ññ7: AuthController - registrationEmailResending() (POST: /auth/registration-email-resending)',
      );
    }
  });
});
