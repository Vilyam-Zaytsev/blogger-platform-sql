import request, { Response } from 'supertest';
import { TestUtils } from '../helpers/test.utils';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials } from '../types';
import { Server } from 'http';
import { BlogsTestManager } from '../managers/blogs.test-manager';
import { HttpStatus } from '@nestjs/common';
import { PostViewDto } from '../../src/modules/bloggers-platform/posts/api/view-dto/post.view-dto';
import { PostsTestManager } from '../managers/posts.test-manager';
import { GetBlogsQueryParams } from '../../src/modules/bloggers-platform/blogs/api/input-dto/get-blogs-query-params.input-dto';
import { Filter } from '../helpers/filter';
import { BlogViewDto } from '../../src/modules/bloggers-platform/blogs/api/view-dto/blog.view-dto';

describe('PostsController - getAllPosts() (GET: /posts)', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let postsTestManager: PostsTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
    postsTestManager = new PostsTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['migrations']);
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should return an empty array.', async () => {
    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ (–ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ)
    const resGetPosts: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/posts`)
      .expect(HttpStatus.OK);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    expect(resGetPosts.body).toEqual({
      pagesCount: 0,
      page: 1,
      pageSize: 10,
      totalCount: 0,
      items: [],
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetPosts.body,
        resGetPosts.statusCode,
        'Test ‚Ññ1: PostsController - getAllPosts() (GET: /posts)',
      );
    }
  });

  it('should return an array with a single post.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥ –∏ –æ–¥–∏–Ω –ø–æ—Å—Ç
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    const posts: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
    const resGetPosts: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/posts`)
      .expect(HttpStatus.OK);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â—ë–Ω –º–∞—Å—Å–∏–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    expect(resGetPosts.body).toEqual({
      pagesCount: 1,
      page: 1,
      pageSize: 10,
      totalCount: 1,
      items: posts,
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetPosts.body,
        resGetPosts.statusCode,
        'Test ‚Ññ2: PostsController - getAllPosts() (GET: /posts)',
      );
    }
  });

  it('should return an array with a three posts.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥ –∏ —Ç—Ä–∏ –ø–æ—Å—Ç–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –Ω–µ–º—É
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    const posts: PostViewDto[] = await postsTestManager.createPost(3, createdBlog.id);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
    const resGetPosts: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/posts`)
      .expect(HttpStatus.OK);

    // üîª –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
    const query: GetBlogsQueryParams = new GetBlogsQueryParams();
    const filteredCreatedPosts: PostViewDto[] = new Filter<PostViewDto>(posts)
      .sort({ [query.sortBy]: query.sortDirection })
      .getResult();

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–µ–Ω–Ω–æ 3 –ø–æ—Å—Ç–∞ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    expect(resGetPosts.body.items).toEqual(filteredCreatedPosts);
    expect(resGetPosts.body.items.length).toEqual(3);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetPosts.body,
        resGetPosts.statusCode,
        'Test ‚Ññ3: PostsController - getAllPosts() (GET: /posts)',
      );
    }
  });

  it('should return post found by id.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥ –∏ –ø–æ—Å—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –Ω–∏–º
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ id
    const resGetPost: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/posts/${createdPost.id}`)
      .expect(HttpStatus.OK);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –ø–æ—Å—Ç—É
    expect(resGetPost.body).toEqual(createdPost);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetPost.body,
        resGetPost.statusCode,
        'Test ‚Ññ4: PostsController - getPostById() (GET: /posts/:postId)',
      );
    }
  });

  it('should return error 404 not found.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥ –∏ –æ–¥–∏–Ω –ø–æ—Å—Ç
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);

    const incorrectId: string = '1000000';

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º id –ø–æ—Å—Ç–∞ –∏ –æ–∂–∏–¥–∞–µ–º 404
    const resGetPost_1: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/posts/${incorrectId}`)
      .expect(HttpStatus.NOT_FOUND);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º id –ø–æ—Å—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    const resGetPost_2: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/posts/${createdPost.id}`)
      .expect(HttpStatus.OK);

    // üîª –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –ø–æ—Å—Ç
    expect(resGetPost_2.body).toEqual(createdPost);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetPost_1.body,
        resGetPost_1.statusCode,
        'Test ‚Ññ5: PostsController - getPostById() (GET: /posts/:postId)',
      );
    }
  });
});
