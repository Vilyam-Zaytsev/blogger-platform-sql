import request, { Response } from 'supertest';
import { TestUtils } from '../helpers/test.utils';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials } from '../types';
import { Server } from 'http';
import { HttpStatus } from '@nestjs/common';
import { UsersTestManager } from '../managers/users.test-manager';
import { UserAccountsConfig } from '../../src/modules/user-accounts/config/user-accounts.config';
import { JwtService } from '@nestjs/jwt';
import { REFRESH_TOKEN_STRATEGY_INJECT_TOKEN } from '../../src/modules/user-accounts/auth/constants/auth-tokens.inject-constants';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';
import { parseUserAgent } from '../../src/core/utils/user-agent.parser';
import { CoreConfig } from '../../src/core/core.config';
import { ConfigService } from '@nestjs/config';

describe('SessionsController - deleteSession() (DELETE: /security/devices/{deviceId})', () => {
  let appTestManager: AppTestManager;
  let usersTestManager: UsersTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init((moduleBuilder) =>
      moduleBuilder
        .overrideProvider(REFRESH_TOKEN_STRATEGY_INJECT_TOKEN)
        .useFactory({
          factory: (userAccountsConfig: UserAccountsConfig) => {
            return new JwtService({
              secret: userAccountsConfig.refreshTokenSecret,
              signOptions: { expiresIn: '20s' },
            });
          },
          inject: [UserAccountsConfig],
        })

        .overrideProvider(CoreConfig)
        .useFactory({
          factory: (configService: ConfigService<any, true>) => {
            const coreConfig = new CoreConfig(configService);
            coreConfig.throttleLimit = 10000;
            coreConfig.throttleTtl = 15;

            return coreConfig;
          },
          inject: [ConfigService],
        }),
    );

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();

    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it.skip('should update the lastActiveDate only for the session where the refresh token was used (other sessions remain unchanged)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(2);

    // üîª –°–ø–∏—Å–æ–∫ User-Agent –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ö–æ–¥–∞ —Å —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const shortUserAgents = [
      'Chrome/114.0 (Windows NT 10.0; Win64; x64)',
      'Safari/604.1 (iPhone; CPU iPhone OS 16_0 like Mac OS X)',
      'Firefox/102.0 (X11; Ubuntu; Linux x86_64)',
      'Chrome/114.0 (Linux; Android 13; SM-S901B)',
    ];

    // üîª –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const resLogins: Record<string, Response[]> = {
      resLogins_user1: [],
      resLogins_user2: [],
    };

    // üîª –õ–æ–≥–∏–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ—Ö 4 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    for (let i = 0; i < createdUsers.length; i++) {
      for (let j = 0; j < shortUserAgents.length; j++) {
        const res: Response = await request(server)
          .post(`/${GLOBAL_PREFIX}/auth/login`)
          .set('User-Agent', parseUserAgent(shortUserAgents[j]))
          .send({
            loginOrEmail: createdUsers[i].login,
            password: 'qwerty',
          })
          .expect(HttpStatus.OK);

        // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏–Ω –≤–µ—Ä–Ω—É–ª accessToken
        expect(res.body).toEqual({
          accessToken: expect.any(String),
        });

        // üî∏ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        resLogins[`resLogins_user${i + 1}`].push(res);

        // üî∏ –î–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã lastActiveDate –æ—Ç–ª–∏—á–∞–ª–æ—Å—å
        await TestUtils.delay(1000);
      }
    }

    // üîª 1. –¢–µ—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const refreshToken_user1_session1: string = resLogins.resLogins_user1[0].headers[
      'set-cookie'
    ][0]
      .split(';')[0]
      .split('=')[1];

    // üîª –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const resGetSessions_user1: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/security/devices`)
      .set('Cookie', [`refreshToken=${refreshToken_user1_session1}`])
      .expect(HttpStatus.OK);

    // üîª –ü–æ–æ—á–µ—Ä—ë–¥–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º refreshToken –≤ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ
    // –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ lastActiveDate —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    for (let i = 0; i < resLogins.resLogins_user1.length; i++) {
      await TestUtils.delay(1000);

      const refreshToken: string = resLogins.resLogins_user1[i].headers['set-cookie'][0]
        .split(';')[0]
        .split('=')[1];

      // üîª –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
      const resRefreshToken: Response = await request(server)
        .post(`/${GLOBAL_PREFIX}/auth/refresh-token`)
        .set('Cookie', [`refreshToken=${refreshToken}`])
        .expect(HttpStatus.OK);

      // üîª –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
      const resGetSessions: Response = await request(server)
        .get(`/${GLOBAL_PREFIX}/security/devices`)
        .set('Cookie', [
          `refreshToken=${resRefreshToken.headers['set-cookie'][0].split(';')[0].split('=')[1]}`,
        ])
        .expect(HttpStatus.OK);

      //TODO: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç(–ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ)

      // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ lastActiveDate –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ —É —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
      expect(resGetSessions_user1.body[i].lastActiveDate).not.toEqual(
        resGetSessions.body[i].lastActiveDate,
      );
      // üî∏ –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      for (let j = i + 1; j < resGetSessions_user1.body.length; j++) {
        expect(resGetSessions.body[j].lastActiveDate).toEqual(
          resGetSessions_user1.body[j].lastActiveDate,
        );
      }

      // üîª 2. –¢–µ—Å—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const refreshToken_user2_session1: string = resLogins.resLogins_user2[0].headers[
        'set-cookie'
      ][0]
        .split(';')[0]
        .split('=')[1];

      // üîª –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const resGetDevices_user2: Response = await request(server)
        .get(`/${GLOBAL_PREFIX}/security/devices`)
        .set('Cookie', [`refreshToken=${refreshToken_user2_session1}`])
        .expect(HttpStatus.OK);

      // üîª –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ—é —Å–µ—Å—Å–∏—é
      for (let i = 0; i < resLogins.resLogins_user2.length; i++) {
        await TestUtils.delay(1000);

        const refreshToken: string = resLogins.resLogins_user2[i].headers['set-cookie'][0]
          .split(';')[0]
          .split('=')[1];

        const resRefreshToken: Response = await request(server)
          .post(`/${GLOBAL_PREFIX}/auth/refresh-token`)
          .set('Cookie', [`refreshToken=${refreshToken}`])
          .expect(HttpStatus.OK);

        const resGetSessions: Response = await request(server)
          .get(`/${GLOBAL_PREFIX}/security/devices`)
          .set('Cookie', [
            `refreshToken=${resRefreshToken.headers['set-cookie'][0].split(';')[0].split('=')[1]}`,
          ])
          .expect(HttpStatus.OK);

        // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
        expect(resGetSessions.body[i].lastActiveDate).not.toEqual(
          resGetDevices_user2.body[i].lastActiveDate,
        );

        // üî∏ –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        for (let j = i + 1; j < resGetDevices_user2.body.length; j++) {
          expect(resGetSessions.body[j].lastActiveDate).toEqual(
            resGetDevices_user2.body[j].lastActiveDate,
          );
        }
      }
    }
  }, 50000);
});
