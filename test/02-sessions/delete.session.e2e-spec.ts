import request, { Response } from 'supertest';
import { TestUtils } from '../helpers/test.utils';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials, TestResultLogin } from '../types';
import { Server } from 'http';
import { HttpStatus } from '@nestjs/common';
import { UsersTestManager } from '../managers/users.test-manager';
import { UserAccountsConfig } from '../../src/modules/user-accounts/config/user-accounts.config';
import { JwtService } from '@nestjs/jwt';
import { REFRESH_TOKEN_STRATEGY_INJECT_TOKEN } from '../../src/modules/user-accounts/auth/constants/auth-tokens.inject-constants';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';
import { CryptoService } from '../../src/modules/user-accounts/users/application/services/crypto.service';

describe('SessionsController - deleteSession() (DELETE: /security/devices/{deviceId})', () => {
  let appTestManager: AppTestManager;
  let usersTestManager: UsersTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let cryptoService: CryptoService;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init((moduleBuilder) =>
      moduleBuilder.overrideProvider(REFRESH_TOKEN_STRATEGY_INJECT_TOKEN).useFactory({
        factory: (userAccountsConfig: UserAccountsConfig) => {
          return new JwtService({
            secret: userAccountsConfig.refreshTokenSecret,
            signOptions: { expiresIn: '2s' },
          });
        },
        inject: [UserAccountsConfig],
      }),
    );

    cryptoService = appTestManager.app.get(CryptoService);
    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should delete a specific session by ID if the user is logged in.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–∏–Ω–∞—Ö –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    const resultLogins: TestResultLogin[] = [];

    // üîª User-Agent'—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ö–æ–¥–∞ —Å —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const shortUserAgents = [
      'Chrome/114.0 (Windows NT 10.0; Win64; x64)',
      'Safari/604.1 (iPhone; CPU iPhone OS 16_0 like Mac OS X)',
      'Firefox/102.0 (X11; Ubuntu; Linux x86_64)',
      'Chrome/114.0 (Linux; Android 13; SM-S901B)',
    ];

    // üîª –õ–æ–≥–∏–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 4 —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    for (let i = 0; i < 4; i++) {
      const res: Response = await request(server)
        .post(`/${GLOBAL_PREFIX}/auth/login`)
        .set('User-Agent', shortUserAgents[i])
        .send({
          loginOrEmail: createdUser.login,
          password: 'qwerty',
        })
        .expect(HttpStatus.OK);

      // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ accessToken
      expect(res.body).toEqual(
        expect.objectContaining({
          accessToken: expect.any(String),
        }),
      );

      // üî∏ –°–æ—Ö—Ä–∞–Ω—è–µ–º accessToken –∏ refreshToken
      const authTokens = {
        accessToken: res.body.accessToken,
        refreshToken: res.headers['set-cookie'][0].split(';')[0].split('=')[1],
      };

      resultLogins.push({
        loginOrEmail: createdUser.login,
        authTokens,
      });
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const resGetSessions_1: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/security/devices`)
      .set('Cookie', [`refreshToken=${resultLogins[0].authTokens.refreshToken}`])
      .expect(HttpStatus.OK);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 4 –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    expect(resGetSessions_1.body.length).toEqual(4);

    // üîª –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const deviceId_1: string = resGetSessions_1.body[0].deviceId;

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ –µ—ë ID
    const resDeleteSession: Response = await request(server)
      .delete(`/${GLOBAL_PREFIX}/security/devices/${deviceId_1}`)
      .set('Cookie', [`refreshToken=${resultLogins[0].authTokens.refreshToken}`])
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ –µ—ë —Ç–æ–∫–µ–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
    await request(server)
      .get(`/${GLOBAL_PREFIX}/security/devices`)
      .set('Cookie', [`refreshToken=${resultLogins[0].authTokens.refreshToken}`])
      .expect(HttpStatus.UNAUTHORIZED);

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è refreshToken –¥—Ä—É–≥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    const resGetSessions_2: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/security/devices`)
      .set('Cookie', [`refreshToken=${resultLogins[1].authTokens.refreshToken}`])
      .expect(HttpStatus.OK);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å 3 –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    expect(resGetSessions_2.body.length).toEqual(3);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeleteSession.body,
        resDeleteSession.statusCode,
        'Test ‚Ññ1: SessionsController - deleteSession() (DELETE: /security/devices/{deviceId})',
      );
    }
  });

  it('should not delete a specific session if the user is not logged in.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–∏–Ω–∞—Ö –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    const resultLogins: TestResultLogin[] = [];

    // üîª User-Agent'—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ö–æ–¥–∞ —Å —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const shortUserAgents = [
      'Chrome/114.0 (Windows NT 10.0; Win64; x64)',
      'Safari/604.1 (iPhone; CPU iPhone OS 16_0 like Mac OS X)',
      'Firefox/102.0 (X11; Ubuntu; Linux x86_64)',
      'Chrome/114.0 (Linux; Android 13; SM-S901B)',
    ];

    // üîª –õ–æ–≥–∏–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 4 —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    for (let i = 0; i < 4; i++) {
      const res: Response = await request(server)
        .post(`/${GLOBAL_PREFIX}/auth/login`)
        .set('User-Agent', shortUserAgents[i])
        .send({
          loginOrEmail: createdUser.login,
          password: 'qwerty',
        })
        .expect(HttpStatus.OK);

      // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ accessToken
      expect(res.body).toEqual(
        expect.objectContaining({
          accessToken: expect.any(String),
        }),
      );

      // üî∏ –°–æ—Ö—Ä–∞–Ω—è–µ–º accessToken –∏ refreshToken
      const authTokens = {
        accessToken: res.body.accessToken,
        refreshToken: res.headers['set-cookie'][0].split(';')[0].split('=')[1],
      };

      resultLogins.push({
        loginOrEmail: createdUser.login,
        authTokens,
      });
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const resGetSessions_1: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/security/devices`)
      .set('Cookie', [`refreshToken=${resultLogins[0].authTokens.refreshToken}`])
      .expect(HttpStatus.OK);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 4 –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    expect(resGetSessions_1.body.length).toEqual(4);

    // üîª –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏
    const deviceId_1: string = resGetSessions_1.body[0].deviceId;

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚Äî –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É 401
    await request(server)
      .delete(`/${GLOBAL_PREFIX}/security/devices/${deviceId_1}`)
      .expect(HttpStatus.UNAUTHORIZED);

    // üîª –î–µ–ª–∞–µ–º –ø–∞—É–∑—É, —á—Ç–æ–±—ã refreshToken –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É—Å—Ç–∞—Ä–µ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    await TestUtils.delay(3000);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è refreshToken, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º ‚Äî —Å–Ω–æ–≤–∞ –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É 401
    const resDeleteSession: Response = await request(server)
      .delete(`/${GLOBAL_PREFIX}/security/devices/${deviceId_1}`)
      .set('Cookie', [`refreshToken=${resultLogins[0].authTokens.refreshToken}`])
      .expect(HttpStatus.UNAUTHORIZED);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeleteSession.body,
        resDeleteSession.statusCode,
        'Test ‚Ññ2: SessionsController - deleteSession() (DELETE: /security/devices/{deviceId})',
      );
    }
  });

  it('should not delete a specific session if the user is not the owner of this device.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [createdUser_1, createdUser_2]: UserViewDto[] = await usersTestManager.createUser(2);

    // üîª –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–∏–Ω–∞—Ö
    const resultLogins: TestResultLogin[] = [];

    // üîª User-Agent'—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ö–æ–¥–∞ —Å —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const shortUserAgents = [
      'Chrome/114.0 (Windows NT 10.0; Win64; x64)', // –¥–ª—è user1
      'Safari/604.1 (iPhone; CPU iPhone OS 16_0 like Mac OS X)', // –¥–ª—è user2
    ];

    // üîª –õ–æ–≥–∏–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–≤–æ—ë–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    for (let i = 0; i < 2; i++) {
      // üî∏ –ß—ë—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã ‚Äî user1, –Ω–µ—á—ë—Ç–Ω—ã–µ ‚Äî user2
      const login: string = (i + 1) % 2 === 0 ? createdUser_2.login : createdUser_1.login;

      const res: Response = await request(server)
        .post(`/${GLOBAL_PREFIX}/auth/login`)
        .set('User-Agent', shortUserAgents[i])
        .send({
          loginOrEmail: login,
          password: 'qwerty',
        })
        .expect(HttpStatus.OK);

      // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ accessToken
      expect(res.body).toEqual(
        expect.objectContaining({
          accessToken: expect.any(String),
        }),
      );

      // üî∏ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const authTokens = {
        accessToken: res.body.accessToken,
        refreshToken: res.headers['set-cookie'][0].split(';')[0].split('=')[1],
      };

      resultLogins.push({
        loginOrEmail: login,
        authTokens,
      });
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1
    const resGetSessions_user1: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/security/devices`)
      .set('Cookie', [`refreshToken=${resultLogins[0].authTokens.refreshToken}`])
      .expect(HttpStatus.OK);

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2
    const resGetSessions_user2: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/security/devices`)
      .set('Cookie', [`refreshToken=${resultLogins[1].authTokens.refreshToken}`])
      .expect(HttpStatus.OK);

    // üîª –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–µ—Å—Å–∏–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deviceId_user1: string = resGetSessions_user1.body[0].deviceId;
    const deviceId_user2: string = resGetSessions_user2.body[0].deviceId;

    // üîª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2 ‚Äî –æ–∂–∏–¥–∞–µ–º 403
    const resDeleteSession: Response = await request(server)
      .delete(`/${GLOBAL_PREFIX}/security/devices/${deviceId_user2}`)
      .set('Cookie', [`refreshToken=${resultLogins[0].authTokens.refreshToken}`])
      .expect(HttpStatus.FORBIDDEN);

    // üîª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1 ‚Äî –æ–∂–∏–¥–∞–µ–º 403
    await request(server)
      .delete(`/${GLOBAL_PREFIX}/security/devices/${deviceId_user1}`)
      .set('Cookie', [`refreshToken=${resultLogins[1].authTokens.refreshToken}`])
      .expect(HttpStatus.FORBIDDEN);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeleteSession.body,
        resDeleteSession.statusCode,
        'Test ‚Ññ3: SessionsController - deleteSession() (DELETE: /security/devices/{deviceId})',
      );
    }
  });

  it('should not delete a specific session if no such session exists.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–∏–Ω–∞—Ö
    const resultLogins: TestResultLogin[] = [];

    // üîª User-Agent'—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ö–æ–¥–∞ —Å —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const shortUserAgents = [
      'Chrome/114.0 (Windows NT 10.0; Win64; x64)',
      'Safari/604.1 (iPhone; CPU iPhone OS 16_0 like Mac OS X)',
      'Firefox/102.0 (X11; Ubuntu; Linux x86_64)',
      'Chrome/114.0 (Linux; Android 13; SM-S901B)',
    ];

    // üîª –õ–æ–≥–∏–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 4-—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    for (let i = 0; i < 4; i++) {
      const res: Response = await request(server)
        .post(`/${GLOBAL_PREFIX}/auth/login`)
        .set('User-Agent', shortUserAgents[i])
        .send({
          loginOrEmail: createdUser.login,
          password: 'qwerty',
        })
        .expect(HttpStatus.OK);

      // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ accessToken
      expect(res.body).toEqual(
        expect.objectContaining({
          accessToken: expect.any(String),
        }),
      );

      // üî∏ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const authTokens = {
        accessToken: res.body.accessToken,
        refreshToken: res.headers['set-cookie'][0].split(';')[0].split('=')[1],
      };

      resultLogins.push({
        loginOrEmail: createdUser.login,
        authTokens,
      });
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    const resGetSessions_1: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/security/devices`)
      .set('Cookie', [`refreshToken=${resultLogins[0].authTokens.refreshToken}`])
      .expect(HttpStatus.OK);

    expect(resGetSessions_1.body.length).toEqual(4);

    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π UUID –¥–ª—è —Å–µ—Å—Å–∏–∏
    const incorrectId: string = cryptoService.generateUUID();

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É ID ‚Üí –æ–∂–∏–¥–∞–µ–º 404
    const resDeleteSession: Response = await request(server)
      .delete(`/${GLOBAL_PREFIX}/security/devices/${incorrectId}`)
      .set('Cookie', [`refreshToken=${resultLogins[0].authTokens.refreshToken}`])
      .expect(HttpStatus.NOT_FOUND);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    const resGetSessions_2: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/security/devices`)
      .set('Cookie', [`refreshToken=${resultLogins[0].authTokens.refreshToken}`])
      .expect(HttpStatus.OK);

    expect(resGetSessions_2.body.length).toEqual(4);
    expect(resGetSessions_2.body).toEqual(resGetSessions_1.body);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeleteSession.body,
        resDeleteSession.statusCode,
        'Test ‚Ññ4: SessionsController - deleteSession() (DELETE: /security/devices/{deviceId})',
      );
    }
  });
});
