import request, { Response } from 'supertest';
import { TestUtils } from '../helpers/test.utils';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials, TestResultLogin } from '../types';
import { Server } from 'http';
import { HttpStatus } from '@nestjs/common';
import { UsersTestManager } from '../managers/users.test-manager';
import { UserAccountsConfig } from '../../src/modules/user-accounts/config/user-accounts.config';
import { JwtService } from '@nestjs/jwt';
import { REFRESH_TOKEN_STRATEGY_INJECT_TOKEN } from '../../src/modules/user-accounts/auth/constants/auth-tokens.inject-constants';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';
import { parseUserAgent } from '../../src/core/utils/user-agent.parser';

describe('SessionsController - getAll() (GET: /security/devices)', () => {
  let appTestManager: AppTestManager;
  let usersTestManager: UsersTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init((moduleBuilder) =>
      moduleBuilder.overrideProvider(REFRESH_TOKEN_STRATEGY_INJECT_TOKEN).useFactory({
        factory: (userAccountsConfig: UserAccountsConfig) => {
          return new JwtService({
            secret: userAccountsConfig.refreshTokenSecret,
            signOptions: { expiresIn: '2s' },
          });
        },
        inject: [UserAccountsConfig],
      }),
    );

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['migrations']);

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should return an array with one session if the user is logged in on only one device.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    // üî∏ –ü–µ—Ä–µ–¥–∞—ë–º refreshToken –≤ Cookie –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const resGetSessions: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/security/devices`)
      .set('Cookie', [`refreshToken=${resultLogin.authTokens.refreshToken}`])
      .expect(HttpStatus.OK); // üî∏ –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —É—Å–ø–µ—à–Ω–æ (200 OK)

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ —Å–µ—Å—Å–∏—è
    expect(resGetSessions.body.length).toEqual(1);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π
    expect(resGetSessions.body).toEqual([
      {
        ip: expect.any(String), // üî∏ IP-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        title: expect.any(String), // üî∏ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (User-Agent)
        lastActiveDate: expect.stringMatching(
          /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/, // üî∏ –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
        ),
        deviceId: expect.any(String), // üî∏ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      },
    ]);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetSessions.body,
        resGetSessions.statusCode,
        'Test ‚Ññ1: SessionsController - getAll() (GET: /security/devices)',
      );
    }
  });

  it('should return an array with four sessions if the user is logged in on four different devices.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ª–æ–≥–∏–Ω–æ–≤ (—Ç–æ–∫–µ–Ω–æ–≤)
    const resultLogins: TestResultLogin[] = [];

    // üîª –ú–∞—Å—Å–∏–≤ User-Agent —Å—Ç—Ä–æ–∫ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const shortUserAgents = [
      'Chrome/114.0 (Windows NT 10.0; Win64; x64)',
      'Safari/604.1 (iPhone; CPU iPhone OS 16_0 like Mac OS X)',
      'Firefox/102.0 (X11; Ubuntu; Linux x86_64)',
      'Chrome/114.0 (Linux; Android 13; SM-S901B)',
    ];

    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –Ω–∞ 4 —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    for (let i = 0; i < 4; i++) {
      // üî∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ª–æ–≥–∏–Ω —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º User-Agent
      const res: Response = await request(server)
        .post(`/${GLOBAL_PREFIX}/auth/login`)
        .set('User-Agent', shortUserAgents[i])
        .send({
          loginOrEmail: createdUser.login,
          password: 'qwerty',
        })
        .expect(HttpStatus.OK); // üî∏ –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω

      // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å accessToken
      expect(res.body).toEqual(
        expect.objectContaining({
          accessToken: expect.any(String),
        }),
      );

      // üîª –î–æ—Å—Ç–∞—ë–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const body = res.body as { accessToken: string };
      const authTokens = {
        accessToken: body.accessToken,
        refreshToken: res.headers['set-cookie'][0].split(';')[0].split('=')[1], // üî∏ –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º refreshToken –∏–∑ cookie
      };

      // üîª –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º
      resultLogins.push({
        loginOrEmail: createdUser.login,
        authTokens,
      });
    }

    // üîª –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º refreshToken –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏
    const resGetSessions: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/security/devices`)
      .set('Cookie', [`refreshToken=${resultLogins[0].authTokens.refreshToken}`])
      .expect(HttpStatus.OK); // üî∏ –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ —Ä–æ–≤–Ω–æ 4 —Å–µ—Å—Å–∏–∏
    expect(resGetSessions.body.length).toEqual(4);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å–µ—Å—Å–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for (let i = 0; i < resGetSessions.body.length; i++) {
      expect(resGetSessions.body[i]).toEqual({
        ip: expect.any(String), // üî∏ IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
        title: parseUserAgent(shortUserAgents[i]), // üî∏ –û–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        lastActiveDate: expect.stringMatching(
          /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/, // üî∏ –î–∞—Ç–∞ –≤ ISO-—Ñ–æ—Ä–º–∞—Ç–µ
        ),
        deviceId: expect.any(String), // üî∏ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      });
    }

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetSessions.body,
        resGetSessions.statusCode,
        'Test ‚Ññ2: SessionsController - getAll() (GET: /security/devices)',
      );
    }
  });

  it('should not return an array with sessions if the user is not logged in.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º refreshToken
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);

    // üîª –ñ–¥—ë–º 3 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã refreshToken —É—Å–ø–µ–ª —Å—Ç–∞—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º (—Å–∏–º—É–ª—è—Ü–∏—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è)
    await TestUtils.delay(3000);

    // üîª –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º refreshToken
    const resGetSessions: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/security/devices`)
      .set('Cookie', [`refreshToken=${resultLogin.authTokens.refreshToken}`])
      .expect(HttpStatus.UNAUTHORIZED); // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É 401 ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetSessions.body,
        resGetSessions.statusCode,
        'Test ‚Ññ3: SessionsController - getAll() (GET: /security/devices)',
      );
    }
  });
});
