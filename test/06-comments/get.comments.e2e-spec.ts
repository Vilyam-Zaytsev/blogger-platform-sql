import request, { Response } from 'supertest';
import { TestUtils } from '../helpers/test.utils';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials, TestResultLogin } from '../types';
import { Server } from 'http';
import { BlogViewDto } from 'src/modules/bloggers-platform/blogs/api/view-dto/blog-view.dto';
import { BlogsTestManager } from '../managers/blogs.test-manager';
import { HttpStatus } from '@nestjs/common';
import { PostViewDto } from '../../src/modules/bloggers-platform/posts/api/view-dto/post-view.dto';
import { PostsTestManager } from '../managers/posts.test-manager';
import { UsersTestManager } from '../managers/users.test-manager';
import { CommentsTestManager } from '../managers/comments.test-manager';
import { CommentViewDto } from '../../src/modules/bloggers-platform/comments/api/view-dto/comment-view.dto';
import { PaginatedViewDto } from '../../src/core/dto/paginated.view-dto';
import { Filter } from '../helpers/filter';
import { GetCommentsQueryParams } from '../../src/modules/bloggers-platform/comments/api/input-dto/get-comments-query-params.input-dto';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';
import { ReactionStatus } from '../../src/modules/bloggers-platform/reactions/types/reaction-db.type';

describe('PostsController - getComments() (GET: /posts/{postId}/comments)', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let postsTestManager: PostsTestManager;
  let usersTestManager: UsersTestManager;
  let commentsTestManager: CommentsTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
    postsTestManager = new PostsTestManager(server, adminCredentialsInBase64);
    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
    commentsTestManager = new CommentsTestManager(server);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should return an empty array.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
    // üîª –û–∂–∏–¥–∞–µ–º 200 OK –∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å
    const resGetComments: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/comments`)
      .expect(HttpStatus.OK);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ items –∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–≤–Ω—ã –Ω—É–ª—é, –∫—Ä–æ–º–µ page –∏ pageSize
    expect(resGetComments.body).toEqual({
      pagesCount: 0,
      page: 1,
      pageSize: 10,
      totalCount: 0,
      items: [],
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetComments.body,
        resGetComments.statusCode,
        'Test ‚Ññ1: PostsController - getComments() (GET: /posts/{postId}/comments)',
      );
    }
  });

  it('should return an array with a single comment.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
    // üîª –û–∂–∏–¥–∞–µ–º 200 OK –∏ –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    const resGetComments: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/comments`)
      .expect(HttpStatus.OK);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    expect(resGetComments.body).toEqual({
      pagesCount: 1,
      page: 1,
      pageSize: 10,
      totalCount: 1,
      items: [
        {
          id: createdComment.id,
          content: createdComment.content,
          commentatorInfo: {
            userId: createdUser.id,
            userLogin: createdUser.login,
          },
          likesInfo: {
            likesCount: 0,
            dislikesCount: 0,
            myStatus: ReactionStatus.None,
          },
          createdAt: expect.stringMatching(
            /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,
          ),
        },
      ],
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ä–∞–≤–Ω–∞ 1
    expect(resGetComments.body.items.length).toEqual(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetComments.body,
        resGetComments.statusCode,
        'Test ‚Ññ2: PostsController - getComments() (GET: /posts/{postId}/comments)',
      );
    }
  });

  it('should return an array with three comments.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º —Ç—Ä–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Å—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const createdComments: CommentViewDto[] = await commentsTestManager.createComment(
      3,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
    // üîª –û–∂–∏–¥–∞–µ–º 200 OK –∏ –º–∞—Å—Å–∏–≤ —Å —Ç—Ä–µ–º—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    const resGetComments: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/comments`)
      .expect(HttpStatus.OK);

    // üîª –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –ø–∞–≥–∏–Ω–∞—Ü–∏—è)
    const query: GetCommentsQueryParams = new GetCommentsQueryParams();
    // üîª –§–∏–ª—å—Ç—Ä—É–µ–º, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∑–∞–ø—Ä–æ—Å–∞
    const filteredCreatedComments: CommentViewDto[] = new Filter<CommentViewDto>(createdComments)
      .sort({ [query.sortBy]: query.sortDirection })
      .skip(query.calculateSkip())
      .limit(query.pageSize)
      .getResult();

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ (–ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    expect(resGetComments.body.items).toEqual(filteredCreatedComments);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ä–∞–≤–Ω–∞ 3
    expect(resGetComments.body.items.length).toEqual(3);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetComments.body,
        resGetComments.statusCode,
        'Test ‚Ññ3: PostsController - getComments() (GET: /posts/{postId}/comments)',
      );
    }
  });

  it('should return comment found by id.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ –µ–≥–æ ID
    // üîª –û–∂–∏–¥–∞–µ–º 200 OK –∏ –¥–∞–Ω–Ω—ã–µ, –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
    const resGetComment: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/comments/${createdComment.id}`)
      .expect(HttpStatus.OK);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –≤–µ—Ä–Ω—É–ª—Å—è –∏–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    expect(resGetComment.body).toEqual(createdComment);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetComment.body,
        resGetComment.statusCode,
        'Test ‚Ññ4: CommentsController - getById() (GET: /comments/:id)',
      );
    }
  });

  it('should return the 404 not found error (if the comment with this ID does not exist).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await commentsTestManager.createComment(1, createdPost.id, resultLogin.authTokens.accessToken);
    // üîª –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const incorrectCommentId: string = '1000000';

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É ID
    // üîª –û–∂–∏–¥–∞–µ–º 404 Not Found, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ç–∞–∫–∏–º ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    const resGetComment: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/comments/${incorrectCommentId}`)
      .expect(HttpStatus.NOT_FOUND);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetComment.body,
        resGetComment.statusCode,
        'Test ‚Ññ5: CommentsController - getById() (GET: /comments/:id)',
      );
    }
  });

  it('should return the 404 not found error (if the post with this ID does not exist).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await commentsTestManager.createComment(1, createdPost.id, resultLogin.authTokens.accessToken);
    // üîª –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –ø–æ—Å—Ç–∞
    const incorrectPostId: string = '1000000';

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É ID –ø–æ—Å—Ç–∞
    // üîª –û–∂–∏–¥–∞–µ–º 404 Not Found, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ—Å—Ç —Å —Ç–∞–∫–∏–º ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    const resGetComment: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/posts/${incorrectPostId}/comments`)
      .expect(HttpStatus.NOT_FOUND);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetComment.body,
        resGetComment.statusCode,
        'Test ‚Ññ6: PostsController - getComments() (GET: /posts/{postId}comments)',
      );
    }
  });
});
