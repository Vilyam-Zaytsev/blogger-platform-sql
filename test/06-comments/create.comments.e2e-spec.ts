import request, { Response } from 'supertest';
import { TestUtils } from '../helpers/test.utils';
import { TestDtoFactory } from '../helpers/test.dto-factory';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials, TestResultLogin } from '../types';
import { Server } from 'http';
import { BlogsTestManager } from '../managers/blogs.test-manager';
import { HttpStatus } from '@nestjs/common';
import { PostViewDto } from '../../src/modules/bloggers-platform/posts/api/view-dto/post.view-dto';
import { PostsTestManager } from '../managers/posts.test-manager';
import { UsersTestManager } from '../managers/users.test-manager';
import { CommentInputDto } from '../../src/modules/bloggers-platform/comments/api/input-dto/comment-input.dto';
import { CommentViewDto } from '../../src/modules/bloggers-platform/comments/api/view-dto/comment-view.dto';
import { UserAccountsConfig } from '../../src/modules/user-accounts/config/user-accounts.config';
import { JwtService } from '@nestjs/jwt';
import { CommentsTestManager } from '../managers/comments.test-manager';
import { ACCESS_TOKEN_STRATEGY_INJECT_TOKEN } from '../../src/modules/user-accounts/auth/constants/auth-tokens.inject-constants';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';
import { PaginatedViewDto } from '../../src/core/dto/paginated.view-dto';
import { BlogViewDto } from '../../src/modules/bloggers-platform/blogs/api/view-dto/blog.view-dto';
import { ReactionStatus } from '../../src/modules/bloggers-platform/reactions/domain/entities/reaction.entity';

describe('PostsController - createComment() (POST: /posts/{postId}/comments)', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let postsTestManager: PostsTestManager;
  let usersTestManager: UsersTestManager;
  let commentsTestManager: CommentsTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init((moduleBuilder) =>
      moduleBuilder.overrideProvider(ACCESS_TOKEN_STRATEGY_INJECT_TOKEN).useFactory({
        factory: (userAccountsConfig: UserAccountsConfig) => {
          return new JwtService({
            secret: userAccountsConfig.accessTokenSecret,
            signOptions: { expiresIn: '2s' },
          });
        },
        inject: [UserAccountsConfig],
      }),
    );

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
    postsTestManager = new PostsTestManager(server, adminCredentialsInBase64);
    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
    commentsTestManager = new CommentsTestManager(server);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should create a new comment if the user is logged in.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);

    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);

    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DTO –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const [dto]: CommentInputDto[] = TestDtoFactory.generateCommentInputDto(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Å—Ç—É —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    const resCreateComment: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/comments`)
      .send(dto)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .expect(HttpStatus.CREATED);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    expect(resCreateComment.body).toEqual({
      id: expect.any(String),
      content: dto.content,
      commentatorInfo: {
        userId: createdUser.id,
        userLogin: createdUser.login,
      },
      likesInfo: {
        likesCount: 0,
        dislikesCount: 0,
        myStatus: ReactionStatus.None,
      },
      createdAt: expect.stringMatching(
        /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,
      ),
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –±–∞–∑—ã –ø–æ –µ–≥–æ id
    const newlyCreatedComment: CommentViewDto = await commentsTestManager.getById(
      resCreateComment.body.id,
    );

    // üîª –°–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ API –∏ –≤ –±–∞–∑–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
    expect(resCreateComment.body).toEqual(newlyCreatedComment);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreateComment.body,
        resCreateComment.statusCode,
        'Test ‚Ññ1: PostsController - createComment() (POST: /posts/{postId}/comments)',
      );
    }
  });

  it('should return a 401 error if the user is not logged in (sending an invalid access token)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DTO –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const [dto]: CommentInputDto[] = TestDtoFactory.generateCommentInputDto(1);

    // üîª –î–µ–ª–∞–µ–º –ø–∞—É–∑—É 3 —Å–µ–∫—É–Ω–¥—ã (–∏–º–∏—Ç–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞)
    await TestUtils.delay(3000);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –∏ –æ–∂–∏–¥–∞–µ–º 401
    const resCreateComment: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/comments`)
      .send(dto)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .expect(HttpStatus.UNAUTHORIZED);

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
    const comments: PaginatedViewDto<CommentViewDto> = await commentsTestManager.getAll(
      createdPost.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ 0)
    expect(comments.items.length).toEqual(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreateComment.body,
        resCreateComment.statusCode,
        'Test ‚Ññ2: PostsController - createComment() (POST: /posts/{postId}/comments)',
      );
    }
  });

  it("should not create a new comment If post with specified postId doesn't exists.", async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DTO –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const [dto]: CommentInputDto[] = TestDtoFactory.generateCommentInputDto(1);
    // üîª –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ—Å—Ç–∞
    const incorrectPostId: string = '1000000';

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º postId –∏ –æ–∂–∏–¥–∞–µ–º 404
    const resCreateComment: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/posts/${incorrectPostId}/comments`)
      .send(dto)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .expect(HttpStatus.NOT_FOUND);

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ—Å—Ç—É
    const comments: PaginatedViewDto<CommentViewDto> = await commentsTestManager.getAll(
      createdPost.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ 0)
    expect(comments.items.length).toEqual(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreateComment.body,
        resCreateComment.statusCode,
        'Test ‚Ññ3: PostsController - createComment() (POST: /posts/{postId}/comments)',
      );
    }
  });

  it('should not create a commentary if the data in the request body is incorrect (an empty object is passed).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –ø—É—Å—Ç—ã–º –æ–±—ä–µ–∫—Ç–æ–º –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    // üîª –û–∂–∏–¥–∞–µ–º 400 Bad Request, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–ª–µ "content" –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
    const resCreateComment: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/comments`)
      .send({})
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—è "content"
    expect(resCreateComment.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message: 'content must be a string; Received value: undefined',
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
    const comments: PaginatedViewDto<CommentViewDto> = await commentsTestManager.getAll(
      createdPost.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ 0)
    expect(comments.items.length).toEqual(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreateComment.body,
        resCreateComment.statusCode,
        'Test ‚Ññ4: PostsController - createComment() (POST: /posts/{postId}/comments)',
      );
    }
  });

  it('should not create a commentary if the data in the request body is incorrect (the content field contains data of the number type).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –≥–¥–µ –ø–æ–ª–µ "content" –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–∞–∫ —á–∏—Å–ª–æ (123)
    // üîª –û–∂–∏–¥–∞–µ–º 400 Bad Request, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–ª–µ "content" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
    const resCreateComment: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/comments`)
      .send({ content: 123 })
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—è "content"
    expect(resCreateComment.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message: 'content must be a string; Received value: 123',
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
    const comments: PaginatedViewDto<CommentViewDto> = await commentsTestManager.getAll(
      createdPost.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ 0)
    expect(comments.items.length).toEqual(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreateComment.body,
        resCreateComment.statusCode,
        'Test ‚Ññ5: PostsController - createComment() (POST: /posts/{postId}/comments)',
      );
    }
  });

  it('should not create a commentary if the data in the request body is incorrect (the content field is less than 20 characters long).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª–∏–Ω–æ–π 19 —Å–∏–º–≤–æ–ª–æ–≤ (–º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö 20)
    const content: string = TestUtils.generateRandomString(19);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –ø–æ–ª–µ–º "content" –∫–æ—Ä–æ—á–µ 20 —Å–∏–º–≤–æ–ª–æ–≤
    // üîª –û–∂–∏–¥–∞–µ–º 400 Bad Request, –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–ª–∏–Ω–∞ –ø–æ–ª—è "content" –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–π
    const resCreateComment: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/comments`)
      .send({ content })
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—è "content"
    expect(resCreateComment.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message: `content must be longer than or equal to 20 characters; Received value: ${content}`,
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
    const comments: PaginatedViewDto<CommentViewDto> = await commentsTestManager.getAll(
      createdPost.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ 0)
    expect(comments.items.length).toEqual(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreateComment.body,
        resCreateComment.statusCode,
        'Test ‚Ññ6: PostsController - createComment() (POST: /posts/{postId}/comments)',
      );
    }
  });

  it('should not create a commentary if the data in the request body is incorrect (the content field is more than 300 characters long).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª–∏–Ω–æ–π 301 —Å–∏–º–≤–æ–ª (–ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ 300)
    const content: string = TestUtils.generateRandomString(301);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –ø–æ–ª–µ–º "content" –¥–ª–∏–Ω–Ω–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤
    // üîª –û–∂–∏–¥–∞–µ–º 400 Bad Request, –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–ª–∏–Ω–∞ –ø–æ–ª—è "content" –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é
    const resCreateComment: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/comments`)
      .send({ content })
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—è "content"
    expect(resCreateComment.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message: `content must be shorter than or equal to 300 characters; Received value: ${content}`,
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
    const comments: PaginatedViewDto<CommentViewDto> = await commentsTestManager.getAll(
      createdPost.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ 0)
    expect(comments.items.length).toEqual(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreateComment.body,
        resCreateComment.statusCode,
        'Test ‚Ññ7: PostsController - createComment() (POST: /posts/{postId}/comments)',
      );
    }
  });
});
