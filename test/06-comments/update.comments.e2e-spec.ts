import request, { Response } from 'supertest';
import { TestUtils } from '../helpers/test.utils';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials, TestResultLogin } from '../types';
import { Server } from 'http';
import { BlogsTestManager } from '../managers/blogs.test-manager';
import { HttpStatus } from '@nestjs/common';
import { PostViewDto } from '../../src/modules/bloggers-platform/posts/api/view-dto/post.view-dto';
import { PostsTestManager } from '../managers/posts.test-manager';
import { UsersTestManager } from '../managers/users.test-manager';
import { CommentViewDto } from '../../src/modules/bloggers-platform/comments/api/view-dto/comment-view.dto';
import { CommentsTestManager } from '../managers/comments.test-manager';
import { UserAccountsConfig } from '../../src/modules/user-accounts/config/user-accounts.config';
import { JwtService } from '@nestjs/jwt';
import { ACCESS_TOKEN_STRATEGY_INJECT_TOKEN } from '../../src/modules/user-accounts/auth/constants/auth-tokens.inject-constants';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';
import { BlogViewDto } from '../../src/modules/bloggers-platform/blogs/api/view-dto/blog.view-dto';
import { ReactionStatus } from '../../src/modules/bloggers-platform/reactions/domain/entities/reaction.entity';

describe('CommentsController - updateComment() (PUT: /comments/:id)', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let postsTestManager: PostsTestManager;
  let usersTestManager: UsersTestManager;
  let commentsTestManager: CommentsTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init((moduleBuilder) =>
      moduleBuilder.overrideProvider(ACCESS_TOKEN_STRATEGY_INJECT_TOKEN).useFactory({
        factory: (userAccountsConfig: UserAccountsConfig) => {
          return new JwtService({
            secret: userAccountsConfig.accessTokenSecret,
            signOptions: { expiresIn: '2s' },
          });
        },
        inject: [UserAccountsConfig],
      }),
    );

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
    postsTestManager = new PostsTestManager(server, adminCredentialsInBase64);
    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
    commentsTestManager = new CommentsTestManager(server);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['migrations']);

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should update the comment if the user is logged in.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const newContent: string = 'update content comment';

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    // üîª –û–∂–∏–¥–∞–µ–º 204 No Content, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    const resUpdateComment: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ content: newContent })
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ ID
    const updatedComment: CommentViewDto = await commentsTestManager.getById(createdComment.id);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
    expect(updatedComment).toEqual({
      id: createdComment.id,
      content: newContent,
      commentatorInfo: {
        userId: createdUser.id,
        userLogin: createdUser.login,
      },
      likesInfo: {
        likesCount: 0,
        dislikesCount: 0,
        myStatus: ReactionStatus.None,
      },
      createdAt: expect.stringMatching(
        /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,
      ),
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateComment.body,
        resUpdateComment.statusCode,
        'Test ‚Ññ1: CommentsController - updateComment() (PUT: /comments/:id)',
      );
    }
  });

  it('should not update the comment if the user is not logged in.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const newContent: string = 'update content comment';

    // üîª –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 3 —Å–µ–∫—É–Ω–¥—ã (—Ç–æ–∫–µ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º/–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º)
    await TestUtils.delay(3000);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    // üîª –û–∂–∏–¥–∞–µ–º 401 Unauthorized, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    const resUpdateComment: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ content: newContent })
      .expect(HttpStatus.UNAUTHORIZED);

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–Ω–æ–≤–æ
    const newlyCreatedComment: CommentViewDto = await commentsTestManager.getById(
      createdComment.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    expect(createdComment).toEqual(newlyCreatedComment);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateComment.body,
        resUpdateComment.statusCode,
        'Test ‚Ññ2: CommentsController - updateComment() (PUT: /comments/:id)',
      );
    }
  });

  it('should not update the comment if the data in the request body is incorrect (an empty object is passed).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –ø—É—Å—Ç—ã–º —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞
    // üîª –û–∂–∏–¥–∞–µ–º 400 Bad Request, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–µ "content" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    const resUpdateComment: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({})
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—è "content"
    expect(resUpdateComment.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message: 'content must be a string; Received value: undefined',
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–Ω–æ–≤–æ
    const newlyCreatedComment: CommentViewDto = await commentsTestManager.getById(
      createdComment.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    expect(createdComment).toEqual(newlyCreatedComment);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateComment.body,
        resUpdateComment.statusCode,
        'Test ‚Ññ3: CommentsController - updateComment() (PUT: /comments/:id)',
      );
    }
  });

  it('should not update the comment if the data in the request body is incorrect (the content field contains data of the number type).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è "content" (–ø–æ –¥–ª–∏–Ω–µ –º–µ–Ω—å—à–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)
    const content: string = '123';

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    // üîª –û–∂–∏–¥–∞–µ–º 400 Bad Request, —Ç–∞–∫ –∫–∞–∫ –¥–ª–∏–Ω–∞ "content" –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–π
    const resUpdateComment: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ content })
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—è "content"
    expect(resUpdateComment.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message: `content must be longer than or equal to 20 characters; Received value: ${content}`,
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const newlyCreatedComment: CommentViewDto = await commentsTestManager.getById(
      createdComment.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    expect(createdComment).toEqual(newlyCreatedComment);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateComment.body,
        resUpdateComment.statusCode,
        'Test ‚Ññ4: CommentsController - updateComment() (PUT: /comments/:id)',
      );
    }
  });

  it('should not update the comment if the data in the request body is incorrect (the content field is less than 20 characters long).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª–∏–Ω–æ–π 19 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (20 —Å–∏–º–≤–æ–ª–æ–≤)
    const content: string = TestUtils.generateRandomString(19);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–ª–∏–Ω—ã
    // üîª –û–∂–∏–¥–∞–µ–º 400 Bad Request, —Ç–∞–∫ –∫–∞–∫ –¥–ª–∏–Ω–∞ "content" –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–π
    const resUpdateComment: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ content })
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—è "content"
    expect(resUpdateComment.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message: `content must be longer than or equal to 20 characters; Received value: ${content}`,
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const newlyCreatedComment: CommentViewDto = await commentsTestManager.getById(
      createdComment.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    expect(createdComment).toEqual(newlyCreatedComment);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateComment.body,
        resUpdateComment.statusCode,
        'Test ‚Ññ5: CommentsController - updateComment() (PUT: /comments/:id)',
      );
    }
  });

  it('should not update the comment if the data in the request body is incorrect (the content field is more than 300 characters long).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª–∏–Ω–æ–π 301 —Å–∏–º–≤–æ–ª, —á—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (300 —Å–∏–º–≤–æ–ª–æ–≤)
    const content: string = TestUtils.generateRandomString(301);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª–∏–Ω—ã
    // üîª –û–∂–∏–¥–∞–µ–º 400 Bad Request, —Ç–∞–∫ –∫–∞–∫ –¥–ª–∏–Ω–∞ "content" –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const resUpdateComment: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ content })
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—è "content"
    expect(resUpdateComment.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message: `content must be shorter than or equal to 300 characters; Received value: ${content}`,
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–Ω–æ–≤–æ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const newlyCreatedComment: CommentViewDto = await commentsTestManager.getById(
      createdComment.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    expect(createdComment).toEqual(newlyCreatedComment);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateComment.body,
        resUpdateComment.statusCode,
        'Test ‚Ññ6: CommentsController - updateComment() (PUT: /comments/:id)',
      );
    }
  });

  it('should not update comments if the user in question is not the owner of the comment.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [createdUser_1, createdUser_2]: UserViewDto[] = await usersTestManager.createUser(2);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –æ–±–æ–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –∏—Ö —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin_1, resultLogin_2]: TestResultLogin[] = await usersTestManager.login([
      createdUser_1.login,
      createdUser_2.login,
    ]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∏–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin_1.authTokens.accessToken,
    );

    // üîª –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const newContent: string = 'update content comment';

    // üîª –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∏–º–µ–Ω–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // üîª –û–∂–∏–¥–∞–µ–º 403 Forbidden, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const resUpdateComment: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}`)
      .set('Authorization', `Bearer ${resultLogin_2.authTokens.accessToken}`)
      .send({ content: newContent })
      .expect(HttpStatus.FORBIDDEN);

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–Ω–æ–≤–æ
    const newlyCreatedComment: CommentViewDto = await commentsTestManager.getById(
      createdComment.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    expect(createdComment).toEqual(newlyCreatedComment);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateComment.body,
        resUpdateComment.statusCode,
        'Test ‚Ññ7: CommentsController - updateComment() (PUT: /comments/:id)',
      );
    }
  });

  it('should not update comments if the comment does not exist.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const newContent: string = 'update content comment';
    // üîª –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const incorrectCommentId: string = '10000000';

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É ID
    // üîª –û–∂–∏–¥–∞–µ–º 404 Not Found, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ç–∞–∫–∏–º ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    const resUpdateComment: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${incorrectCommentId}`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ content: newContent })
      .expect(HttpStatus.NOT_FOUND);

    // üîª –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    const newlyCreatedComment: CommentViewDto = await commentsTestManager.getById(
      createdComment.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    expect(createdComment).toEqual(newlyCreatedComment);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateComment.body,
        resUpdateComment.statusCode,
        'Test ‚Ññ8: CommentsController - updateComment() (PUT: /comments/:id)',
      );
    }
  });
});
