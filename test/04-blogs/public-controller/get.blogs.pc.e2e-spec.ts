import request, { Response } from 'supertest';
import { GLOBAL_PREFIX } from '../../../src/setup/global-prefix.setup';
import { TestLoggers } from '../../helpers/test.loggers';
import { AppTestManager } from '../../managers/app.test-manager';
import { AdminCredentials } from '../../types';
import { Server } from 'http';
import { HttpStatus } from '@nestjs/common';
import { Filter } from '../../helpers/filter';
import { GetBlogsQueryParams } from '../../../src/modules/bloggers-platform/blogs/api/input-dto/get-blogs-query-params.input-dto';
import { TestUtils } from '../../helpers/test.utils';
import { BlogsTestManager } from '../../managers/blogs.test-manager';
import { BlogViewDto } from '../../../src/modules/bloggers-platform/blogs/api/view-dto/blog.view-dto';

describe('BlogsPublicController - getBlog() (GET: /blogs)', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should return an empty array.', async () => {
    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–æ–≥–æ–≤ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π URI
    const resGetBlogs: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs`)
      .expect(HttpStatus.OK);

    // üî∏ –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    expect(resGetBlogs.body).toEqual({
      pagesCount: 0,
      page: 1,
      pageSize: 10,
      totalCount: 0,
      items: [],
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetBlogs.body,
        resGetBlogs.statusCode,
        'Test ‚Ññ1: BlogsPublicController - getBlog() (GET: /blogs)',
      );
    }
  });

  it('should return an array with a single blog.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–≥ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Å—Ç–æ–≤
    const blogs: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–æ–≥–æ–≤ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π URI
    const resGetBlogs: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs`)
      .expect(HttpStatus.OK);

    // üî∏ –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏–¥–µ—Ç –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º –±–ª–æ–≥–æ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    expect(resGetBlogs.body).toEqual({
      pagesCount: 1,
      page: 1,
      pageSize: 10,
      totalCount: 1,
      items: blogs,
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetBlogs.body,
        resGetBlogs.statusCode,
        'BlogsPublicController - getBlog() (GET: /blogs)',
      );
    }
  });

  it('should return an array with a three blogs.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –±–ª–æ–≥–∞ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Å—Ç–æ–≤
    const blogs: BlogViewDto[] = await blogsTestManager.createBlog(3);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–æ–≥–æ–≤ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π URI
    const resGetBlogs: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs`)
      .expect(HttpStatus.OK);

    // üîª –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const query: GetBlogsQueryParams = new GetBlogsQueryParams();

    // üî∏ –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –±–ª–æ–≥–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∑–∞–ø—Ä–æ—Å–∞
    const filteredCreatedBlogs: BlogViewDto[] = new Filter<BlogViewDto>(blogs)
      .sort({ [query.sortBy]: query.sortDirection })
      .getResult();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏—à–ª–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–≥–∏
    expect(resGetBlogs.body.items).toEqual(filteredCreatedBlogs);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ —Ä–∞–≤–Ω–∞ 3
    expect(resGetBlogs.body.items.length).toEqual(3);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetBlogs.body,
        resGetBlogs.statusCode,
        'Test ‚Ññ3: BlogsPublicController - getBlog() (GET: /blogs)',
      );
    }
  });

  it('should return the blog found by ID.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–≥ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Å—Ç–æ–≤
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–≥–∞ –ø–æ ID –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π URI
    const resGetBlogs: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs/${createdBlog.id}`)
      .expect(HttpStatus.OK);

    // üî∏ –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –±–ª–æ–≥
    expect(resGetBlogs.body).toEqual(createdBlog);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetBlogs.body,
        resGetBlogs.statusCode,
        'Test ‚Ññ4: BlogsPublicController - getBlog() (GET: /blogs/:id)',
      );
    }
  });

  it('should not return the blog if there is no blog with this ID.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–≥ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã, –Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
    await blogsTestManager.createBlog(1);
    const incorrectId: string = '1000000';

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–≥–∞ –ø–æ ID, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
    const resGetBlogs: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs/${incorrectId}`)
      .expect(HttpStatus.NOT_FOUND);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 404 Not Found ‚Äî –±–ª–æ–≥ —Å —Ç–∞–∫–∏–º ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetBlogs.body,
        resGetBlogs.statusCode,
        'Test ‚Ññ5: BlogsPublicController - getBlog() (GET: /blogs/:id)',
      );
    }
  });
});
