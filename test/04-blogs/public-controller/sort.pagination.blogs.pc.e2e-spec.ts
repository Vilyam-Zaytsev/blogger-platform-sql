import request, { Response } from 'supertest';
import { GLOBAL_PREFIX } from '../../../src/setup/global-prefix.setup';
import { TestLoggers } from '../../helpers/test.loggers';
import { AppTestManager } from '../../managers/app.test-manager';
import { AdminCredentials, TestSearchFilter } from '../../types';
import { Server } from 'http';
import { HttpStatus } from '@nestjs/common';
import { Filter } from '../../helpers/filter';
import {
  BlogsSortBy,
  GetBlogsQueryParams,
} from '../../../src/modules/bloggers-platform/blogs/api/input-dto/get-blogs-query-params.input-dto';
import { SortDirection } from '../../../src/core/dto/base.query-params.input-dto';
import { TestUtils } from '../../helpers/test.utils';
import { BlogsTestManager } from '../../managers/blogs.test-manager';
import { BlogViewDto } from '../../../src/modules/bloggers-platform/blogs/api/view-dto/blog.view-dto';

describe('BlogsPublicController - getBlog() (GET: /blogs (pagination, sort, search in term))', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should use default pagination values when none are provided by the client.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º 12 –±–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Å—Ç–æ–≤
    const blogs: BlogViewDto[] = await blogsTestManager.createBlog(12);

    // üîª –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const resGetBlogs: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs`)
      .expect(HttpStatus.OK);

    // üî∏ –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const query: GetBlogsQueryParams = new GetBlogsQueryParams();

    // üî∏ –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
    const filteredCreatedBlogs: BlogViewDto[] = new Filter<BlogViewDto>(blogs)
      .sort({ [query.sortBy]: query.sortDirection })
      .skip(query.calculateSkip())
      .limit(query.pageSize)
      .getResult();

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º
    expect(resGetBlogs.body).toEqual({
      pagesCount: 2,
      page: 1,
      pageSize: 10,
      totalCount: 12,
      items: filteredCreatedBlogs,
    });

    // üî∏ –£—Ç–æ—á–Ω—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–æ–≤–Ω–æ 10 (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–π pageSize)
    expect(resGetBlogs.body.items).toHaveLength(10);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetBlogs.body,
        resGetBlogs.statusCode,
        'Test ‚Ññ1: BlogsPublicController - getBlog() (GET: /blogs (pagination, sort, search in term))',
      );
    }
  });

  it('should use client-provided pagination values to return the correct subset of data(1).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º 12 –±–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Å—Ç–æ–≤
    const blogs: BlogViewDto[] = await blogsTestManager.createBlog(12);

    // üî∏ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∑–∞–¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–º
    const query: GetBlogsQueryParams = new GetBlogsQueryParams();
    query.sortBy = BlogsSortBy.Name;
    query.sortDirection = SortDirection.Ascending;
    query.pageNumber = 2;
    query.pageSize = 3;

    // üîª –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–æ–≤ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const resGetBlogs: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs`)
      .query(query)
      .expect(HttpStatus.OK);

    // üî∏ –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
    const filteredCreatedBlogs: BlogViewDto[] = new Filter<BlogViewDto>(blogs)
      .sort({ [query.sortBy]: query.sortDirection })
      .skip(query.calculateSkip())
      .limit(query.pageSize)
      .getResult();

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç API —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º
    expect(resGetBlogs.body).toEqual({
      pagesCount: 4,
      page: 2,
      pageSize: 3,
      totalCount: 12,
      items: filteredCreatedBlogs,
    });

    // üî∏ –£—Ç–æ—á–Ω—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–æ–≤–Ω–æ 3
    expect(resGetBlogs.body.items).toHaveLength(3);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetBlogs.body,
        resGetBlogs.statusCode,
        'Test ‚Ññ2: BlogsPublicController - getBlog() (GET: /blogs (pagination, sort, search in term))',
      );
    }
  });

  it('should use client-provided pagination values to return the correct subset of data(2).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º 12 –±–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Å—Ç–æ–≤
    const blogs: BlogViewDto[] = await blogsTestManager.createBlog(12);

    // üî∏ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∑–∞–¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–º
    const query: GetBlogsQueryParams = new GetBlogsQueryParams();
    query.sortBy = BlogsSortBy.CreatedAt;
    query.sortDirection = SortDirection.Descending;
    query.pageNumber = 6;
    query.pageSize = 2;

    // üîª –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–æ–≤ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const resGetBlogs: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs`)
      .query(query)
      .expect(HttpStatus.OK);

    // üî∏ –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
    const filteredCreatedBlogs: BlogViewDto[] = new Filter<BlogViewDto>(blogs)
      .sort({ [query.sortBy]: query.sortDirection })
      .skip(query.calculateSkip())
      .limit(query.pageSize)
      .getResult();

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç API —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º
    expect(resGetBlogs.body).toEqual({
      pagesCount: 6,
      page: 6,
      pageSize: 2,
      totalCount: 12,
      items: filteredCreatedBlogs,
    });

    // üî∏ –£—Ç–æ—á–Ω—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–æ–≤–Ω–æ 2
    expect(resGetBlogs.body.items).toHaveLength(2);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetBlogs.body,
        resGetBlogs.statusCode,
        'Test ‚Ññ3: BlogsPublicController - getBlog() (GET: /blogs (pagination, sort, search in term))',
      );
    }
  });

  it('should use client-provided pagination values to return the correct subset of data(3).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º 12 –±–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    const blogs: BlogViewDto[] = await blogsTestManager.createBlog(12);

    // üî∏ –ó–∞–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–º
    const query: GetBlogsQueryParams = new GetBlogsQueryParams();
    query.sortBy = BlogsSortBy.Name;
    query.sortDirection = SortDirection.Ascending;
    query.pageNumber = 2;
    query.pageSize = 1;
    query.searchNameTerm = 'g1';

    // üî∏ –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏
    const searchFilter: TestSearchFilter = {
      name: query.searchNameTerm,
    };

    // üîª –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–ª–æ–≥–∏ —á–µ—Ä–µ–∑ API —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const resGetBlogs: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs`)
      .query(query)
      .expect(HttpStatus.OK);

    // üî∏ –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
    const filteredCreatedBlogs: BlogViewDto[] = new Filter<BlogViewDto>(blogs)
      .filter(searchFilter)
      .sort({ [query.sortBy]: query.sortDirection })
      .skip(query.calculateSkip())
      .limit(query.pageSize)
      .getResult();

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç API —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    expect(resGetBlogs.body).toEqual({
      pagesCount: 3,
      page: 2,
      pageSize: 1,
      totalCount: 3,
      items: filteredCreatedBlogs,
    });

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–æ–≤–Ω–æ 1 –±–ª–æ–≥
    expect(resGetBlogs.body.items).toHaveLength(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetBlogs.body,
        resGetBlogs.statusCode,
        'Test ‚Ññ4: BlogsPublicController - getBlog() (GET: /blogs (pagination, sort, search in term))',
      );
    }
  });

  it('should return a 400 error if the client has passed invalid pagination values.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º 12 –±–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    await blogsTestManager.createBlog(12);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–≥–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const resGetBlogs: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs`)
      .query({
        pageNumber: 'xxx',
        pageSize: 'xxx',
        sortBy: 123,
        sortDirection: 'xxx',
        searchNameTerm: 123,
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—à–∏–±–æ–∫
    expect(resGetBlogs.body).toEqual({
      errorsMessages: [
        {
          field: 'sortDirection',
          message:
            'sortDirection must be one of the following values: asc, desc; Received value: xxx',
        },
        {
          field: 'pageSize',
          message:
            'pageSize must be a number conforming to the specified constraints; Received value: NaN',
        },
        {
          field: 'pageNumber',
          message:
            'pageNumber must be a number conforming to the specified constraints; Received value: NaN',
        },
        {
          field: 'sortBy',
          message:
            'sortBy must be one of the following values: createdAt, updatedAt, deletedAt, name; Received value: 123',
        },
      ],
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetBlogs.body,
        resGetBlogs.statusCode,
        'Test ‚Ññ5: BlogsPublicController - getBlog() (GET: /blogs (pagination, sort, search in term))',
      );
    }
  });
});
