import request, { Response } from 'supertest';
import { GLOBAL_PREFIX } from '../../../src/setup/global-prefix.setup';
import { TestLoggers } from '../../helpers/test.loggers';
import { AppTestManager } from '../../managers/app.test-manager';
import { AdminCredentials } from '../../types';
import { Server } from 'http';
import { HttpStatus } from '@nestjs/common';
import { Filter } from '../../helpers/filter';
import { SortDirection } from '../../../src/core/dto/base.query-params.input-dto';
import { TestUtils } from '../../helpers/test.utils';
import { BlogsTestManager } from '../../managers/blogs.test-manager';
import { PostsTestManager } from '../../managers/posts.test-manager';
import { PostViewDto } from '../../../src/modules/bloggers-platform/posts/api/view-dto/post.view-dto';
import {
  GetPostsQueryParams,
  PostsSortBy,
} from '../../../src/modules/bloggers-platform/posts/api/input-dto/get-posts-query-params.input-dto';
import { BlogViewDto } from '../../../src/modules/bloggers-platform/blogs/api/view-dto/blog.view-dto';

describe('BlogsPublicController - getPostsForBlog() (GET: /blogs/{blogId}/posts)', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let postsTestManager: PostsTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
    postsTestManager = new PostsTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should return all posts from a specific blog.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–≥, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–µ –ø–æ—Å—Ç—ã
    const [blog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º 3 –ø–æ—Å—Ç–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω–æ–º—É –±–ª–æ–≥—É
    const posts: PostViewDto[] = await postsTestManager.createPost(3, blog.id);

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ —Ä—É—á–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–ª–æ–≥—É
    const resGetPosts: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs/${blog.id}/posts`)
      .expect(HttpStatus.OK); // üî∏ –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç 200

    // üîª –ò–º–∏—Ç–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):
    const query: GetPostsQueryParams = new GetPostsQueryParams();

    // üîª –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–∞–º —Ç–∞–∫ –∂–µ, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    const filteredCreatedPosts: PostViewDto[] = new Filter<PostViewDto>(posts)
      .sort({ [query.sortBy]: query.sortDirection })
      .skip(query.calculateSkip())
      .limit(query.pageSize)
      .getResult();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–Ω–∏—è–º–∏
    expect(resGetPosts.body).toEqual({
      pagesCount: 1,
      page: 1,
      pageSize: 10,
      totalCount: 3,
      items: filteredCreatedPosts,
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–æ—Å—å —Ä–æ–≤–Ω–æ 3 –ø–æ—Å—Ç–∞
    expect(resGetPosts.body.items).toHaveLength(3);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetPosts.body,
        resGetPosts.statusCode,
        'Test ‚Ññ1: BlogsPublicController - getPostsForBlog() (GET: /blogs/{blogId}/posts)',
      );
    }
  });

  it('should return all entries from a specific blog using the pagination values provided by the client.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–≥
    const [blog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º 12 –ø–æ—Å—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –±–ª–æ–≥–æ–º
    const posts: PostViewDto[] = await postsTestManager.createPost(12, blog.id);

    // üîª –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–ª–∏–µ–Ω—Ç–æ–º:
    const query: GetPostsQueryParams = new GetPostsQueryParams();
    query.sortBy = PostsSortBy.Title;
    query.sortDirection = SortDirection.Ascending;
    query.pageNumber = 2;
    query.pageSize = 3;

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const resGetPosts: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs/${blog.id}/posts`)
      .query(query)
      .expect(HttpStatus.OK);

    // üîª –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–∞–º —Ç—É –∂–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é, —á—Ç–æ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    const filteredCreatedPosts: PostViewDto[] = new Filter<PostViewDto>(posts)
      .sort({ [query.sortBy]: query.sortDirection })
      .skip(query.calculateSkip())
      .limit(query.pageSize)
      .getResult();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    expect(resGetPosts.body).toEqual({
      pagesCount: 4,
      page: 2,
      pageSize: 3,
      totalCount: 12,
      items: filteredCreatedPosts,
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–æ—Å—å —Ä–æ–≤–Ω–æ 3 –ø–æ—Å—Ç–∞ (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    expect(resGetPosts.body.items).toHaveLength(3);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetPosts.body,
        resGetPosts.statusCode,
        'Test ‚Ññ2: BlogsPublicController - getPostsForBlog() (GET: /blogs/{blogId}/posts)',
      );
    }
  });

  it('should return a 404 error if the blog does not exist.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–≥
    const [blog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º 12 –ø–æ—Å—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –±–ª–æ–≥–æ–º
    await postsTestManager.createPost(12, blog.id);

    // üîª –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π blogId
    const incorrectBlogId: string = '1000000';

    // üîª –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –±–ª–æ–≥—É
    const resGetPosts_1: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs/${incorrectBlogId}/posts`)
      .expect(HttpStatus.NOT_FOUND);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –±–ª–æ–≥—É (–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
    const resGetPosts_2: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs/${blog.id}/posts`)
      .expect(HttpStatus.OK);

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–æ—Å—å 10 –ø–æ—Å—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (pageSize = 10)
    expect(resGetPosts_2.body.items).toHaveLength(10);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetPosts_1.body,
        resGetPosts_1.statusCode,
        'Test ‚Ññ3: BlogsPublicController - getPostsForBlog() (GET: /blogs/{blogId}/posts)',
      );
    }
  });

  it('should return error 400 if the BlogId is not valid.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–≥
    const [blog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø–æ—Å—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –±–ª–æ–≥—É
    await postsTestManager.createPost(1, blog.id);

    // üî∏ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–ª–æ–≥–∞
    const invalidBlogId: string = 'a';

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º blogId
    const resGetPosts_1: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs/${invalidBlogId}/posts`)
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º blogId –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const resGetPosts_2: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/blogs/${blog.id}/posts`)
      .expect(HttpStatus.OK);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (1 —à—Ç.)
    expect(resGetPosts_2.body.items).toHaveLength(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetPosts_1.body,
        resGetPosts_1.statusCode,
        'Test ‚Ññ4: BlogsPublicController - getPostsForBlog() (GET: /blogs/{blogId}/posts)',
      );
    }
  });
});
