import request, { Response } from 'supertest';
import { TestUtils } from '../../helpers/test.utils';
import { GLOBAL_PREFIX } from '../../../src/setup/global-prefix.setup';
import { TestLoggers } from '../../helpers/test.loggers';
import { AppTestManager } from '../../managers/app.test-manager';
import { AdminCredentials } from '../../types';
import { Server } from 'http';
import { BlogViewDto } from 'src/modules/bloggers-platform/blogs/api/view-dto/blog-view.dto';
import { BlogsTestManager } from '../../managers/blogs.test-manager';
import { HttpStatus } from '@nestjs/common';
import { PostViewDto } from '../../../src/modules/bloggers-platform/posts/api/view-dto/post-view.dto';
import { PostsTestManager } from '../../managers/posts.test-manager';
import { PostInputDto } from '../../../src/modules/bloggers-platform/posts/api/input-dto/post-input.dto';
import { ReactionStatus } from '../../../src/modules/bloggers-platform/reactions/types/reaction-db.type';

describe('BlogsAdminController - updatePost() (PUT: /sa/blogs/:blogId/posts/:postId)', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let postsTestManager: PostsTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
    postsTestManager = new PostsTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should update post, the admin is authenticated.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —ç—Ç–æ–º—É –±–ª–æ–≥—É
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(
      1,
      createdBlog.id,
    );

    // üîª –§–æ—Ä–º–∏—Ä—É–µ–º DTO —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const dto: PostInputDto = {
      title: 'updateTitle',
      shortDescription: 'update short description',
      content: 'update content',
    };

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    const resUpdatePost: Response = await request(server)
      .put(
        `/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts/${createdPost.id}`,
      )
      .send(dto)
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const updatedPost: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
    );

    // üîª –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
    expect(createdPost).not.toEqual(updatedPost);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç DTO
    expect(updatedPost).toEqual({
      id: expect.any(String),
      title: dto.title,
      shortDescription: dto.shortDescription,
      content: dto.content,
      blogId: createdBlog.id,
      blogName: createdBlog.name,
      extendedLikesInfo: {
        dislikesCount: 0,
        likesCount: 0,
        myStatus: ReactionStatus.None,
        newestLikes: [],
      },
      createdAt: expect.any(String),
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdatePost.body,
        resUpdatePost.statusCode,
        'Test ‚Ññ1: BlogsAdminController - updatePost() (PUT: /sa/blogs/:blogId/posts/:postId)',
      );
    }
  });

  it('should not update the post if the admin has not been authenticated.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —ç—Ç–æ–º—É –±–ª–æ–≥—É
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(
      1,
      createdBlog.id,
    );

    // üîª –§–æ—Ä–º–∏—Ä—É–µ–º DTO —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const dto: PostInputDto = {
      title: 'updateTitle',
      shortDescription: 'update short description',
      content: 'update content',
    };

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const resUpdatePost: Response = await request(server)
      .put(
        `/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts/${createdPost.id}`,
      )
      .send(dto)
      .set('Authorization', 'incorrect admin credentials')
      .expect(HttpStatus.UNAUTHORIZED);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
    const post: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    expect(createdPost).toEqual(post);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdatePost.body,
        resUpdatePost.statusCode,
        'Test ‚Ññ2: BlogsAdminController - updatePost() (PUT: /sa/blogs/:blogId/posts/:postId)',
      );
    }
  });

  it('should not update a post if the data in the request body is incorrect (an empty object is passed).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —ç—Ç–æ–º—É –±–ª–æ–≥—É
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(
      1,
      createdBlog.id,
    );

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º —Ç–µ–ª–æ–º ({}), —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º
    const resUpdatePost: Response = await request(server)
      .put(
        `/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts/${createdPost.id}`,
      )
      .send({})
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    expect(resUpdatePost.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message: 'content must be a string; Received value: undefined',
        },
        {
          field: 'shortDescription',
          message:
            'shortDescription must be a string; Received value: undefined',
        },
        {
          field: 'title',
          message: 'title must be a string; Received value: undefined',
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
    const post: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
    );

    // üîª –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º ‚Äî –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –ø—Ä–µ–∂–Ω–∏–º
    expect(createdPost).toEqual(post);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdatePost.body,
        resUpdatePost.statusCode,
        'Test ‚Ññ3: BlogsAdminController - updatePost() (PUT: /sa/blogs/:blogId/posts/:postId)',
      );
    }
  });

  it('should not update a blog if the data in the request body is incorrect (title: empty line, shortDescription: empty line, content: empty line, blogId: empty line).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —ç—Ç–æ–º—É –±–ª–æ–≥—É
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(
      1,
      createdBlog.id,
    );

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª—è–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
    const resUpdatePost: Response = await request(server)
      .put(
        `/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts/${createdPost.id}`,
      )
      .send({
        title: '   ',
        shortDescription: '   ',
        content: '   ',
      })
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ title, shortDescription –∏ content
    expect(resUpdatePost.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message:
            'content must be longer than or equal to 1 characters; Received value: ',
        },
        {
          field: 'shortDescription',
          message:
            'shortDescription must be longer than or equal to 1 characters; Received value: ',
        },
        {
          field: 'title',
          message:
            'title must be longer than or equal to 1 characters; Received value: ',
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –æ—Å—Ç–∞–ª—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º
    const post: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
    );

    // üîª –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º ‚Äî –ø–æ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    expect(createdPost).toEqual(post);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdatePost.body,
        resUpdatePost.statusCode,
        'Test ‚Ññ4: BlogsAdminController - updatePost() (PUT: /sa/blogs/:blogId/posts/:postId)',
      );
    }
  });

  it('should not update a blog if the data in the request body is incorrect (title: exceeds max length, shortDescription: exceeds max length, content: exceeds max length, blogId: incorrect).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —ç—Ç–æ–º—É –±–ª–æ–≥—É
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(
      1,
      createdBlog.id,
    );

    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É
    const title: string = TestUtils.generateRandomString(31);
    const shortDescription: string = TestUtils.generateRandomString(101);
    const content: string = TestUtils.generateRandomString(1001);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const resUpdatePost: Response = await request(server)
      .put(
        `/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts/${createdPost.id}`,
      )
      .send({
        title,
        shortDescription,
        content,
      })
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    expect(resUpdatePost.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message: `content must be shorter than or equal to 1000 characters; Received value: ${content}`,
        },
        {
          field: 'shortDescription',
          message: `shortDescription must be shorter than or equal to 100 characters; Received value: ${shortDescription}`,
        },
        {
          field: 'title',
          message: `title must be shorter than or equal to 30 characters; Received value: ${title}`,
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    const post: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –æ—Å—Ç–∞–ª—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º
    expect(createdPost).toEqual(post);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdatePost.body,
        resUpdatePost.statusCode,
        'Test ‚Ññ5: BlogsAdminController - updatePost() (PUT: /sa/blogs/:blogId/posts/:postId)',
      );
    }
  });

  it('should not update a blog if the data in the request body is incorrect (title: type number, shortDescription: type number, content: type number, blogId: incorrect).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç—Ç–∏–º –±–ª–æ–≥–æ–º
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(
      1,
      createdBlog.id,
    );

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª—è–º–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ (number –≤–º–µ—Å—Ç–æ string)
    const resUpdatePost: Response = await request(server)
      .put(
        `/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts/${createdPost.id}`,
      )
      .send({
        title: 123,
        shortDescription: 123,
        content: 123,
      })
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É
    expect(resUpdatePost.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message: `content must be a string; Received value: 123`,
        },
        {
          field: 'shortDescription',
          message: `shortDescription must be a string; Received value: 123`,
        },
        {
          field: 'title',
          message: `title must be a string; Received value: 123`,
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω
    const post: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
    );

    // üîª –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º, —á—Ç–æ –ø–æ—Å—Ç –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º
    expect(createdPost).toEqual(post);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdatePost.body,
        resUpdatePost.statusCode,
        'Test ‚Ññ6: BlogsAdminController - updatePost() (PUT: /sa/blogs/:blogId/posts/:postId)',
      );
    }
  });

  it('should return a 404 error if the post does not exist.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —ç—Ç–æ–º—É –±–ª–æ–≥—É
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(
      1,
      createdBlog.id,
    );

    // üîª DTO —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const dto: PostInputDto = {
      title: 'updateTitle',
      shortDescription: 'update short description',
      content: 'update content',
    };

    // üîª –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –ø–æ—Å—Ç–∞
    const incorrectPostId: string = '1000000';

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
    const resUpdatePost: Response = await request(server)
      .put(
        `/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts/${incorrectPostId}`,
      )
      .send(dto)
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.NOT_FOUND);

    // üîª –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    const post: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
    );

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º
    expect(createdPost).toEqual(post);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdatePost.body,
        resUpdatePost.statusCode,
        'Test ‚Ññ7: BlogsAdminController - updatePost() (PUT: /sa/blogs/:blogId/posts/:postId)',
      );
    }
  });
  //TODO: –¥–æ–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç—ã: 1. –µ—Å–ª–∏ –±–ª–æ–≥ –ø–æ id –Ω–µ –Ω–∞–π–¥–µ–Ω, 2. –µ—Å–ª–∏ –ø–æ—Å—Ç –Ω–µ –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –±–ª–æ–≥—É –ø–æ id
});
