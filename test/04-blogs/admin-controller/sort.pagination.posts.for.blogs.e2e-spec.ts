import request, { Response } from 'supertest';
import { TestUtils } from '../../helpers/test.utils';
import { GLOBAL_PREFIX } from '../../../src/setup/global-prefix.setup';
import { TestLoggers } from '../../helpers/test.loggers';
import { AppTestManager } from '../../managers/app.test-manager';
import { AdminCredentials } from '../../types';
import { Server } from 'http';
import { BlogViewDto } from 'src/modules/bloggers-platform/blogs/api/view-dto/blog-view.dto';
import { BlogsTestManager } from '../../managers/blogs.test-manager';
import { HttpStatus } from '@nestjs/common';
import { PostViewDto } from '../../../src/modules/bloggers-platform/posts/api/view-dto/post-view.dto';
import { PostsTestManager } from '../../managers/posts.test-manager';
import { Filter } from '../../helpers/filter';
import {
  GetPostsQueryParams,
  PostsSortBy,
} from '../../../src/modules/bloggers-platform/posts/api/input-dto/get-posts-query-params.input-dto';
import { SortDirection } from '../../../src/core/dto/base.query-params.input-dto';

describe('BlogsAdminController - getPost() (GET: /sa/blogs/:blogId/posts (pagination, sort, search in term))', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let postsTestManager: PostsTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
    postsTestManager = new PostsTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should use default pagination values when none are provided by the client.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º 12 –ø–æ—Å—Ç–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –±–ª–æ–≥—É
    const posts: PostViewDto[] = await postsTestManager.createPost(
      12,
      createdBlog.id,
    );

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const resGetPosts: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts`)
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.OK);

    // üîª –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const query: GetPostsQueryParams = new GetPostsQueryParams();

    // üîª –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    const filteredCreatedPosts: PostViewDto[] = new Filter<PostViewDto>(posts)
      .sort({ [query.sortBy]: query.sortDirection })
      .skip(query.calculateSkip())
      .limit(query.pageSize)
      .getResult();

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    expect(resGetPosts.body).toEqual({
      pagesCount: 2,
      page: 1,
      pageSize: 10,
      totalCount: 12,
      items: filteredCreatedPosts,
    });

    // üîª –£–¥–æ—Å—Ç–æ–≤–µ—Ä—è–µ–º—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Ä–æ–≤–Ω–æ 10 –ø–æ—Å—Ç–æ–≤ (–¥–µ—Ñ–æ–ª—Ç pageSize)
    expect(resGetPosts.body.items).toHaveLength(10);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetPosts.body,
        resGetPosts.statusCode,
        'Test ‚Ññ1: BlogsAdminController - getPost() (GET: /sa/blogs/:blogId/posts (pagination, sort, search in term))',
      );
    }
  });

  it('should use client-provided pagination values to return the correct subset of data(1).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º 12 –ø–æ—Å—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –±–ª–æ–≥–æ–º
    const posts: PostViewDto[] = await postsTestManager.createPost(
      12,
      createdBlog.id,
    );

    // üîª –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–º
    const query: GetPostsQueryParams = new GetPostsQueryParams();
    query.sortBy = PostsSortBy.Title;
    query.sortDirection = SortDirection.Ascending;
    query.pageNumber = 2;
    query.pageSize = 3;

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const resGetPosts: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts`)
      .set('Authorization', adminCredentialsInBase64)
      .query(query)
      .expect(HttpStatus.OK);

    // üîª –§–∏–ª—å—Ç—Ä—É–µ–º, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const filteredCreatedPosts: PostViewDto[] = new Filter<PostViewDto>(posts)
      .sort({ [query.sortBy]: query.sortDirection })
      .skip(query.calculateSkip())
      .limit(query.pageSize)
      .getResult();

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    expect(resGetPosts.body).toEqual({
      pagesCount: 4,
      page: 2,
      pageSize: 3,
      totalCount: 12,
      items: filteredCreatedPosts,
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–æ—Å—å —Ä–æ–≤–Ω–æ 3 –ø–æ—Å—Ç–∞
    expect(resGetPosts.body.items).toHaveLength(3);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetPosts.body,
        resGetPosts.statusCode,
        'Test ‚Ññ2: BlogsAdminController - getPost() (GET: /sa/blogs/:blogId/posts (pagination, sort, search in term))',
      );
    }
  });

  it('should use client-provided pagination values to return the correct subset of data(2).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º 12 –ø–æ—Å—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –±–ª–æ–≥–æ–º
    const posts: PostViewDto[] = await postsTestManager.createPost(
      12,
      createdBlog.id,
    );

    // üîª –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–º
    const query: GetPostsQueryParams = new GetPostsQueryParams();
    query.sortBy = PostsSortBy.CreatedAt;
    query.sortDirection = SortDirection.Descending;
    query.pageNumber = 6;
    query.pageSize = 2;

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const resGetPosts: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts`)
      .set('Authorization', adminCredentialsInBase64)
      .query(query)
      .expect(HttpStatus.OK);

    // üîª –§–∏–ª—å—Ç—Ä—É–µ–º, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const filteredCreatedPosts: PostViewDto[] = new Filter<PostViewDto>(posts)
      .sort({ [query.sortBy]: query.sortDirection })
      .skip(query.calculateSkip())
      .limit(query.pageSize)
      .getResult();

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    expect(resGetPosts.body).toEqual({
      pagesCount: 6,
      page: 6,
      pageSize: 2,
      totalCount: 12,
      items: filteredCreatedPosts,
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–æ—Å—å —Ä–æ–≤–Ω–æ 2 –ø–æ—Å—Ç–∞
    expect(resGetPosts.body.items).toHaveLength(2);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetPosts.body,
        resGetPosts.statusCode,
        'Test ‚Ññ3: BlogsAdminController - getPost() (GET: /sa/blogs/:blogId/posts (pagination, sort, search in term))',
      );
    }
  });

  it('should use client-provided pagination values to return the correct subset of data(3).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º 12 –ø–æ—Å—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –±–ª–æ–≥–æ–º
    const posts: PostViewDto[] = await postsTestManager.createPost(
      12,
      createdBlog.id,
    );

    // üîª –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const query: GetPostsQueryParams = new GetPostsQueryParams();
    query.sortBy = PostsSortBy.Title;
    query.sortDirection = SortDirection.Descending;
    query.pageNumber = 2;
    query.pageSize = 1;

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const resGetPosts: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts`)
      .set('Authorization', adminCredentialsInBase64)
      .query(query)
      .expect(HttpStatus.OK);

    // üîª –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Å–æ—Ä—Ç–∏—Ä—É–µ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
    const filteredCreatedPosts: PostViewDto[] = new Filter<PostViewDto>(posts)
      .sort({ [query.sortBy]: query.sortDirection })
      .skip(query.calculateSkip())
      .limit(query.pageSize)
      .getResult();

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º—ã–º –¥–∞–Ω–Ω—ã–º
    expect(resGetPosts.body).toEqual({
      pagesCount: 12,
      page: 2,
      pageSize: 1,
      totalCount: 12,
      items: filteredCreatedPosts,
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è —Ä–æ–≤–Ω–æ 1 –ø–æ—Å—Ç
    expect(resGetPosts.body.items).toHaveLength(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetPosts.body,
        resGetPosts.statusCode,
        'Test ‚Ññ4: BlogsAdminController - getPost() (GET: /sa/blogs/:blogId/posts (pagination, sort, search in term))',
      );
    }
  });

  it('should return a 400 error if the client has passed invalid pagination values.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥ –∏ —Å–æ–∑–¥–∞–µ–º 12 –ø–æ—Å—Ç–æ–≤ –¥–ª—è –Ω–µ–≥–æ
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    await postsTestManager.createPost(12, createdBlog.id);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const resGetPosts: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts`)
      .set('Authorization', adminCredentialsInBase64)
      .query({
        pageNumber: 'xxx',
        pageSize: 'xxx',
        sortBy: 123,
        sortDirection: 'xxx',
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—é
    expect(resGetPosts.body).toEqual({
      errorsMessages: [
        {
          field: 'sortDirection',
          message:
            'sortDirection must be one of the following values: asc, desc; Received value: xxx',
        },
        {
          field: 'pageSize',
          message:
            'pageSize must be a number conforming to the specified constraints; Received value: NaN',
        },
        {
          field: 'pageNumber',
          message:
            'pageNumber must be a number conforming to the specified constraints; Received value: NaN',
        },
        {
          field: 'sortBy',
          message:
            'sortBy must be one of the following values: createdAt, updatedAt, deletedAt, title, blogId, blogName; Received value: 123',
        },
      ],
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetPosts.body,
        resGetPosts.statusCode,
        'Test ‚Ññ5: BlogsAdminController - getPost() (GET: /sa/blogs/:blogId/posts (pagination, sort, search in term))',
      );
    }
  });
});
