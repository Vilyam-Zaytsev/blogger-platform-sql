import request, { Response } from 'supertest';
import { TestUtils } from '../../helpers/test.utils';
import { GLOBAL_PREFIX } from '../../../src/setup/global-prefix.setup';
import { TestLoggers } from '../../helpers/test.loggers';
import { AppTestManager } from '../../managers/app.test-manager';
import { AdminCredentials } from '../../types';
import { Server } from 'http';
import { PaginatedViewDto } from '../../../src/core/dto/paginated.view-dto';
import { HttpStatus } from '@nestjs/common';
import { BlogsTestManager } from '../../managers/blogs.test-manager';
import { BlogViewDto } from '../../../src/modules/bloggers-platform/blogs/api/view-dto/blog.view-dto';

describe('BlogsAdminController - deleteBlog() (DELETE: /sa/blogs)', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should delete blog, the admin is authenticated.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω –±–ª–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    const [blog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–≥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    const resDeleteBlog: Response = await request(server)
      .delete(`/${GLOBAL_PREFIX}/sa/blogs/${blog.id}`)
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    const { items: blogs }: PaginatedViewDto<BlogViewDto> = await blogsTestManager.getAll();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–æ–≤ –ø—É—Å—Ç (–±–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω)
    expect(blogs).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeleteBlog.body,
        resDeleteBlog.statusCode,
        'Test ‚Ññ1: BlogsAdminController - deleteBlog() (DELETE: /sa/blogs)',
      );
    }
  });

  it('should not delete blog, the admin is not authenticated.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω –±–ª–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∞
    const [blog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –±–ª–æ–≥ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const resDeleteBlog: Response = await request(server)
      .delete(`/${GLOBAL_PREFIX}/sa/blogs/${blog.id}`)
      .set('Authorization', 'incorrect admin credentials')
      .expect(HttpStatus.UNAUTHORIZED);

    // üîª –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–≥ –∏–∑ –±–∞–∑—ã, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω
    const blogs: BlogViewDto = await blogsTestManager.getById(+blog.id);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª–æ–≥ –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    expect(blogs).toEqual(blog);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeleteBlog.body,
        resDeleteBlog.statusCode,
        'Test ‚Ññ2: BlogsAdminController - deleteBlog() (DELETE: /sa/blogs)',
      );
    }
  });

  it('should return a 404 error if the blog was not found by the passed ID in the parameters.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω –±–ª–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∞
    const [blog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const incorrectId: string = '1000000';

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –±–ª–æ–≥ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID, –æ–∂–∏–¥–∞–µ–º 404 Not Found
    const resDeleteBlog: Response = await request(server)
      .delete(`/${GLOBAL_PREFIX}/blogs/${incorrectId}`)
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.NOT_FOUND);

    // üîª –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–≥ –∏–∑ –±–∞–∑—ã, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const blogs: BlogViewDto = await blogsTestManager.getById(+blog.id);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª–æ–≥ –æ—Å—Ç–∞–ª—Å—è —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫–∏–º –±—ã–ª —Å–æ–∑–¥–∞–Ω
    expect(blogs).toEqual(blog);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeleteBlog.body,
        resDeleteBlog.statusCode,
        'Test ‚Ññ3: BlogsAdminController - deleteBlog() (DELETE: /sa/blogs)',
      );
    }
  });
});
