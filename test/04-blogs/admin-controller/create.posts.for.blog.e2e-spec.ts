import request, { Response } from 'supertest';
import { TestUtils } from '../../helpers/test.utils';
import { TestDtoFactory } from '../../helpers/test.dto-factory';
import { GLOBAL_PREFIX } from '../../../src/setup/global-prefix.setup';
import { TestLoggers } from '../../helpers/test.loggers';
import { AppTestManager } from '../../managers/app.test-manager';
import { AdminCredentials } from '../../types';
import { Server } from 'http';
import { BlogViewDto } from 'src/modules/bloggers-platform/blogs/api/view-dto/blog-view.dto';
import { HttpStatus } from '@nestjs/common';
import { BlogsTestManager } from '../../managers/blogs.test-manager';
import { PostsTestManager } from '../../managers/posts.test-manager';
import { PostInputDto } from '../../../src/modules/bloggers-platform/posts/api/input-dto/post-input.dto';
import { PostViewDto } from '../../../src/modules/bloggers-platform/posts/api/view-dto/post-view.dto';
import { ReactionStatus } from '../../../src/modules/bloggers-platform/reactions/types/reaction-db.type';
import { PaginatedViewDto } from '../../../src/core/dto/paginated.view-dto';

describe('BlogsAdminController - createPost() (POST: /sa/blogs/{blogId}/posts)', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let postsTestManager: PostsTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
    postsTestManager = new PostsTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should create a new post, the admin is authenticated.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–≥, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ—Å—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –±–ª–æ–≥—É
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DTO –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    const [dto]: PostInputDto[] = TestDtoFactory.generatePostInputDto(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ URI /sa/blogs/:blogId/posts —Å –≤–∞–ª–∏–¥–Ω—ã–º access-token
    const resCreatePosts: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts`)
      .send(dto)
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.CREATED);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ PostViewDto
    expect(resCreatePosts.body).toEqual<PostViewDto>({
      id: expect.any(String),
      title: dto.title,
      shortDescription: dto.shortDescription,
      content: dto.content,
      blogId: createdBlog.id,
      blogName: createdBlog.name,
      extendedLikesInfo: {
        likesCount: 0,
        dislikesCount: 0,
        myStatus: ReactionStatus.None,
        newestLikes: [],
      },
      createdAt: expect.stringMatching(
        /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/,
      ),
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–ª–æ–º –æ—Ç–≤–µ—Ç–∞
    const post: PostViewDto = await postsTestManager.getPostById(
      resCreatePosts.body.id,
    );
    expect(resCreatePosts.body).toEqual(post);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreatePosts.body,
        resCreatePosts.statusCode,
        'Test ‚Ññ1: BlogsAdminController - createPost() (POST: /sa/blogs/{blogId}/posts)',
      );
    }
  });

  it('should not create a post if the admin is not authenticated.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–≥, —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –Ω–µ–º—É –ø–æ—Å—Ç
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DTO –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    const [dto]: PostInputDto[] = TestDtoFactory.generatePostInputDto(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –±–µ–∑ –≤–∞–ª–∏–¥–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const resCreatePosts: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts`)
      .send(dto)
      .set('Authorization', 'incorrect login admin credentials')
      .expect(HttpStatus.UNAUTHORIZED);

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ—Å—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –ø—É—Å—Ç
    const posts: PaginatedViewDto<PostViewDto> =
      await postsTestManager.getAllPosts();

    expect(posts.items).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreatePosts.body,
        resCreatePosts.statusCode,
        'Test ‚Ññ2: BlogsAdminController - createPost() (POST: /sa/blogs/{blogId}/posts)',
      );
    }
  });

  it('should not create a post if the data in the request body is incorrect (an empty object is passed).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ—Å—Ç
    const [blog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞ ({}), –Ω–æ —Å –≤–∞–ª–∏–¥–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    const resCreatePosts: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/sa/blogs/${blog.id}/posts`)
      .send({})
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.BAD_REQUEST); // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 400, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∑–∞–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    expect(resCreatePosts.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message: 'content must be a string; Received value: undefined',
        },
        {
          field: 'shortDescription',
          message:
            'shortDescription must be a string; Received value: undefined',
        },
        {
          field: 'title',
          message: 'title must be a string; Received value: undefined',
        },
      ],
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ—Å—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç
    const posts: PaginatedViewDto<PostViewDto> =
      await postsTestManager.getAllPosts();

    expect(posts.items).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreatePosts.body,
        resCreatePosts.statusCode,
        'Test ‚Ññ3: BlogsAdminController - createPost() (POST: /sa/blogs/{blogId}/posts)',
      );
    }
  });

  it('should not create a post if the data in the request body is incorrect (title: empty line, shortDescription: empty line, content: empty line).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –ø–æ—Å—Ç
    const [blog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ (–ø—Ä–æ–±–µ–ª–∞–º–∏) –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    const resCreatePosts: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/sa/blogs/${blog.id}/posts`)
      .send({
        title: '   ',
        shortDescription: '   ',
        content: '   ',
      })
      .set('Authorization', adminCredentialsInBase64) // üî∏ –ê–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      .expect(HttpStatus.BAD_REQUEST); // üî∏ –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É 400, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ç–µ–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º —Ç—Ä–µ–º –ø–æ–ª—è–º
    expect(resCreatePosts.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message:
            'content must be longer than or equal to 1 characters; Received value: ',
        },
        {
          field: 'shortDescription',
          message:
            'shortDescription must be longer than or equal to 1 characters; Received value: ',
        },
        {
          field: 'title',
          message:
            'title must be longer than or equal to 1 characters; Received value: ',
        },
      ],
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ—Å—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    const posts: PaginatedViewDto<PostViewDto> =
      await postsTestManager.getAllPosts();

    expect(posts.items).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreatePosts.body,
        resCreatePosts.statusCode,
        'Test ‚Ññ4: BlogsAdminController - createPost() (POST: /sa/blogs/{blogId}/posts)',
      );
    }
  });

  it('should not create a post if the data in the request body is incorrect (title: exceeds max length, shortDescription: exceeds max length, content: exceeds max length).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –¥–æ–±–∞–≤–∏—Ç—å—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–æ—Å—Ç
    const [blog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ª–∏–º–∏—Ç—ã:
    // title: > 30 —Å–∏–º–≤–æ–ª–æ–≤, shortDescription: > 100 —Å–∏–º–≤–æ–ª–æ–≤, content: > 1000 —Å–∏–º–≤–æ–ª–æ–≤
    const title: string = TestUtils.generateRandomString(31);
    const shortDescription: string = TestUtils.generateRandomString(101);
    const content: string = TestUtils.generateRandomString(1001);

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const resCreatePosts: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/sa/blogs/${blog.id}/posts`)
      .send({
        title,
        shortDescription,
        content,
      })
      .set('Authorization', adminCredentialsInBase64) // üî∏ –ê–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      .expect(HttpStatus.BAD_REQUEST); // üî∏ –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É 400 ‚Äî –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –≤–µ—Ä–Ω—É–ª —Ç—Ä–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
    expect(resCreatePosts.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message: `content must be shorter than or equal to 1000 characters; Received value: ${content}`,
        },
        {
          field: 'shortDescription',
          message: `shortDescription must be shorter than or equal to 100 characters; Received value: ${shortDescription}`,
        },
        {
          field: 'title',
          message: `title must be shorter than or equal to 30 characters; Received value: ${title}`,
        },
      ],
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ—Å—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    const posts: PaginatedViewDto<PostViewDto> =
      await postsTestManager.getAllPosts();

    expect(posts.items).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreatePosts.body,
        resCreatePosts.statusCode,
        'Test ‚Ññ5: BlogsAdminController - createPost() (POST: /sa/blogs/{blogId}/posts)',
      );
    }
  });

  it('should not create a post if the data in the request body is incorrect (title: type number, shortDescription: type number, content: type number).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–≥, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–æ—Å—Ç
    const [blog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç, –≥–¥–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–∞–∫ —á–∏—Å–ª–∞ (number), –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∏
    const resCreatePosts: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/sa/blogs/${blog.id}/posts`)
      .send({
        title: 123,
        shortDescription: 123,
        content: 123,
      })
      .set('Authorization', adminCredentialsInBase64) // üî∏ –ê–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      .expect(HttpStatus.BAD_REQUEST); // üî∏ –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É 400 ‚Äî —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–≤–∞–ª–∏–¥–Ω—ã

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—é
    expect(resCreatePosts.body).toEqual({
      errorsMessages: [
        {
          field: 'content',
          message: `content must be a string; Received value: 123`,
        },
        {
          field: 'shortDescription',
          message: `shortDescription must be a string; Received value: 123`,
        },
        {
          field: 'title',
          message: `title must be a string; Received value: 123`,
        },
      ],
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ—Å—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω ‚Äî –±–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π
    const posts: PaginatedViewDto<PostViewDto> =
      await postsTestManager.getAllPosts();

    expect(posts.items).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreatePosts.body,
        resCreatePosts.statusCode,
        'Test ‚Ññ6: BlogsAdminController - createPost() (POST: /sa/blogs/{blogId}/posts)',
      );
    }
  });

  it('should return a 404 error if the blog for which the post is being created does not exist.', async () => {
    await blogsTestManager.createBlog(1);

    const [dto]: PostInputDto[] = TestDtoFactory.generatePostInputDto(1);

    const incorrectBlogId: string = '1000000';

    const resCreatePosts: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/sa/blogs/${incorrectBlogId}/posts`)
      .send({
        title: dto.title,
        shortDescription: dto.shortDescription,
        content: dto.content,
      })
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.NOT_FOUND);

    const posts: PaginatedViewDto<PostViewDto> =
      await postsTestManager.getAllPosts();

    expect(posts.items).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreatePosts.body,
        resCreatePosts.statusCode,
        'Test ‚Ññ7: BlogsAdminController - createPost() (POST: /sa/blogs/{blogId}/posts)',
      );
    }
  });
});
