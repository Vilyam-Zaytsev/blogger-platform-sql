import request, { Response } from 'supertest';
import { TestUtils } from '../../helpers/test.utils';
import { GLOBAL_PREFIX } from '../../../src/setup/global-prefix.setup';
import { TestLoggers } from '../../helpers/test.loggers';
import { AppTestManager } from '../../managers/app.test-manager';
import { AdminCredentials } from '../../types';
import { Server } from 'http';
import { BlogViewDto } from 'src/modules/bloggers-platform/blogs/api/view-dto/blog-view.dto';
import { BlogsTestManager } from '../../managers/blogs.test-manager';
import { HttpStatus } from '@nestjs/common';
import { PostViewDto } from '../../../src/modules/bloggers-platform/posts/api/view-dto/post-view.dto';
import { PostsTestManager } from '../../managers/posts.test-manager';
import { PaginatedViewDto } from '../../../src/core/dto/paginated.view-dto';

describe('BlogsAdminController - deletePost() (DELETE: /sa/blogs/:blogId/posts/:postId)', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let postsTestManager: PostsTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
    postsTestManager = new PostsTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should delete post, the admin is authenticated.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø–æ—Å—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –±–ª–æ–≥—É
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(
      1,
      createdBlog.id,
    );

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ –µ–≥–æ ID –∏ ID –±–ª–æ–≥–∞
    const resDeletePost: Response = await request(server)
      .delete(
        `/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts/${createdPost.id}`,
      )
      .set('Authorization', adminCredentialsInBase64) // üî∏ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      .expect(HttpStatus.NO_CONTENT); // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 204 No Content (—É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞)

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    const posts: PaginatedViewDto<PostViewDto> =
      await postsTestManager.getAllPosts();

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ—Å—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç
    expect(posts.items).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeletePost.body,
        resDeletePost.statusCode,
        'Test ‚Ññ1: BlogsAdminController - deletePost() (DELETE: /sa/blogs/:blogId/posts/:postId)',
      );
    }
  });

  it('should not delete blog, the admin is not authenticated.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø–æ—Å—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –±–ª–æ–≥—É
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(
      1,
      createdBlog.id,
    );

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const resDeletePost: Response = await request(server)
      .delete(
        `/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts/${createdPost.id}`,
      )
      .set('Authorization', 'incorrect admin credentials') // üî∏ –ü–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      .expect(HttpStatus.UNAUTHORIZED); // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 401 Unauthorized

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –ø–æ –µ–≥–æ ID, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω
    const post: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
    );

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º (—É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ)
    expect(post).toEqual(createdPost);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeletePost.body,
        resDeletePost.statusCode,
        'Test ‚Ññ2: BlogsAdminController - deletePost() (DELETE: /sa/blogs/:blogId/posts/:postId)',
      );
    }
  });

  it('should return a 404 error if the blog was not found by the passed ID in the parameters.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø–æ—Å—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –±–ª–æ–≥—É
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(
      1,
      createdBlog.id,
    );

    // üîª –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π blogId
    const incorrectBlogId: string = '1000000';

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç, —É–∫–∞–∑–∞–≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π blogId
    const resDeletePost: Response = await request(server)
      .delete(
        `/${GLOBAL_PREFIX}/sa/blogs/${incorrectBlogId}/posts/${createdPost.id}`,
      )
      .set('Authorization', adminCredentialsInBase64) // üî∏ –ü–µ—Ä–µ–¥–∞—ë–º –≤–∞–ª–∏–¥–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      .expect(HttpStatus.NOT_FOUND); // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 404 Not Found

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –ø–æ ID, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const post: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
    );

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –æ—Å—Ç–∞–ª—Å—è –≤ –±–∞–∑–µ –∏ –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω
    expect(post).toEqual(createdPost);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeletePost.body,
        resDeletePost.statusCode,
        'Test ‚Ññ3: BlogsAdminController - deletePost() (DELETE: /sa/blogs/:blogId/posts/:postId)',
      );
    }
  });

  it('should return a 404 error if the post was not found by the passed identifier in the parameters.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);

    // üîª –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø–æ—Å—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –±–ª–æ–≥—É
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(
      1,
      createdBlog.id,
    );

    // üîª –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π postId
    const incorrectPostId: string = '1000000';

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É postId
    const resDeletePost: Response = await request(server)
      .delete(
        `/${GLOBAL_PREFIX}/sa/blogs/${createdBlog.id}/posts/${incorrectPostId}`,
      )
      .set('Authorization', adminCredentialsInBase64) // üî∏ –ü–µ—Ä–µ–¥–∞—ë–º –≤–∞–ª–∏–¥–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      .expect(HttpStatus.NOT_FOUND); // üî∏ –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 404 Not Found

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –ø–æ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É ID, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –æ—Å—Ç–∞–ª—Å—è –≤ –±–∞–∑–µ
    const post: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
    );

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω
    expect(post).toEqual(createdPost);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeletePost.body,
        resDeletePost.statusCode,
        'Test ‚Ññ4: BlogsAdminController - deletePost() (DELETE: /sa/blogs/:blogId/posts/:postId)',
      );
    }
  });

  it('should return a 403 error if the post does not belong to the blog specified in the parameters.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±–ª–æ–≥–∞
    const [createdBlog_1, createdBlog_2]: BlogViewDto[] =
      await blogsTestManager.createBlog(2);

    // üîª –°–æ–∑–¥–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –ø–æ—Å—Ç—É –≤ –∫–∞–∂–¥–æ–º –∏–∑ –±–ª–æ–≥–æ–≤
    const [createdPost_1]: PostViewDto[] = await postsTestManager.createPost(
      1,
      createdBlog_1.id,
    );
    const [createdPost_2]: PostViewDto[] = await postsTestManager.createPost(
      1,
      createdBlog_2.id,
    );

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å post_1, —É–∫–∞–∑–∞–≤ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ blogId - blog_2.id
    const resDeletePost_1: Response = await request(server)
      .delete(
        `/${GLOBAL_PREFIX}/sa/blogs/${createdBlog_2.id}/posts/${createdPost_1.id}`,
      )
      .set('Authorization', adminCredentialsInBase64) // üî∏ –ü–µ—Ä–µ–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      .expect(HttpStatus.FORBIDDEN); // üî∏ –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É 403 Forbidden (–ø–æ—Å—Ç –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–ª–æ–≥—É)

    // üîª –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ post_1 –æ—Å—Ç–∞–ª—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ
    const post_1: PostViewDto = await postsTestManager.getPostById(
      createdPost_1.id,
    );
    expect(post_1).toEqual(createdPost_1);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å post_2, —É–∫–∞–∑–∞–≤ blogId –æ—Ç blog_1
    await request(server)
      .delete(
        `/${GLOBAL_PREFIX}/sa/blogs/${createdBlog_1.id}/posts/${createdPost_2.id}`,
      )
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.FORBIDDEN); // üî∏ –û–∂–∏–¥–∞–µ–º —Ç—É –∂–µ –æ—à–∏–±–∫—É 403 Forbidden

    // üîª –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ post_2 –æ—Å—Ç–∞–ª—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ
    const post_2: PostViewDto = await postsTestManager.getPostById(
      createdPost_2.id,
    );
    expect(post_2).toEqual(createdPost_2);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeletePost_1.body,
        resDeletePost_1.statusCode,
        'Test ‚Ññ5: BlogsAdminController - deletePost() (DELETE: /sa/blogs/:blogId/posts/:postId)',
      );
    }
  });
});
