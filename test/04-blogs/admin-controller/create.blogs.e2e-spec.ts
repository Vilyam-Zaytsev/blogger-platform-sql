import request, { Response } from 'supertest';
import { TestUtils } from '../../helpers/test.utils';
import { TestDtoFactory } from '../../helpers/test.dto-factory';
import { GLOBAL_PREFIX } from '../../../src/setup/global-prefix.setup';
import { TestLoggers } from '../../helpers/test.loggers';
import { AppTestManager } from '../../managers/app.test-manager';
import { AdminCredentials } from '../../types';
import { Server } from 'http';
import { BlogInputDto } from '../../../src/modules/bloggers-platform/blogs/api/input-dto/blog-input.dto';
import { BlogViewDto } from 'src/modules/bloggers-platform/blogs/api/view-dto/blog-view.dto';
import { HttpStatus } from '@nestjs/common';
import { BlogsTestManager } from '../../managers/blogs.test-manager';
import { PaginatedViewDto } from '../../../src/core/dto/paginated.view-dto';

describe('BlogsAdminController - createBlog() (POST: /sa/blogs)', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should create a new blog if the admin is authenticated.', async () => {
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (DTO) –¥–ª—è –±–ª–æ–≥–∞
    const [dto]: BlogInputDto[] = TestDtoFactory.generateBlogInputDto(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–≥–∞ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const resCreateBlog: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/sa/blogs`)
      .send(dto)
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.CREATED);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    expect(resCreateBlog.body).toEqual({
      id: expect.any(String),
      name: dto.name,
      description: dto.description,
      websiteUrl: dto.websiteUrl,
      createdAt: expect.stringMatching(
        /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/,
      ),
      isMembership: false,
    });

    // üîª –î–µ–ª–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å /sa/blogs/{id}, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±–ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
    const createdBlog: BlogViewDto = await blogsTestManager.getById(
      resCreateBlog.body.id,
    );

    // üî∏ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ GET-–∑–∞–ø—Ä–æ—Å–∞
    expect(resCreateBlog.body).toEqual(createdBlog);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreateBlog.body,
        resCreateBlog.statusCode,
        'Test ‚Ññ1: BlogsAdminController - createBlog() (POST: /sa/blogs)',
      );
    }
  });

  it('should not create a blog if the admin is not authenticated.', async () => {
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (DTO) –¥–ª—è –±–ª–æ–≥–∞
    const [dto]: BlogInputDto[] = TestDtoFactory.generateBlogInputDto(1);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–≥ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const resCreateBlog: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/sa/blogs`)
      .send({
        name: dto.name,
        description: dto.description,
        websiteUrl: dto.websiteUrl,
      })
      .set('Authorization', 'incorrect admin credentials') // –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫—Ä–µ–¥–µ–Ω—à–ª—ã
      .expect(HttpStatus.UNAUTHORIZED);

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ GET-–∑–∞–ø—Ä–æ—Å
    const { items: blogs }: PaginatedViewDto<BlogViewDto> =
      await blogsTestManager.getAll();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª–æ–≥ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω
    expect(blogs).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreateBlog.body,
        resCreateBlog.statusCode,
        'Test ‚Ññ2: BlogsAdminController - createBlog() (POST: /sa/blogs)',
      );
    }
  });

  it('should not create a blog if the data in the request body is incorrect (an empty object is passed).', async () => {
    // üîª –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–≥ —Å –ø—É—Å—Ç—ã–º –æ–±—ä–µ–∫—Ç–æ–º –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    const resCreateBlog: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/sa/blogs`)
      .send({})
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    expect(resCreateBlog.body).toEqual({
      errorsMessages: [
        {
          field: 'websiteUrl',
          message:
            'websiteUrl must match /^https:\\/\\/([a-zA-Z0-9_-]+\\.)+[a-zA-Z0-9_-]+(\\/[a-zA-Z0-9_-]+)*\\/?$/ regular expression; Received value: undefined',
        },
        {
          field: 'description',
          message: 'description must be a string; Received value: undefined',
        },
        {
          field: 'name',
          message: 'name must be a string; Received value: undefined',
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ GET-–∑–∞–ø—Ä–æ—Å
    const { items: blogs }: PaginatedViewDto<BlogViewDto> =
      await blogsTestManager.getAll();

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–ª–æ–≥ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω
    expect(blogs).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreateBlog.body,
        resCreateBlog.statusCode,
        'Test ‚Ññ3: BlogsAdminController - createBlog() (POST: /sa/blogs)',
      );
    }
  });

  it('should not create a blog if the data in the request body is incorrect (name: empty line, description: empty line, website Url: empty line).', async () => {
    // üîª –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–≥, –ø–µ—Ä–µ–¥–∞–≤ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏, —Å–æ—Å—Ç–æ—è—â–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    const resCreateBlog: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/sa/blogs`)
      .send({
        name: '   ',
        description: '   ',
        websiteUrl: '   ',
      })
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    expect(resCreateBlog.body).toEqual({
      errorsMessages: [
        {
          field: 'websiteUrl',
          message:
            'websiteUrl must match /^https:\\/\\/([a-zA-Z0-9_-]+\\.)+[a-zA-Z0-9_-]+(\\/[a-zA-Z0-9_-]+)*\\/?$/ regular expression; Received value: ',
        },
        {
          field: 'description',
          message:
            'description must be longer than or equal to 1 characters; Received value: ',
        },
        {
          field: 'name',
          message:
            'name must be longer than or equal to 1 characters; Received value: ',
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ GET-–∑–∞–ø—Ä–æ—Å
    const { items: blogs }: PaginatedViewDto<BlogViewDto> =
      await blogsTestManager.getAll();

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–ª–æ–≥ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω
    expect(blogs).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreateBlog.body,
        resCreateBlog.statusCode,
        'Test ‚Ññ4: BlogsAdminController - createBlog() (POST: /sa/blogs)',
      );
    }
  });

  it('should not create a blog if the data in the request body is incorrect (name: exceeds max length, description: exceeds max length, website Url: exceeds max length).', async () => {
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
    const name: string = TestUtils.generateRandomString(16);
    const description: string = TestUtils.generateRandomString(501);
    const websiteUrl: string = TestUtils.generateRandomString(101);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–≥ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const resCreateBlog: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/sa/blogs`)
      .send({
        name,
        description,
        websiteUrl,
      })
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
    expect(resCreateBlog.body).toEqual({
      errorsMessages: [
        {
          field: 'websiteUrl',
          message:
            'websiteUrl must match /^https:\\/\\/([a-zA-Z0-9_-]+\\.)+[a-zA-Z0-9_-]+(\\/[a-zA-Z0-9_-]+)*\\/?$/' +
            ` regular expression; Received value: ${websiteUrl}`,
        },
        {
          field: 'description',
          message: `description must be shorter than or equal to 500 characters; Received value: ${description}`,
        },
        {
          field: 'name',
          message: `name must be shorter than or equal to 15 characters; Received value: ${name}`,
        },
      ],
    });

    // üîª –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ GET-–∑–∞–ø—Ä–æ—Å
    const { items: blogs }: PaginatedViewDto<BlogViewDto> =
      await blogsTestManager.getAll();

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–ª–æ–≥ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω
    expect(blogs).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreateBlog.body,
        resCreateBlog.statusCode,
        'Test ‚Ññ5: BlogsAdminController - createBlog() (POST: /sa/blogs)',
      );
    }
  });

  it('should not create a blog if the data in the request body is incorrect (name: type number, description: type number, website Url: type number).', async () => {
    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
    const resCreateBlog: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/sa/blogs`)
      .send({
        name: 123,
        description: 123,
        websiteUrl: 123,
      })
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
    expect(resCreateBlog.body).toEqual({
      errorsMessages: [
        {
          field: 'websiteUrl',
          message:
            'websiteUrl must match /^https:\\/\\/([a-zA-Z0-9_-]+\\.)+[a-zA-Z0-9_-]+(\\/[a-zA-Z0-9_-]+)*\\/?$/' +
            ` regular expression; Received value: 123`,
        },
        {
          field: 'description',
          message: `description must be a string; Received value: 123`,
        },
        {
          field: 'name',
          message: `name must be a string; Received value: 123`,
        },
      ],
    });

    // üîª –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ GET-–∑–∞–ø—Ä–æ—Å
    const { items: blogs }: PaginatedViewDto<BlogViewDto> =
      await blogsTestManager.getAll();

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–ª–æ–≥ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω
    expect(blogs).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreateBlog.body,
        resCreateBlog.statusCode,
        'Test ‚Ññ6: BlogsAdminController - createBlog() (POST: /sa/blogs)',
      );
    }
  });

  it('should not create a blog if the data in the request body is incorrect (invalid url).', async () => {
    // üîª –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–ª–æ–≥–∞, –Ω–æ –ø–æ—Ä—Ç–∏–º –ø–æ–ª–µ websiteUrl
    const [dto]: BlogInputDto[] = TestDtoFactory.generateBlogInputDto(1);
    dto.websiteUrl = 'incorrect websiteUrl';

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–≥ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º URL
    const resCreateBlog: Response = await request(server)
      .post(`/${GLOBAL_PREFIX}/sa/blogs`)
      .send(dto)
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø–æ websiteUrl
    expect(resCreateBlog.body).toEqual({
      errorsMessages: [
        {
          field: 'websiteUrl',
          message:
            'websiteUrl must match /^https:\\/\\/([a-zA-Z0-9_-]+\\.)+[a-zA-Z0-9_-]+(\\/[a-zA-Z0-9_-]+)*\\/?$/' +
            ` regular expression; Received value: ${dto.websiteUrl}`,
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ GET-–∑–∞–ø—Ä–æ—Å
    const { items: blogs }: PaginatedViewDto<BlogViewDto> =
      await blogsTestManager.getAll();

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–ª–æ–≥ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω
    expect(blogs).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resCreateBlog.body,
        resCreateBlog.statusCode,
        'Test ‚Ññ7: BlogsAdminController - createBlog() (POST: /sa/blogs)',
      );
    }
  });
});
