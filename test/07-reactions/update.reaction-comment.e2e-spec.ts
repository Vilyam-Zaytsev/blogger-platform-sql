import request, { Response } from 'supertest';
import { TestUtils } from '../helpers/test.utils';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials, TestResultLogin } from '../types';
import { Server } from 'http';
import { BlogsTestManager } from '../managers/blogs.test-manager';
import { PostViewDto } from '../../src/modules/bloggers-platform/posts/api/view-dto/post.view-dto';
import { PostsTestManager } from '../managers/posts.test-manager';
import { UsersTestManager } from '../managers/users.test-manager';
import { HttpStatus } from '@nestjs/common';
import { PaginatedViewDto } from '../../src/core/dto/paginated.view-dto';
import { Filter } from '../helpers/filter';
import { GetPostsQueryParams } from '../../src/modules/bloggers-platform/posts/api/input-dto/get-posts-query-params.input-dto';
import { UserAccountsConfig } from '../../src/modules/user-accounts/config/user-accounts.config';
import { JwtService } from '@nestjs/jwt';
import { CommentsTestManager } from '../managers/comments.test-manager';
import { CommentViewDto } from '../../src/modules/bloggers-platform/comments/api/view-dto/comment-view.dto';
import { CoreConfig } from '../../src/core/core.config';
import { ConfigService } from '@nestjs/config';
import { ACCESS_TOKEN_STRATEGY_INJECT_TOKEN } from '../../src/modules/user-accounts/auth/constants/auth-tokens.inject-constants';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';
import { SortDirection } from '../../src/core/dto/base.query-params.input-dto';
import { BlogViewDto } from '../../src/modules/bloggers-platform/blogs/api/view-dto/blog.view-dto';
import { ReactionStatus } from '../../src/modules/bloggers-platform/reactions/domain/entities/reaction.entity';

describe('CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let postsTestManager: PostsTestManager;
  let commentsTestManager: CommentsTestManager;
  let usersTestManager: UsersTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init((moduleBuilder) =>
      moduleBuilder
        .overrideProvider(CoreConfig)
        .useFactory({
          factory: (configService: ConfigService<any, true>) => {
            const coreConfig = new CoreConfig(configService);
            coreConfig.throttleLimit = 10000;
            coreConfig.throttleTtl = 15;

            return coreConfig;
          },
          inject: [ConfigService],
        })
        .overrideProvider(ACCESS_TOKEN_STRATEGY_INJECT_TOKEN)
        .useFactory({
          factory: (userAccountsConfig: UserAccountsConfig) => {
            return new JwtService({
              secret: userAccountsConfig.accessTokenSecret,
              signOptions: { expiresIn: '3s' },
            });
          },
          inject: [UserAccountsConfig],
        }),
    );

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
    postsTestManager = new PostsTestManager(server, adminCredentialsInBase64);
    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
    commentsTestManager = new CommentsTestManager(server);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['migrations']);

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should update the user\'s "like" reaction and increase the number of similar reactions(‚Ññ1).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ª–∞–π–∫–∞ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
    // üîª –û–∂–∏–¥–∞–µ—Ç 204 No Content
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Like })
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫–∏, –¥–∏–∑–ª–∞–π–∫–∏ –∏ myStatus (None)
    const foundComment_1: CommentViewDto = await commentsTestManager.getById(createdComment.id);

    expect(foundComment_1.likesInfo).toEqual({
      likesCount: 1,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫–∏ –∏ myStatus (Like)
    const foundComment_2: CommentViewDto = await commentsTestManager.getById(
      createdComment.id,
      resultLogin.authTokens.accessToken,
    );

    expect(foundComment_2.likesInfo).toEqual({
      likesCount: 1,
      dislikesCount: 0,
      myStatus: ReactionStatus.Like,
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ1: CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)',
      );
    }
  });

  it('should update the user\'s "like" reaction and increase the number of similar reactions(‚Ññ2).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(2);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –æ–±–æ–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const resultLogin: TestResultLogin[] = await usersTestManager.login(
      createdUsers.map((u) => u.login),
    );
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin[0].authTokens.accessToken,
    );

    // üîª –ö–∞–∂–¥—ã–π –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
    const resUpdateReaction: Response[] = [];

    for (let i = 0; i < resultLogin.length; i++) {
      const res: Response = await request(server)
        .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
        .set('Authorization', `Bearer ${resultLogin[i].authTokens.accessToken}`)
        .send({ likeStatus: ReactionStatus.Like })
        .expect(HttpStatus.NO_CONTENT);

      resUpdateReaction.push(res);
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤, –¥–∏–∑–ª–∞–π–∫–æ–≤ –∏ myStatus
    const foundComment_1: CommentViewDto = await commentsTestManager.getById(createdComment.id);

    expect(foundComment_1.likesInfo).toEqual({
      likesCount: 2,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
    });

    // üîª –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º myStatus –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    for (let i = 0; i < resultLogin.length; i++) {
      const foundComment: CommentViewDto = await commentsTestManager.getById(
        createdComment.id,
        resultLogin[i].authTokens.accessToken,
      );

      expect(foundComment.likesInfo).toEqual({
        likesCount: 2,
        dislikesCount: 0,
        myStatus: ReactionStatus.Like,
      });
    }

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction[0].body,
        resUpdateReaction[0].statusCode,
        'Test ‚Ññ2: CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)',
      );
    }
  });

  it('should update the user\'s "like" reaction and increase the number of similar reactions(‚Ññ3).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º —Ç—Ä—ë—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(3);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –≤—Å–µ–º–∏ —Ç—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const resultLogin: TestResultLogin[] = await usersTestManager.login(
      createdUsers.map((u) => u.login),
    );
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin[0].authTokens.accessToken,
    );

    // üîª –ö–∞–∂–¥—ã–π –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
    const resUpdateReaction: Response[] = [];

    for (let i = 0; i < resultLogin.length; i++) {
      const res: Response = await request(server)
        .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
        .set('Authorization', `Bearer ${resultLogin[i].authTokens.accessToken}`)
        .send({ likeStatus: ReactionStatus.Like })
        .expect(HttpStatus.NO_CONTENT);

      resUpdateReaction.push(res);
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤, –¥–∏–∑–ª–∞–π–∫–æ–≤ –∏ myStatus
    const foundComment_1: CommentViewDto = await commentsTestManager.getById(createdComment.id);

    expect(foundComment_1.likesInfo).toEqual({
      likesCount: 3,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
    });

    // üîª –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º myStatus –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    for (let i = 0; i < resultLogin.length; i++) {
      const foundComment: CommentViewDto = await commentsTestManager.getById(
        createdComment.id,
        resultLogin[i].authTokens.accessToken,
      );

      expect(foundComment.likesInfo).toEqual({
        likesCount: 3,
        dislikesCount: 0,
        myStatus: ReactionStatus.Like,
      });
    }

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction[0].body,
        resUpdateReaction[0].statusCode,
        'Test ‚Ññ3: CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)',
      );
    }
  });

  it('should update the user\'s "like" reaction and increase the number of similar reactions(‚Ññ4).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º —á–µ—Ç—ã—Ä—ë—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(4);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –≤—Å–µ–º–∏ —á–µ—Ç—ã—Ä—å–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const resultLogin: TestResultLogin[] = await usersTestManager.login(
      createdUsers.map((u) => u.login),
    );
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin[0].authTokens.accessToken,
    );

    // üîª –ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞–≤—è—Ç –ª–∞–π–∫–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
    for (let i = 0; i < resultLogin.length - 1; i++) {
      await request(server)
        .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
        .set('Authorization', `Bearer ${resultLogin[i].authTokens.accessToken}`)
        .send({ likeStatus: ReactionStatus.Like })
        .expect(HttpStatus.NO_CONTENT);
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫–∏, –¥–∏–∑–ª–∞–π–∫–∏, myStatus
    const foundComment_1: CommentViewDto = await commentsTestManager.getById(createdComment.id);

    expect(foundComment_1.likesInfo).toEqual({
      likesCount: 3,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    for (let i = 0; i < resultLogin.length - 1; i++) {
      const foundComment: CommentViewDto = await commentsTestManager.getById(
        createdComment.id,
        resultLogin[i].authTokens.accessToken,
      );

      expect(foundComment.likesInfo).toEqual({
        likesCount: 3,
        dislikesCount: 0,
        myStatus: ReactionStatus.Like,
      });
    }

    // üîª –ß–µ—Ç–≤—ë—Ä—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
    const resUpdateReaction_2: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin[3].authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Like })
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫–∏ –∏ myStatus
    const foundComment: CommentViewDto = await commentsTestManager.getById(
      createdComment.id,
      resultLogin[3].authTokens.accessToken,
    );

    expect(foundComment.likesInfo).toEqual({
      likesCount: 4,
      dislikesCount: 0,
      myStatus: ReactionStatus.Like,
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction_2.body,
        resUpdateReaction_2.statusCode,
        'Test ‚Ññ4: CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)',
      );
    }
  });

  it('should update the user\'s "dislike" reaction and increase the number of similar reactions(‚Ññ1).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥ –∏ –æ–¥–∏–Ω –ø–æ—Å—Ç
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –Ω–∏–º
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º accessToken –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ "Dislike"
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Dislike })
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ 0, –¥–∏–∑–ª–∞–π–∫–æ–≤ 1, –∞ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (None)
    const foundComment_1: CommentViewDto = await commentsTestManager.getById(createdComment.id);

    expect(foundComment_1.likesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 1,
      myStatus: ReactionStatus.None,
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å, –Ω–æ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "Dislike"
    const foundComment_2: CommentViewDto = await commentsTestManager.getById(
      createdComment.id,
      resultLogin.authTokens.accessToken,
    );

    expect(foundComment_2.likesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 1,
      myStatus: ReactionStatus.Dislike,
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ5: CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)',
      );
    }
  });

  it('should update the user\'s "dislike" reaction and increase the number of similar reactions(‚Ññ2).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥ –∏ –æ–¥–∏–Ω –ø–æ—Å—Ç
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –Ω–∏–º–∏
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(2);
    const resultLogin: TestResultLogin[] = await usersTestManager.login(
      createdUsers.map((u) => u.login),
    );
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É —Å accessToken –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin[0].authTokens.accessToken,
    );

    // üîª –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é "Dislike" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const resUpdateReaction: Response[] = [];

    for (let i = 0; i < resultLogin.length; i++) {
      const res: Response = await request(server)
        .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
        .set('Authorization', `Bearer ${resultLogin[i].authTokens.accessToken}`)
        .send({ likeStatus: ReactionStatus.Dislike })
        .expect(HttpStatus.NO_CONTENT);

      resUpdateReaction.push(res);
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∑–ª–∞–π–∫–æ–≤ —Å—Ç–∞–ª–æ 2, –ª–∞–π–∫–æ–≤ 0, —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - None
    const foundComment_1: CommentViewDto = await commentsTestManager.getById(createdComment.id);

    expect(foundComment_1.likesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 2,
      myStatus: ReactionStatus.None,
    });

    // üîª –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å "Dislike"
    for (let i = 0; i < resultLogin.length; i++) {
      const foundComment: CommentViewDto = await commentsTestManager.getById(
        createdComment.id,
        resultLogin[i].authTokens.accessToken,
      );

      expect(foundComment.likesInfo).toEqual({
        likesCount: 0,
        dislikesCount: 2,
        myStatus: ReactionStatus.Dislike,
      });
    }

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction[0].body,
        resUpdateReaction[0].statusCode,
        'Test ‚Ññ6: CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)',
      );
    }
  });

  it('should update "None" to "Like", "Like" to "Dislike", "Dislike to "Like", "Like" to "None".', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥ –∏ –æ–¥–∏–Ω –ø–æ—Å—Ç
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –Ω–∏–º
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º accessToken –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —Å "None" –Ω–∞ "Like" –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Like })
      .expect(HttpStatus.NO_CONTENT);

    const foundComment_1: CommentViewDto = await commentsTestManager.getById(
      createdComment.id,
      resultLogin.authTokens.accessToken,
    );

    expect(foundComment_1.likesInfo).toEqual({
      likesCount: 1,
      dislikesCount: 0,
      myStatus: ReactionStatus.Like,
    });

    // üîª –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —Å "Like" –Ω–∞ "Dislike" –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∑–ª–∞–π–∫–æ–≤
    await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Dislike })
      .expect(HttpStatus.NO_CONTENT);

    const foundComment_2: CommentViewDto = await commentsTestManager.getById(
      createdComment.id,
      resultLogin.authTokens.accessToken,
    );

    expect(foundComment_2.likesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 1,
      myStatus: ReactionStatus.Dislike,
    });

    // üîª –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —Å "Dislike" –Ω–∞ "Like" –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤
    await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Like })
      .expect(HttpStatus.NO_CONTENT);

    const foundComment_3: CommentViewDto = await commentsTestManager.getById(
      createdComment.id,
      resultLogin.authTokens.accessToken,
    );

    expect(foundComment_3.likesInfo).toEqual({
      likesCount: 1,
      dislikesCount: 0,
      myStatus: ReactionStatus.Like,
    });

    // üîª –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —Å "Like" –Ω–∞ "None" –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–æ–≤
    await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.None })
      .expect(HttpStatus.NO_CONTENT);

    const foundComment_4: CommentViewDto = await commentsTestManager.getById(
      createdComment.id,
      resultLogin.authTokens.accessToken,
    );

    expect(foundComment_4.likesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ7: CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)',
      );
    }
  });

  it('1. The first five posts: user 1 - puts likes; user 2 - puts dislikes. 2. The following five posts: user 1 - dislikes; user 2 - likes.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥ –∏ –æ–¥–∏–Ω –ø–æ—Å—Ç
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –Ω–∏–º–∏
    const [createUser1, createUser2]: UserViewDto[] = await usersTestManager.createUser(2);
    const resultLogins: TestResultLogin[] = await usersTestManager.login([
      createUser1.login,
      createUser2.login,
    ]);
    // üîª –°–æ–∑–¥–∞—ë–º 10 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const createdComments: CommentViewDto[] = await commentsTestManager.createComment(
      10,
      createdPost.id,
      resultLogins[0].authTokens.accessToken,
    );

    // üîª –ü–µ—Ä–≤—ã–µ 5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: user 1 —Å—Ç–∞–≤–∏—Ç Like, user 2 —Å—Ç–∞–≤–∏—Ç Dislike
    // üîª –°–ª–µ–¥—É—é—â–∏–µ 5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: user 1 —Å—Ç–∞–≤–∏—Ç Dislike, user 2 —Å—Ç–∞–≤–∏—Ç Like
    for (let i = 0; i < createdComments.length; i++) {
      if (createdComments.length / 2 > i) {
        await request(server)
          .put(`/${GLOBAL_PREFIX}/comments/${createdComments[i].id}/like-status`)
          .set('Authorization', `Bearer ${resultLogins[0].authTokens.accessToken}`)
          .send({ likeStatus: ReactionStatus.Like })
          .expect(HttpStatus.NO_CONTENT);

        await request(server)
          .put(`/${GLOBAL_PREFIX}/comments/${createdComments[i].id}/like-status`)
          .set('Authorization', `Bearer ${resultLogins[1].authTokens.accessToken}`)
          .send({ likeStatus: ReactionStatus.Dislike })
          .expect(HttpStatus.NO_CONTENT);
      } else {
        await request(server)
          .put(`/${GLOBAL_PREFIX}/comments/${createdComments[i].id}/like-status`)
          .set('Authorization', `Bearer ${resultLogins[0].authTokens.accessToken}`)
          .send({ likeStatus: ReactionStatus.Dislike })
          .expect(HttpStatus.NO_CONTENT);

        await request(server)
          .put(`/${GLOBAL_PREFIX}/comments/${createdComments[i].id}/like-status`)
          .set('Authorization', `Bearer ${resultLogins[1].authTokens.accessToken}`)
          .send({ likeStatus: ReactionStatus.Like })
          .expect(HttpStatus.NO_CONTENT);
      }
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ —Å—á—ë—Ç—á–∏–∫–∏ –≤ –ø–µ—Ä–≤—ã—Ö 5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
    const foundComments_1: PaginatedViewDto<CommentViewDto> = await commentsTestManager.getAll(
      createdPost.id,
      {},
      resultLogins[0].authTokens.accessToken,
    );

    const query: GetPostsQueryParams = new GetPostsQueryParams();
    query.sortDirection = SortDirection.Ascending;
    const sortedComments: CommentViewDto[] = new Filter<CommentViewDto>(foundComments_1.items)
      .sort({ [query.sortBy]: query.sortDirection })
      .getResult();

    for (let i = 0; i < sortedComments.length; i++) {
      if (sortedComments.length / 2 > i) {
        expect(sortedComments[i].likesInfo).toEqual({
          likesCount: 1,
          dislikesCount: 1,
          myStatus: ReactionStatus.Like,
        });
      }
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏ —Å—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∏ —Å–ª–µ–¥—É—é—â–∏—Ö 5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const foundComments_2: PaginatedViewDto<CommentViewDto> = await commentsTestManager.getAll(
      createdPost.id,
      {},
      resultLogins[1].authTokens.accessToken,
    );

    query.sortDirection = SortDirection.Ascending;
    const sortedComments_2: CommentViewDto[] = new Filter<CommentViewDto>(foundComments_2.items)
      .sort({ [query.sortBy]: query.sortDirection })
      .getResult();

    for (let i = 0; i < sortedComments_2.length; i++) {
      if (sortedComments_2.length / 2 > i) {
        expect(sortedComments_2[i].likesInfo).toEqual({
          likesCount: 1,
          dislikesCount: 1,
          myStatus: ReactionStatus.Dislike,
        });
      } else {
        expect(sortedComments_2[i].likesInfo).toEqual({
          likesCount: 1,
          dislikesCount: 1,
          myStatus: ReactionStatus.Like,
        });
      }
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∞ —Å—á—ë—Ç—á–∏–∫–∏ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤ —Ä–∞–≤–Ω—ã 1
    const foundComments_3: PaginatedViewDto<CommentViewDto> = await commentsTestManager.getAll(
      createdPost.id,
    );

    query.sortDirection = SortDirection.Ascending;
    const sortedComments_3: CommentViewDto[] = new Filter<CommentViewDto>(foundComments_3.items)
      .sort({ [query.sortBy]: query.sortDirection })
      .getResult();

    for (let i = 0; i < sortedComments_3.length; i++) {
      if (sortedComments_3.length / 2 > i) {
        expect(sortedComments_3[i].likesInfo).toEqual({
          likesCount: 1,
          dislikesCount: 1,
          myStatus: ReactionStatus.None,
        });
      } else {
        expect(sortedComments_3[i].likesInfo).toEqual({
          likesCount: 1,
          dislikesCount: 1,
          myStatus: ReactionStatus.None,
        });
      }
    }

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        {},
        HttpStatus.NO_CONTENT,
        'Test ‚Ññ8: CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)',
      );
    }
  });

  it('1. must create ten users. 2. All ten users like one post. 3.Then each user changes the like to dislike reaction. newestLikes should change along with this.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥ –∏ –æ–¥–∏–Ω –ø–æ—Å—Ç
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –¥–µ—Å—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –Ω–∏–º–∏
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(10);
    const resultLogins: TestResultLogin[] = await usersTestManager.login(
      createdUsers.map((user) => user.login),
    );
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogins[0].authTokens.accessToken,
    );

    // üîª –í—Å–µ –¥–µ—Å—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞–≤—è—Ç —Ä–µ–∞–∫—Ü–∏—é "Like" –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    for (let i = 0; i < resultLogins.length; i++) {
      await request(server)
        .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
        .set('Authorization', `Bearer ${resultLogins[i].authTokens.accessToken}`)
        .send({ likeStatus: ReactionStatus.Like })
        .expect(HttpStatus.NO_CONTENT);
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∞–π–∫–æ–≤ —Å—Ç–∞–ª–æ 10, –¥–∏–∑–ª–∞–π–∫–æ–≤ 0, —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "None"
    const foundComment: CommentViewDto = await commentsTestManager.getById(createdComment.id);

    expect(foundComment.likesInfo).toEqual({
      likesCount: 10,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
    });

    // üîª –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç —Å–≤–æ—é —Ä–µ–∞–∫—Ü–∏—é —Å "Like" –Ω–∞ "Dislike"
    // üîª –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—á—ë—Ç—á–∏–∫–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (let i = resultLogins.length - 1; i >= 0; i--) {
      await request(server)
        .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
        .set('Authorization', `Bearer ${resultLogins[i].authTokens.accessToken}`)
        .send({ likeStatus: ReactionStatus.Dislike })
        .expect(HttpStatus.NO_CONTENT);

      const foundComment: CommentViewDto = await commentsTestManager.getById(
        createdComment.id,
        resultLogins[i].authTokens.accessToken,
      );

      const dislikesCount: number = resultLogins.length - i;

      expect(foundComment.likesInfo).toEqual({
        likesCount: 10 - dislikesCount,
        dislikesCount,
        myStatus: ReactionStatus.Dislike,
      });
    }

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        {},
        HttpStatus.NO_CONTENT,
        'Test ‚Ññ9: CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)',
      );
    }
  });

  it('should return a 401 if the user is not logged in.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥ –∏ –æ–¥–∏–Ω –ø–æ—Å—Ç
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –Ω–∏–º
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º accessToken –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ–∂–∏–¥–∞–µ–º 401 Unauthorized
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
      .set('Authorization', `Bearer incorrect token`)
      .send({ likeStatus: ReactionStatus.Like })
      .expect(HttpStatus.UNAUTHORIZED);

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤ –Ω–µ—Ç, —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "None"
    const foundComment: CommentViewDto = await commentsTestManager.getById(createdComment.id);

    expect(foundComment.likesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ10: CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)',
      );
    }
  });

  it('should return the value 404 if the post the user is trying to review does not exist.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –Ω–∏–º
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const incorrectCommentId: string = '1000000';

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º, –Ω–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º id –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –æ–∂–∏–¥–∞–µ–º 404 Not Found
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${incorrectCommentId}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Like })
      .expect(HttpStatus.NOT_FOUND);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ11: CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)',
      );
    }
  });

  it('should return 400 if the input data is not valid (an empty object is passed).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥ –∏ –æ–¥–∏–Ω –ø–æ—Å—Ç
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –Ω–∏–º
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º accessToken –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º –æ–±—ä–µ–∫—Ç–æ–º –≤ —Ç–µ–ª–µ, –æ–∂–∏–¥–∞–µ–º 400 Bad Request
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({})
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—è likeStatus
    expect(resUpdateReaction.body).toEqual({
      errorsMessages: [
        {
          field: 'likeStatus',
          message:
            'likeStatus must be one of the following values: None, Like, Dislike; Received value: undefined',
        },
      ],
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Å—Ç–∞–ª–æ—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (0 –ª–∞–π–∫–æ–≤, 0 –¥–∏–∑–ª–∞–π–∫–æ–≤, —Å—Ç–∞—Ç—É—Å None)
    const foundComment: CommentViewDto = await commentsTestManager.getById(createdComment.id);

    expect(foundComment.likesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ12: CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)',
      );
    }
  });

  it('should return 400 if the input data is not valid (likeStatus differs from other values).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥ –∏ –æ–¥–∏–Ω –ø–æ—Å—Ç
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –Ω–∏–º
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º accessToken –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º likeStatus, –æ–∂–∏–¥–∞–µ–º 400 Bad Request
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: 'Likes' })
      .expect(HttpStatus.BAD_REQUEST);

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è likeStatus
    expect(resUpdateReaction.body).toEqual({
      errorsMessages: [
        {
          field: 'likeStatus',
          message:
            'likeStatus must be one of the following values: None, Like, Dislike; Received value: Likes',
        },
      ],
    });

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Å—Ç–∞–ª–æ—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (0 –ª–∞–π–∫–æ–≤, 0 –¥–∏–∑–ª–∞–π–∫–æ–≤, —Å—Ç–∞—Ç—É—Å None)
    const foundComment: CommentViewDto = await commentsTestManager.getById(createdComment.id);

    expect(foundComment.likesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ13: CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)',
      );
    }
  });

  it('should return a 401 error if the user is not logged in (sending an invalid access token)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥ –∏ –æ–¥–∏–Ω –ø–æ—Å—Ç
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –Ω–∏–º
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º accessToken –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdComment]: CommentViewDto[] = await commentsTestManager.createComment(
      1,
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    // üîª –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –µ–≥–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
    await TestUtils.delay(3000);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º/–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º, –æ–∂–∏–¥–∞–µ–º 401 Unauthorized
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/comments/${createdComment.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Like })
      .expect(HttpStatus.UNAUTHORIZED);

    // üîª –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–∞–∫—Ü–∏—è—Ö
    const foundComment_1: CommentViewDto = await commentsTestManager.getById(createdComment.id);

    expect(foundComment_1.likesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ14: CommentsController - updateReaction() (PUT: /comments/:commentId/like-status)',
      );
    }
  });
});
