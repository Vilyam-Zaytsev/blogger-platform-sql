import request, { Response } from 'supertest';
import { TestUtils } from '../helpers/test.utils';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestLoggers } from '../helpers/test.loggers';
import { AppTestManager } from '../managers/app.test-manager';
import { AdminCredentials, TestResultLogin } from '../types';
import { Server } from 'http';
import { BlogsTestManager } from '../managers/blogs.test-manager';
import { PostViewDto } from '../../src/modules/bloggers-platform/posts/api/view-dto/post.view-dto';
import { PostsTestManager } from '../managers/posts.test-manager';
import { UsersTestManager } from '../managers/users.test-manager';
import { HttpStatus } from '@nestjs/common';
import { UserAccountsConfig } from '../../src/modules/user-accounts/config/user-accounts.config';
import { JwtService } from '@nestjs/jwt';
import { ACCESS_TOKEN_STRATEGY_INJECT_TOKEN } from '../../src/modules/user-accounts/auth/constants/auth-tokens.inject-constants';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';
import { Filter } from '../helpers/filter';
import { SortDirection } from '../../src/core/dto/base.query-params.input-dto';
import { PaginatedViewDto } from '../../src/core/dto/paginated.view-dto';
import { GetPostsQueryParams } from '../../src/modules/bloggers-platform/posts/api/input-dto/get-posts-query-params.input-dto';
import { CoreConfig } from '../../src/core/core.config';
import { ConfigService } from '@nestjs/config';
import { BlogViewDto } from '../../src/modules/bloggers-platform/blogs/api/view-dto/blog.view-dto';
import { ReactionStatus } from '../../src/modules/bloggers-platform/reactions/domain/entities/reaction.entity';

describe('PostsController - updateReaction() (PUT: /posts/:postId/like-status)', () => {
  let appTestManager: AppTestManager;
  let blogsTestManager: BlogsTestManager;
  let postsTestManager: PostsTestManager;
  let usersTestManager: UsersTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init((moduleBuilder) =>
      moduleBuilder
        .overrideProvider(ACCESS_TOKEN_STRATEGY_INJECT_TOKEN)
        .useFactory({
          factory: (userAccountsConfig: UserAccountsConfig) => {
            return new JwtService({
              secret: userAccountsConfig.accessTokenSecret,
              signOptions: { expiresIn: '3s' },
            });
          },
          inject: [UserAccountsConfig],
        })

        .overrideProvider(CoreConfig)
        .useFactory({
          factory: (configService: ConfigService<any, true>) => {
            const coreConfig = new CoreConfig(configService);
            coreConfig.throttleLimit = 10000;
            coreConfig.throttleTtl = 15;

            return coreConfig;
          },
          inject: [ConfigService],
        }),
    );

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    blogsTestManager = new BlogsTestManager(server, adminCredentialsInBase64);
    postsTestManager = new PostsTestManager(server, adminCredentialsInBase64);
    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);

    appTestManager.clearThrottlerStorage();
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should update the user\'s "like" reaction and increase the number of similar reactions(‚Ññ1).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–µ–∞–∫—Ü–∏–∏ "Like" –¥–ª—è –ø–æ—Å—Ç–∞
    // üîª –û–∂–∏–¥–∞–µ–º 204 No Content, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∞–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Like })
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å, –Ω–æ myStatus = None
    const foundPost_1: PostViewDto = await postsTestManager.getPostById(createdPost.id);

    expect(foundPost_1.extendedLikesInfo).toEqual({
      likesCount: 1,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
      newestLikes: [
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUser.id,
          login: createdUser.login,
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –ª–∞–π–∫
    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ myStatus = Like –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    const foundPost_2: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    expect(foundPost_2.extendedLikesInfo).toEqual({
      likesCount: 1,
      dislikesCount: 0,
      myStatus: ReactionStatus.Like,
      newestLikes: [
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUser.id,
          login: createdUser.login,
        },
      ],
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ1: PostsController - updateReaction() (PUT: /posts/:postId/like-status)',
      );
    }
  });

  it('should update the user\'s "like" reaction and increase the number of similar reactions(‚Ññ2).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(2);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –æ–±–æ–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const resultLogin: TestResultLogin[] = await usersTestManager.login(
      createdUsers.map((u) => u.login),
    );

    // üîª –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–µ–∞–∫—Ü–∏–∏ "Like"
    const resUpdateReaction: Response[] = [];

    for (let i = 0; i < resultLogin.length; i++) {
      const res: Response = await request(server)
        .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
        .set('Authorization', `Bearer ${resultLogin[i].authTokens.accessToken}`)
        .send({ likeStatus: ReactionStatus.Like })
        .expect(HttpStatus.NO_CONTENT);

      resUpdateReaction.push(res);
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤, –¥–∏–∑–ª–∞–π–∫–æ–≤, myStatus –∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–∞–π–∫–æ–≤
    const foundPost_1: PostViewDto = await postsTestManager.getPostById(createdPost.id);

    expect(foundPost_1.extendedLikesInfo).toEqual({
      likesCount: 2,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
      newestLikes: [
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUsers[1].id,
          login: createdUsers[1].login,
        },
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUsers[0].id,
          login: createdUsers[0].login,
        },
      ],
    });

    // üîª –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ myStatus = Like, –ª–∞–π–∫–æ–≤ 2
    for (let i = 0; i < resultLogin.length; i++) {
      const foundPost: PostViewDto = await postsTestManager.getPostById(
        createdPost.id,
        resultLogin[i].authTokens.accessToken,
      );

      expect(foundPost.extendedLikesInfo).toEqual({
        likesCount: 2,
        dislikesCount: 0,
        myStatus: ReactionStatus.Like,
        newestLikes: [
          {
            addedAt: expect.stringMatching(
              /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
            ),
            userId: createdUsers[1].id,
            login: createdUsers[1].login,
          },
          {
            addedAt: expect.stringMatching(
              /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
            ),
            userId: createdUsers[0].id,
            login: createdUsers[0].login,
          },
        ],
      });
    }

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction[0].body,
        resUpdateReaction[0].statusCode,
        'Test ‚Ññ2: PostsController - updateReaction() (PUT: /posts/:postId/like-status)',
      );
    }
  });

  it('should update the user\'s "like" reaction and increase the number of similar reactions(‚Ññ3).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º —Ç—Ä—ë—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(3);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –≤—Å–µ–º–∏ —Ç—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const resultLogin: TestResultLogin[] = await usersTestManager.login(
      createdUsers.map((u) => u.login),
    );

    // üîª –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–µ–∞–∫—Ü–∏–∏ "Like"
    const resUpdateReaction: Response[] = [];

    for (let i = 0; i < resultLogin.length; i++) {
      const res: Response = await request(server)
        .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
        .set('Authorization', `Bearer ${resultLogin[i].authTokens.accessToken}`)
        .send({ likeStatus: ReactionStatus.Like })
        .expect(HttpStatus.NO_CONTENT);

      resUpdateReaction.push(res);
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ = 3, –¥–∏–∑–ª–∞–π–∫–æ–≤ = 0, myStatus = None
    // üîª newestLikes —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä—ë—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
    const foundPost_1: PostViewDto = await postsTestManager.getPostById(createdPost.id);

    expect(foundPost_1.extendedLikesInfo).toEqual({
      likesCount: 3,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
      newestLikes: [
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUsers[2].id,
          login: createdUsers[2].login,
        },
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUsers[1].id,
          login: createdUsers[1].login,
        },
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUsers[0].id,
          login: createdUsers[0].login,
        },
      ],
    });

    // üîª –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ myStatus = Like –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ = 3
    for (let i = 0; i < resultLogin.length; i++) {
      const foundPost: PostViewDto = await postsTestManager.getPostById(
        createdPost.id,
        resultLogin[i].authTokens.accessToken,
      );

      expect(foundPost.extendedLikesInfo).toEqual({
        likesCount: 3,
        dislikesCount: 0,
        myStatus: ReactionStatus.Like,
        newestLikes: [
          {
            addedAt: expect.stringMatching(
              /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
            ),
            userId: createdUsers[2].id,
            login: createdUsers[2].login,
          },
          {
            addedAt: expect.stringMatching(
              /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
            ),
            userId: createdUsers[1].id,
            login: createdUsers[1].login,
          },
          {
            addedAt: expect.stringMatching(
              /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
            ),
            userId: createdUsers[0].id,
            login: createdUsers[0].login,
          },
        ],
      });
    }

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction[0].body,
        resUpdateReaction[0].statusCode,
        'Test ‚Ññ3: PostsController - updateReaction() (PUT: /posts/:postId/like-status)',
      );
    }
  });

  it('should update the user\'s "like" reaction and increase the number of similar reactions(‚Ññ4).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º —á–µ—Ç—ã—Ä—ë—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(4);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const resultLogin: TestResultLogin[] = await usersTestManager.login(
      createdUsers.map((u) => u.login),
    );

    // üîª –ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞–≤—è—Ç –ª–∞–π–∫–∏ –Ω–∞ –ø–æ—Å—Ç
    for (let i = 0; i < resultLogin.length - 1; i++) {
      await request(server)
        .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
        .set('Authorization', `Bearer ${resultLogin[i].authTokens.accessToken}`)
        .send({ likeStatus: ReactionStatus.Like })
        .expect(HttpStatus.NO_CONTENT);
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∞–π–∫–æ–≤ 3, –¥–∏–∑–ª–∞–π–∫–æ–≤ 0, myStatus None, newestLikes —Å —Ç—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const foundPost_1: PostViewDto = await postsTestManager.getPostById(createdPost.id);

    expect(foundPost_1.extendedLikesInfo).toEqual({
      likesCount: 3,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
      newestLikes: [
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUsers[2].id,
          login: createdUsers[2].login,
        },
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUsers[1].id,
          login: createdUsers[1].login,
        },
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUsers[0].id,
          login: createdUsers[0].login,
        },
      ],
    });

    // üîª –î–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∞–π–∫–æ–≤ 3, myStatus Like, newestLikes —Å —Ç—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    for (let i = 0; i < resultLogin.length - 1; i++) {
      const foundPost: PostViewDto = await postsTestManager.getPostById(
        createdPost.id,
        resultLogin[i].authTokens.accessToken,
      );

      expect(foundPost.extendedLikesInfo).toEqual({
        likesCount: 3,
        dislikesCount: 0,
        myStatus: ReactionStatus.Like,
        newestLikes: [
          {
            addedAt: expect.stringMatching(
              /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
            ),
            userId: createdUsers[2].id,
            login: createdUsers[2].login,
          },
          {
            addedAt: expect.stringMatching(
              /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
            ),
            userId: createdUsers[1].id,
            login: createdUsers[1].login,
          },
          {
            addedAt: expect.stringMatching(
              /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
            ),
            userId: createdUsers[0].id,
            login: createdUsers[0].login,
          },
        ],
      });
    }

    // üîª –ß–µ—Ç–≤—ë—Ä—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫
    const resUpdateReaction_2: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin[3].authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Like })
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∞–π–∫–æ–≤ 4, myStatus Like, newestLikes —Å —Ç—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—á–µ—Ç–≤—ë—Ä—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
    const foundPost: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
      resultLogin[3].authTokens.accessToken,
    );

    expect(foundPost.extendedLikesInfo).toEqual({
      likesCount: 4,
      dislikesCount: 0,
      myStatus: ReactionStatus.Like,
      newestLikes: [
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUsers[3].id,
          login: createdUsers[3].login,
        },
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUsers[2].id,
          login: createdUsers[2].login,
        },
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUsers[1].id,
          login: createdUsers[1].login,
        },
      ],
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction_2.body,
        resUpdateReaction_2.statusCode,
        'Test ‚Ññ4: PostsController - updateReaction() (PUT: /posts/:postId/like-status)',
      );
    }
  });

  it('should update the user\'s "dislike" reaction and increase the number of similar reactions(‚Ññ1).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–µ–∞–∫—Ü–∏–∏ "Dislike" –¥–ª—è –ø–æ—Å—Ç–∞
    // üîª –û–∂–∏–¥–∞–µ–º 204 No Content, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∞–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Dislike })
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dislike —É–≤–µ–ª–∏—á–∏–ª—Å—è, –ª–∞–π–∫–æ–≤ 0, –∏ myStatus —Ä–∞–≤–µ–Ω None
    const foundPost_1: PostViewDto = await postsTestManager.getPostById(createdPost.id);

    expect(foundPost_1.extendedLikesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 1,
      myStatus: ReactionStatus.None,
      newestLikes: [],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –¥–∏–∑–ª–∞–π–∫
    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ myStatus = Dislike –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    const foundPost_2: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    expect(foundPost_2.extendedLikesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 1,
      myStatus: ReactionStatus.Dislike,
      newestLikes: [],
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ5: PostsController - updateReaction() (PUT: /posts/:postId/like-status)',
      );
    }
  });

  it('should update the user\'s "dislike" reaction and increase the number of similar reactions(‚Ññ2).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(2);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –æ–±–æ–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const resultLogin: TestResultLogin[] = await usersTestManager.login(
      createdUsers.map((u) => u.login),
    );

    // üîª –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–µ–∞–∫—Ü–∏–∏ "Dislike"
    const resUpdateReaction: Response[] = [];

    for (let i = 0; i < resultLogin.length; i++) {
      const res: Response = await request(server)
        .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
        .set('Authorization', `Bearer ${resultLogin[i].authTokens.accessToken}`)
        .send({ likeStatus: ReactionStatus.Dislike })
        .expect(HttpStatus.NO_CONTENT);

      resUpdateReaction.push(res);
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dislikesCount = 2, likesCount = 0, myStatus = None
    const foundPost_1: PostViewDto = await postsTestManager.getPostById(createdPost.id);

    expect(foundPost_1.extendedLikesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 2,
      myStatus: ReactionStatus.None,
      newestLikes: [],
    });

    // üîª –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ myStatus = Dislike –∏ dislikesCount = 2
    for (let i = 0; i < resultLogin.length; i++) {
      const foundPost: PostViewDto = await postsTestManager.getPostById(
        createdPost.id,
        resultLogin[i].authTokens.accessToken,
      );

      expect(foundPost.extendedLikesInfo).toEqual({
        likesCount: 0,
        dislikesCount: 2,
        myStatus: ReactionStatus.Dislike,
        newestLikes: [],
      });
    }

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction[0].body,
        resUpdateReaction[0].statusCode,
        'Test ‚Ññ6: PostsController - updateReaction() (PUT: /posts/:postId/like-status)',
      );
    }
  });

  it('should update "None" to "Like", "Like" to "Dislike", "Dislike to "Like", "Like" to "None".', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);

    // üîª –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —Å None –Ω–∞ Like
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Like })
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const foundPost_1: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    expect(foundPost_1.extendedLikesInfo).toEqual({
      likesCount: 1,
      dislikesCount: 0,
      myStatus: ReactionStatus.Like,
      newestLikes: [
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUser.id,
          login: createdUser.login,
        },
      ],
    });

    // üîª –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —Å Like –Ω–∞ Dislike
    await request(server)
      .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Dislike })
      .expect(HttpStatus.NO_CONTENT);

    const foundPost_2: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    expect(foundPost_2.extendedLikesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 1,
      myStatus: ReactionStatus.Dislike,
      newestLikes: [],
    });

    // üîª –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —Å Dislike –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ Like
    await request(server)
      .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Like })
      .expect(HttpStatus.NO_CONTENT);

    const foundPost_3: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    expect(foundPost_3.extendedLikesInfo).toEqual({
      likesCount: 1,
      dislikesCount: 0,
      myStatus: ReactionStatus.Like,
      newestLikes: [
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUser.id,
          login: createdUser.login,
        },
      ],
    });

    // üîª –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —Å Like –Ω–∞ None (—É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏)
    await request(server)
      .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.None })
      .expect(HttpStatus.NO_CONTENT);

    const foundPost_4: PostViewDto = await postsTestManager.getPostById(
      createdPost.id,
      resultLogin.authTokens.accessToken,
    );

    expect(foundPost_4.extendedLikesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
      newestLikes: [],
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ7: PostsController - updateReaction() (PUT: /posts/:postId/like-status)',
      );
    }
  });

  it('1. The first five posts: user 1 - puts likes; user 2 - puts dislikes. 2. The following five posts: user 1 - dislikes; user 2 - likes.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º 10 –ø–æ—Å—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–≥–∞
    const createdPosts: PostViewDto[] = await postsTestManager.createPost(10, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [createUser1, createUser2]: UserViewDto[] = await usersTestManager.createUser(2);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –æ–±–æ–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const resultLogins: TestResultLogin[] = await usersTestManager.login([
      createUser1.login,
      createUser2.login,
    ]);

    // üîª –î–ª—è –ø–µ—Ä–≤—ã—Ö –ø—è—Ç–∏ –ø–æ—Å—Ç–æ–≤: user 1 —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫–∏, user 2 ‚Äî –¥–∏–∑–ª–∞–π–∫–∏
    // üîª –î–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—è—Ç–∏ –ø–æ—Å—Ç–æ–≤: user 1 —Å—Ç–∞–≤–∏—Ç –¥–∏–∑–ª–∞–π–∫–∏, user 2 ‚Äî –ª–∞–π–∫–∏
    for (let i = 0; i < createdPosts.length; i++) {
      if (createdPosts.length / 2 > i) {
        // user 1 - —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫
        await request(server)
          .put(`/${GLOBAL_PREFIX}/posts/${createdPosts[i].id}/like-status`)
          .set('Authorization', `Bearer ${resultLogins[0].authTokens.accessToken}`)
          .send({ likeStatus: ReactionStatus.Like })
          .expect(HttpStatus.NO_CONTENT);

        // user 2 - —Å—Ç–∞–≤–∏—Ç –¥–∏–∑–ª–∞–π–∫
        await request(server)
          .put(`/${GLOBAL_PREFIX}/posts/${createdPosts[i].id}/like-status`)
          .set('Authorization', `Bearer ${resultLogins[1].authTokens.accessToken}`)
          .send({ likeStatus: ReactionStatus.Dislike })
          .expect(HttpStatus.NO_CONTENT);
      } else {
        // user 1 - —Å—Ç–∞–≤–∏—Ç –¥–∏–∑–ª–∞–π–∫
        await request(server)
          .put(`/${GLOBAL_PREFIX}/posts/${createdPosts[i].id}/like-status`)
          .set('Authorization', `Bearer ${resultLogins[0].authTokens.accessToken}`)
          .send({ likeStatus: ReactionStatus.Dislike })
          .expect(HttpStatus.NO_CONTENT);

        // user 2 - —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫
        await request(server)
          .put(`/${GLOBAL_PREFIX}/posts/${createdPosts[i].id}/like-status`)
          .set('Authorization', `Bearer ${resultLogins[1].authTokens.accessToken}`)
          .send({ likeStatus: ReactionStatus.Like })
          .expect(HttpStatus.NO_CONTENT);
      }
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π user 1
    const foundPosts_1: PaginatedViewDto<PostViewDto> = await postsTestManager.getAllPosts(
      {},
      resultLogins[0].authTokens.accessToken,
    );

    // üîª –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    const query: GetPostsQueryParams = new GetPostsQueryParams();
    query.sortDirection = SortDirection.Ascending;
    const sortedPosts: PostViewDto[] = new Filter<PostViewDto>(foundPosts_1.items)
      .sort({ [query.sortBy]: query.sortDirection })
      .getResult();

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏ –∏ myStatus –¥–ª—è user 1
    for (let i = 0; i < sortedPosts.length; i++) {
      if (sortedPosts.length / 2 > i) {
        expect(sortedPosts[i].extendedLikesInfo).toEqual({
          likesCount: 1,
          dislikesCount: 1,
          myStatus: ReactionStatus.Like,
          newestLikes: [
            {
              addedAt: expect.stringMatching(
                /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
              ),
              userId: createUser1.id,
              login: createUser1.login,
            },
          ],
        });
      } else {
        expect(sortedPosts[i].extendedLikesInfo).toEqual({
          likesCount: 1,
          dislikesCount: 1,
          myStatus: ReactionStatus.Dislike,
          newestLikes: [
            {
              addedAt: expect.stringMatching(
                /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
              ),
              userId: createUser2.id,
              login: createUser2.login,
            },
          ],
        });
      }
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π user 2
    const foundPosts_2: PaginatedViewDto<PostViewDto> = await postsTestManager.getAllPosts(
      {},
      resultLogins[1].authTokens.accessToken,
    );

    // üîª –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    query.sortDirection = SortDirection.Ascending;
    const sortedPosts_2: PostViewDto[] = new Filter<PostViewDto>(foundPosts_2.items)
      .sort({ [query.sortBy]: query.sortDirection })
      .getResult();

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫–∏, –¥–∏–∑–ª–∞–π–∫–∏ –∏ myStatus –¥–ª—è user 2
    for (let i = 0; i < sortedPosts_2.length; i++) {
      if (sortedPosts_2.length / 2 > i) {
        expect(sortedPosts_2[i].extendedLikesInfo).toEqual({
          likesCount: 1,
          dislikesCount: 1,
          myStatus: ReactionStatus.Dislike,
          newestLikes: [
            {
              addedAt: expect.stringMatching(
                /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
              ),
              userId: createUser1.id,
              login: createUser1.login,
            },
          ],
        });
      } else {
        expect(sortedPosts_2[i].extendedLikesInfo).toEqual({
          likesCount: 1,
          dislikesCount: 1,
          myStatus: ReactionStatus.Like,
          newestLikes: [
            {
              addedAt: expect.stringMatching(
                /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
              ),
              userId: createUser2.id,
              login: createUser2.login,
            },
          ],
        });
      }
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const foundPosts_3: PaginatedViewDto<PostViewDto> = await postsTestManager.getAllPosts();

    // üîª –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    query.sortDirection = SortDirection.Ascending;
    const sortedPosts_3: PostViewDto[] = new Filter<PostViewDto>(foundPosts_3.items)
      .sort({ [query.sortBy]: query.sortDirection })
      .getResult();

    // üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ myStatus —É –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ None, –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏ –ø–æ–¥—Å—á–∏—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    for (let i = 0; i < sortedPosts_3.length; i++) {
      if (sortedPosts_3.length / 2 > i) {
        expect(sortedPosts_3[i].extendedLikesInfo).toEqual({
          likesCount: 1,
          dislikesCount: 1,
          myStatus: ReactionStatus.None,
          newestLikes: [
            {
              addedAt: expect.stringMatching(
                /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
              ),
              userId: createUser1.id,
              login: createUser1.login,
            },
          ],
        });
      } else {
        expect(sortedPosts_3[i].extendedLikesInfo).toEqual({
          likesCount: 1,
          dislikesCount: 1,
          myStatus: ReactionStatus.None,
          newestLikes: [
            {
              addedAt: expect.stringMatching(
                /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
              ),
              userId: createUser2.id,
              login: createUser2.login,
            },
          ],
        });
      }
    }

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        {},
        HttpStatus.NO_CONTENT,
        'Test ‚Ññ8: PostsController - updateReaction() (PUT: /posts/:postId/like-status)',
      );
    }
  });

  it('1. must create ten users. 2. All ten users like one post. 3.Then each user changes the like to dislike reaction. newestLikes should change along with this.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω –ø–æ—Å—Ç –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–≥–∞
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –¥–µ—Å—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(10);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏; –ø—Ä–∏ 5-–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—á–∏—â–∞–µ–º throttler
    const resultLogins: TestResultLogin[] = await usersTestManager.login(
      createdUsers.map((user: UserViewDto, index: number): string => {
        if (index === 5) appTestManager.clearThrottlerStorage();
        return user.login;
      }),
    );

    // üîª –í—Å–µ –¥–µ—Å—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞–≤—è—Ç –ª–∞–π–∫ –æ–¥–Ω–æ–º—É –ø–æ—Å—Ç—É
    for (let i = 0; i < resultLogins.length; i++) {
      await request(server)
        .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
        .set('Authorization', `Bearer ${resultLogins[i].authTokens.accessToken}`)
        .send({ likeStatus: ReactionStatus.Like })
        .expect(HttpStatus.NO_CONTENT);
    }

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ (10), –¥–∏–∑–ª–∞–π–∫–æ–≤ (0) –∏ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ª–∞–π–∫–æ–≤ (3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
    const foundPost: PostViewDto = await postsTestManager.getPostById(createdPost.id);

    expect(foundPost.extendedLikesInfo).toEqual({
      likesCount: 10,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
      newestLikes: [
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUsers[9].id,
          login: createdUsers[9].login,
        },
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUsers[8].id,
          login: createdUsers[8].login,
        },
        {
          addedAt: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/),
          userId: createdUsers[7].id,
          login: createdUsers[7].login,
        },
      ],
    });

    // üîª –í –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç –ª–∞–π–∫ –Ω–∞ –¥–∏–∑–ª–∞–π–∫, –∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    for (let i = resultLogins.length - 1; i >= 0; i--) {
      await request(server)
        .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
        .set('Authorization', `Bearer ${resultLogins[i].authTokens.accessToken}`)
        .send({ likeStatus: ReactionStatus.Dislike })
        .expect(HttpStatus.NO_CONTENT);

      const foundPost: PostViewDto = await postsTestManager.getPostById(
        createdPost.id,
        resultLogins[i].authTokens.accessToken,
      );

      const dislikesCount: number = resultLogins.length - i;

      expect(foundPost.extendedLikesInfo).toEqual({
        likesCount: 10 - dislikesCount,
        dislikesCount,
        myStatus: ReactionStatus.Dislike,
        newestLikes: (() => {
          if (i >= 3) {
            return [
              {
                addedAt: expect.stringMatching(
                  /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
                ),
                userId: createdUsers[i - 1].id,
                login: createdUsers[i - 1].login,
              },
              {
                addedAt: expect.stringMatching(
                  /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
                ),
                userId: createdUsers[i - 2].id,
                login: createdUsers[i - 2].login,
              },
              {
                addedAt: expect.stringMatching(
                  /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
                ),
                userId: createdUsers[i - 3].id,
                login: createdUsers[i - 3].login,
              },
            ];
          }

          if (i === 2) {
            return [
              {
                addedAt: expect.stringMatching(
                  /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
                ),
                userId: createdUsers[i - 1].id,
                login: createdUsers[i - 1].login,
              },
              {
                addedAt: expect.stringMatching(
                  /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
                ),
                userId: createdUsers[i - 2].id,
                login: createdUsers[i - 2].login,
              },
            ];
          }

          if (i === 1) {
            return [
              {
                addedAt: expect.stringMatching(
                  /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+\+\d{2}:\d{2}$/,
                ),
                userId: createdUsers[i - 1].id,
                login: createdUsers[i - 1].login,
              },
            ];
          }

          return [];
        })(),
      });
    }

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        {},
        HttpStatus.NO_CONTENT,
        'Test ‚Ññ9: PostsController - updateReaction() (PUT: /posts/:postId/like-status)',
      );
    }
  });

  it('should return a 401 if the user is not logged in.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º/–Ω–µ–∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    // üîª –û–∂–∏–¥–∞–µ–º 401 Unauthorized
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
      .set('Authorization', `Bearer incorrect token`)
      .send({ likeStatus: ReactionStatus.Like })
      .expect(HttpStatus.UNAUTHORIZED);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏–π –Ω–µ—Ç –∏ myStatus None
    const foundPost: PostViewDto = await postsTestManager.getPostById(createdPost.id);

    expect(foundPost.extendedLikesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
      newestLikes: [],
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ10: PostsController - updateReaction() (PUT: /posts/:postId/like-status)',
      );
    }
  });

  it('should return the value 404 if the post the user is trying to review does not exist.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);
    // üîª –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –ø–æ—Å—Ç–∞
    const incorrectPostId: string = '1000000';

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç
    // üîª –û–∂–∏–¥–∞–µ–º 404 Not Found
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/posts/${incorrectPostId}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Like })
      .expect(HttpStatus.NOT_FOUND);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ11: PostsController - updateReaction() (PUT: /posts/:postId/like-status)',
      );
    }
  });

  it('should return 400 if the input data is not valid (an empty object is passed).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º –æ–±—ä–µ–∫—Ç–æ–º (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    // üîª –û–∂–∏–¥–∞–µ–º 400 Bad Request —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({})
      .expect(HttpStatus.BAD_REQUEST);

    expect(resUpdateReaction.body).toEqual({
      errorsMessages: [
        {
          field: 'likeStatus',
          message:
            'likeStatus must be one of the following values: None, Like, Dislike; Received value: undefined',
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –∏ myStatus —Ä–∞–≤–µ–Ω None
    const foundPost: PostViewDto = await postsTestManager.getPostById(createdPost.id);

    expect(foundPost.extendedLikesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
      newestLikes: [],
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ12: PostsController - updateReaction() (PUT: /posts/:postId/like-status)',
      );
    }
  });

  it('should return 400 if the input data is not valid (likeStatus differs from other values).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º likeStatus
    // üîª –û–∂–∏–¥–∞–µ–º 400 Bad Request —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: 'Likes' })
      .expect(HttpStatus.BAD_REQUEST);

    expect(resUpdateReaction.body).toEqual({
      errorsMessages: [
        {
          field: 'likeStatus',
          message:
            'likeStatus must be one of the following values: None, Like, Dislike; Received value: Likes',
        },
      ],
    });

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∞–∫—Ü–∏–π –∏ myStatus = None
    const foundPost: PostViewDto = await postsTestManager.getPostById(createdPost.id);

    expect(foundPost.extendedLikesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
      newestLikes: [],
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ13: PostsController - updateReaction() (PUT: /posts/:postId/like-status)',
      );
    }
  });

  it('should return a 401 error if the user is not logged in (sending an invalid access token)', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –±–ª–æ–≥
    const [createdBlog]: BlogViewDto[] = await blogsTestManager.createBlog(1);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ
    const [createdPost]: PostViewDto[] = await postsTestManager.createPost(1, createdBlog.id);
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –õ–æ–≥–∏–Ω–∏–º—Å—è –ø–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    const [resultLogin]: TestResultLogin[] = await usersTestManager.login([createdUser.login]);

    // üîª –ñ–¥—ë–º 3 —Å–µ–∫—É–Ω–¥—ã (–¥–ª—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä)
    await TestUtils.delay(3000);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    // üîª –û–∂–∏–¥–∞–µ–º 401 Unauthorized
    const resUpdateReaction: Response = await request(server)
      .put(`/${GLOBAL_PREFIX}/posts/${createdPost.id}/like-status`)
      .set('Authorization', `Bearer ${resultLogin.authTokens.accessToken}`)
      .send({ likeStatus: ReactionStatus.Like })
      .expect(HttpStatus.UNAUTHORIZED);

    // üîª –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏–π –Ω–µ—Ç –∏ myStatus None
    const foundPost_1: PostViewDto = await postsTestManager.getPostById(createdPost.id);

    expect(foundPost_1.extendedLikesInfo).toEqual({
      likesCount: 0,
      dislikesCount: 0,
      myStatus: ReactionStatus.None,
      newestLikes: [],
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resUpdateReaction.body,
        resUpdateReaction.statusCode,
        'Test ‚Ññ14: PostsController - updateReaction() (PUT: /posts/:postId/like-status)',
      );
    }
  });
});
