import { AppTestManager } from '../managers/app.test-manager';
import { UsersTestManager } from '../managers/users.test-manager';
import { AdminCredentials, TestSearchFilter } from '../types';
import { Server } from 'http';
import request, { Response } from 'supertest';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestUtils } from '../helpers/test.utils';
import { TestLoggers } from '../helpers/test.loggers';
import { Filter } from '../helpers/filter';
import { HttpStatus } from '@nestjs/common';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';
import {
  GetUsersQueryParams,
  UsersSortBy,
} from '../../src/modules/user-accounts/users/api/input-dto/get-users-query-params.input-dto';
import { SortDirection } from '../../src/core/dto/base.query-params.input-dto';

describe('UsersController - getUser() (GET: /users (pagination, sort, search in term))', () => {
  let appTestManager: AppTestManager;
  let usersTestManager: UsersTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['migrations']);
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should use default pagination values when none are provided by the client.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º 12 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(12);

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const resGetUsers: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/sa/users`)
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.OK);

    // üîª –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const query: GetUsersQueryParams = new GetUsersQueryParams();
    // üîª –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const filteredCreatedUsers: UserViewDto[] = new Filter<UserViewDto>(createdUsers)
      .sort({ [query.sortBy]: query.sortDirection })
      .skip(query.calculateSkip())
      .limit(query.pageSize)
      .getResult();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    expect(resGetUsers.body).toEqual({
      pagesCount: 2,
      page: 1,
      pageSize: 10,
      totalCount: 12,
      items: filteredCreatedUsers,
    });
    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    expect(resGetUsers.body.items.length).toEqual(10);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetUsers.body,
        resGetUsers.statusCode,
        'Test ‚Ññ1: UsersController - getUser() (GET: /users (pagination, sort, search in term))',
      );
    }
  });

  it('should use client-provided pagination values to return the correct subset of data(1).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º 12 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(12);

    // üîª –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const query: GetUsersQueryParams = new GetUsersQueryParams();
    query.pageSize = 3;
    query.pageNumber = 2;
    query.sortBy = UsersSortBy.Login;
    query.sortDirection = SortDirection.Ascending;

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const resGetUsers: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/sa/users`)
      .set('Authorization', adminCredentialsInBase64)
      .query(query)
      .expect(HttpStatus.OK);

    // üîª –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const filteredCreatedUsers: UserViewDto[] = new Filter<UserViewDto>(createdUsers)
      .sort({ [query.sortBy]: query.sortDirection })
      .skip(query.calculateSkip())
      .limit(query.pageSize)
      .getResult();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    expect(resGetUsers.body).toEqual({
      pagesCount: 4,
      page: 2,
      pageSize: 3,
      totalCount: 12,
      items: filteredCreatedUsers,
    });
    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expect(resGetUsers.body.items.length).toEqual(3);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetUsers.body,
        resGetUsers.statusCode,
        'Test ‚Ññ2: UsersController - getUser() (GET: /users (pagination, sort, search in term))',
      );
    }
  });

  it('should use client-provided pagination values to return the correct subset of data(2).', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º 12 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(12);

    // üîª –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const query: GetUsersQueryParams = new GetUsersQueryParams();
    query.pageSize = 2;
    query.pageNumber = 6;
    query.sortDirection = SortDirection.Ascending;

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const resGetUsers: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/sa/users`)
      .set('Authorization', adminCredentialsInBase64)
      .query(query)
      .expect(HttpStatus.OK);

    // üîª –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const filteredCreatedUsers: UserViewDto[] = new Filter<UserViewDto>(createdUsers)
      .sort({ [query.sortBy]: query.sortDirection })
      .skip(query.calculateSkip())
      .limit(query.pageSize)
      .getResult();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    expect(resGetUsers.body).toEqual({
      pagesCount: 6,
      page: 6,
      pageSize: 2,
      totalCount: 12,
      items: filteredCreatedUsers,
    });
    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expect(resGetUsers.body.items.length).toEqual(2);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetUsers.body,
        resGetUsers.statusCode,
        'Test ‚Ññ3: UsersController - getUser() (GET: /users (pagination, sort, search in term))',
      );
    }
  });

  it('should use the values provided by the client to search for users by the occurrence of the substring (the  "login" field).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º 12 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(12);

    // üîª –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞ –ø–æ –ª–æ–≥–∏–Ω—É
    const query: GetUsersQueryParams = new GetUsersQueryParams();
    query.searchLoginTerm = 'r1'; // –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –ª–æ–≥–∏–Ω—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "r1"

    // üîª –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    const searchFilter: TestSearchFilter = {
      login: query.searchLoginTerm,
    };

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É /users —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–æ–∏—Å–∫–∞
    const resGetUsers: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/sa/users`)
      .set('Authorization', adminCredentialsInBase64)
      .query(query)
      .expect(HttpStatus.OK);

    // üîª –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ç–∞–∫–∏–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, –∫–∞–∫ –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const filteredCreatedUsers: UserViewDto[] = new Filter<UserViewDto>(createdUsers)
      .filter(searchFilter) // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é "r1" –≤ –ø–æ–ª–µ login
      .sort({ [query.sortBy]: query.sortDirection })
      .getResult();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∏ –æ–∂–∏–¥–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    expect(resGetUsers.body).toEqual({
      pagesCount: 1,
      page: 1,
      pageSize: 10,
      totalCount: 3,
      items: filteredCreatedUsers,
    });

    // üî∏ –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Ä–æ–≤–Ω–æ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–∂–Ω—ã–º –ª–æ–≥–∏–Ω–æ–º
    expect(resGetUsers.body.items.length).toEqual(3);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetUsers.body,
        resGetUsers.statusCode,
        'Test ‚Ññ4: UsersController - getUser() (GET: /users (pagination, sort, search in term))',
      );
    }
  });

  it('should use the values provided by the client to search for users by the occurrence of the substring (the "email" field).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º 12 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(12);

    // üîª –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞ –ø–æ email
    const query: GetUsersQueryParams = new GetUsersQueryParams();
    query.searchEmailTerm = 'r1';

    // üîª –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ email
    const searchFilter: TestSearchFilter = {
      email: query.searchEmailTerm,
    };

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–æ–∏—Å–∫–∞ –ø–æ email
    const resGetUsers: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/sa/users`)
      .set('Authorization', adminCredentialsInBase64)
      .query(query)
      .expect(HttpStatus.OK);

    // üîª –õ–æ–∫–∞–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, –∏–º–∏—Ç–∏—Ä—É—è –ª–æ–≥–∏–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const filteredCreatedUsers: UserViewDto[] = new Filter<UserViewDto>(createdUsers)
      .filter(searchFilter) // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é "r1" –≤ –ø–æ–ª–µ email
      .sort({ [query.sortBy]: query.sortDirection })
      .getResult();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    expect(resGetUsers.body).toEqual({
      pagesCount: 1,
      page: 1,
      pageSize: 10,
      totalCount: 3,
      items: filteredCreatedUsers,
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ ‚Äî —Ä–æ–≤–Ω–æ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º email
    expect(resGetUsers.body.items.length).toEqual(3);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetUsers.body,
        resGetUsers.statusCode,
        'Test ‚Ññ5: UsersController - getUser() (GET: /users (pagination, sort, search in term))',
      );
    }
  });

  it('should use the values provided by the client to search for users by the occurrence of the substring (the "login" and "email" fields).', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º 12 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createdUsers: UserViewDto[] = await usersTestManager.createUser(12);

    // üîª –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –ø–æ –ª–æ–≥–∏–Ω—É –∏ email
    const query: GetUsersQueryParams = new GetUsersQueryParams();
    query.searchLoginTerm = 'r1'; // —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ –≤ login
    query.searchEmailTerm = 'r5'; // —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ –≤ email

    // üîª –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–≤—É–º –ø–æ–ª—è–º
    const searchFilter: TestSearchFilter = {
      login: query.searchLoginTerm,
      email: query.searchEmailTerm,
    };

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å –æ–±–æ–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞
    const resGetUsers: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/sa/users`)
      .set('Authorization', adminCredentialsInBase64)
      .query(query)
      .expect(HttpStatus.OK);

    // üîª –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const filteredCreatedUsers: UserViewDto[] = new Filter<UserViewDto>(createdUsers)
      .filter(searchFilter) // —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ login –∏ email
      .sort({ [query.sortBy]: query.sortDirection })
      .getResult();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    expect(resGetUsers.body).toEqual({
      pagesCount: 1,
      page: 1,
      pageSize: 10,
      totalCount: 4,
      items: filteredCreatedUsers,
    });

    // üî∏ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å —Ä–æ–≤–Ω–æ 4 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expect(resGetUsers.body.items.length).toEqual(4);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetUsers.body,
        resGetUsers.statusCode,
        'Test ‚Ññ6: UsersController - getUser() (GET: /users (pagination, sort, search in term))',
      );
    }
  });

  it('should return a 400 error if the client has passed invalid pagination values.', async () => {
    // üîª –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞, –Ω–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç)
    await usersTestManager.createUser(12);

    // üîª –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å –∑–∞–≤–µ–¥–æ–º–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const resGetUsers: Response = await request(server)
      .get(`/${GLOBAL_PREFIX}/sa/users`)
      .set('Authorization', adminCredentialsInBase64)
      .query({
        pageNumber: 'xxx', // –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –æ–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ
        pageSize: 'xxx', // –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –æ–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ
        sortBy: 123, // –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        sortDirection: 'xxx', // –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ 'ASC' –∏–ª–∏ 'DESC'
        searchLoginTerm: 123, // —Ç–∏–ø –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É (string)
        searchEmailTerm: 123, // —Ç–∏–ø –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É (string)
      })
      .expect(HttpStatus.BAD_REQUEST);

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ç–µ–ª–æ –æ—à–∏–±–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    expect(resGetUsers.body).toEqual({
      errorsMessages: [
        {
          field: 'sortDirection',
          message:
            'sortDirection must be one of the following values: asc, desc; Received value: xxx',
        },
        {
          field: 'pageSize',
          message:
            'pageSize must be a number conforming to the specified constraints; Received value: NaN',
        },
        {
          field: 'pageNumber',
          message:
            'pageNumber must be a number conforming to the specified constraints; Received value: NaN',
        },
        {
          field: 'sortBy',
          message:
            'sortBy must be one of the following values: createdAt, updatedAt, deletedAt, login, email; Received value: 123',
        },
      ],
    });

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resGetUsers.body,
        resGetUsers.statusCode,
        'Test ‚Ññ7: UsersController - getUser() (GET: /users (pagination, sort, search in term))',
      );
    }
  });
});
