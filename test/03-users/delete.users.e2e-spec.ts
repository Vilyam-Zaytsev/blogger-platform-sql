import { AppTestManager } from '../managers/app.test-manager';
import { UsersTestManager } from '../managers/users.test-manager';
import { AdminCredentials } from '../types';
import { Server } from 'http';
import request, { Response } from 'supertest';
import { GLOBAL_PREFIX } from '../../src/setup/global-prefix.setup';
import { TestUtils } from '../helpers/test.utils';
import { PaginatedViewDto } from '../../src/core/dto/paginated.view-dto';
import { TestLoggers } from '../helpers/test.loggers';
import { HttpStatus } from '@nestjs/common';
import { UserViewDto } from '../../src/modules/user-accounts/users/api/view-dto/user.view-dto';

describe('UsersController - deleteUser() (DELETE: /users)', () => {
  let appTestManager: AppTestManager;
  let usersTestManager: UsersTestManager;
  let adminCredentials: AdminCredentials;
  let adminCredentialsInBase64: string;
  let testLoggingEnabled: boolean;
  let server: Server;

  beforeAll(async () => {
    appTestManager = new AppTestManager();
    await appTestManager.init();

    adminCredentials = appTestManager.getAdminCredentials();
    adminCredentialsInBase64 = TestUtils.encodingAdminDataInBase64(
      adminCredentials.login,
      adminCredentials.password,
    );
    server = appTestManager.getServer();
    testLoggingEnabled = appTestManager.coreConfig.testLoggingEnabled;

    usersTestManager = new UsersTestManager(server, adminCredentialsInBase64);
  });

  beforeEach(async () => {
    await appTestManager.cleanupDb(['schema_migrations']);
  });

  afterAll(async () => {
    await appTestManager.close();
  });

  it('should delete user, the admin is authenticated.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    const users_1: PaginatedViewDto<UserViewDto> =
      await usersTestManager.getAll();
    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ –ø–æ—è–≤–∏–ª—Å—è –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    expect(users_1.items).toHaveLength(1);

    // üîª –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const resDeleteUser: Response = await request(server)
      .delete(`/${GLOBAL_PREFIX}/sa/users/${createdUser.id}`)
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.NO_CONTENT);

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    const users_2: PaginatedViewDto<UserViewDto> =
      await usersTestManager.getAll();
    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω (—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π)
    expect(users_2.items).toHaveLength(0);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeleteUser.body,
        resDeleteUser.statusCode,
        'Test ‚Ññ1: UsersController - deleteUser() (DELETE: /users)',
      );
    }
  });

  it('should not delete user, the admin is not authenticated.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
    const resDeleteUser: Response = await request(server)
      .delete(`/${GLOBAL_PREFIX}/sa/users/${createdUser.id}`)
      .set('Authorization', 'incorrect admin credentials')
      .expect(HttpStatus.UNAUTHORIZED);

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    const users: PaginatedViewDto<UserViewDto> =
      await usersTestManager.getAll();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–ª—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    expect(users.items[0]).toEqual<UserViewDto>(createdUser);
    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    expect(users.items).toHaveLength(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeleteUser.body,
        resDeleteUser.statusCode,
        'Test ‚Ññ2: UsersController - deleteUser() (DELETE: /users)',
      );
    }
  });

  it('should return a 404 error if the user was not found by the passed ID in the parameters.', async () => {
    // üîª –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [createdUser]: UserViewDto[] = await usersTestManager.createUser(1);
    // üîª –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const incorrectUserId: number = Number(createdUser.id) + 1;

    // üîª –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    const resDeleteUser: Response = await request(server)
      .delete(`/${GLOBAL_PREFIX}/sa/users/${incorrectUserId}`)
      .set('Authorization', adminCredentialsInBase64)
      .expect(HttpStatus.NOT_FOUND);

    // üîª –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    const users: PaginatedViewDto<UserViewDto> =
      await usersTestManager.getAll();

    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–ª—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    expect(users.items[0]).toEqual<UserViewDto>(createdUser);
    // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    expect(users.items).toHaveLength(1);

    if (testLoggingEnabled) {
      TestLoggers.logE2E(
        resDeleteUser.body,
        resDeleteUser.statusCode,
        'Test ‚Ññ3: UsersController - deleteUser() (DELETE: /users)',
      );
    }
  });
});
